
/Users/chipmc/Documents/Maker/Particle/Projects/Cellular-PIR/target/Cellular-PIR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006108  08080018  08080018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       0000020c  40024000  08086120  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         000000e8  20000400  0808632c  00030400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000808  200004e8  200004e8  000404e8  2**2
                  ALLOC
  5 .module_info_suffix 00000028  08086414  08086414  00036414  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  0808643c  0808643c  0003643c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   00104006  00000000  00000000  00036440  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000168ef  00000000  00000000  0013a446  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000196ee  00000000  00000000  00150d35  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002730  00000000  00000000  0016a423  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003f40  00000000  00000000  0016cb53  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002df13  00000000  00000000  00170a93  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000342c9  00000000  00000000  0019e9a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000b1da5  00000000  00000000  001d2c6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000d20c  00000000  00000000  00284a14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080018 <user_part_module>:
 8080018:	74 57 08 08                                         tW..

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <module_user_pre_init+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <module_user_pre_init+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f004 fec5 	bl	8084dbc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <module_user_pre_init+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <module_user_pre_init+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f004 fee5 	bl	8084e08 <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <module_user_pre_init+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000400 	.word	0x20000400
 8080048:	0808632c 	.word	0x0808632c
 808004c:	200004e8 	.word	0x200004e8
 8080050:	200004e8 	.word	0x200004e8
 8080054:	20000cf0 	.word	0x20000cf0
 8080058:	20000cf0 	.word	0x20000cf0

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f003 fbab 	bl	80837b8 <module_user_init_hook>
 8080062:	4b07      	ldr	r3, [pc, #28]	; (8080080 <module_user_init+0x24>)
 8080064:	4c07      	ldr	r4, [pc, #28]	; (8080084 <module_user_init+0x28>)
 8080066:	461e      	mov	r6, r3
 8080068:	1ae4      	subs	r4, r4, r3
 808006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808006c:	2500      	movs	r5, #0
 808006e:	42a5      	cmp	r5, r4
 8080070:	d004      	beq.n	808007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8080076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f8      	b.n	808006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 808007c:	bd70      	pop	{r4, r5, r6, pc}
 808007e:	bf00      	nop
 8080080:	080860d0 	.word	0x080860d0
 8080084:	08086120 	.word	0x08086120

08080088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080088:	f001 b8e8 	b.w	808125c <setup>

0808008c <module_user_loop>:
}

void module_user_loop() {
 808008c:	b508      	push	{r3, lr}
    loop();
 808008e:	f000 fcd1 	bl	8080a34 <loop>
    _post_loop();
}
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 8080096:	f003 bb51 	b.w	808373c <_post_loop>

0808009a <_Znwj>:
 808009a:	f001 bf49 	b.w	8081f30 <malloc>

0808009e <_ZdlPv>:
 808009e:	f001 bf4f 	b.w	8081f40 <free>

080800a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a2:	7800      	ldrb	r0, [r0, #0]
 80800a4:	fab0 f080 	clz	r0, r0
 80800a8:	0940      	lsrs	r0, r0, #5
 80800aa:	4770      	bx	lr

080800ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800ac:	2301      	movs	r3, #1
 80800ae:	7003      	strb	r3, [r0, #0]
 80800b0:	4770      	bx	lr

080800b2 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80800b2:	6803      	ldr	r3, [r0, #0]
 80800b4:	b2c9      	uxtb	r1, r1
 80800b6:	689b      	ldr	r3, [r3, #8]
 80800b8:	4718      	bx	r3

080800ba <_ZN17Adafruit_FRAM_I2CC1Ev>:
    Constructor
*/
/**************************************************************************/
Adafruit_FRAM_I2C::Adafruit_FRAM_I2C(void)
{
  _framInitialised = false;
 80800ba:	2200      	movs	r2, #0
 80800bc:	7042      	strb	r2, [r0, #1]
}
 80800be:	4770      	bx	lr

080800c0 <_ZN17Adafruit_FRAM_I2C5beginEh>:
    Initializes I2C and configures the chip (call this function before
    doing anything else)
*/
/**************************************************************************/
boolean Adafruit_FRAM_I2C::begin(uint8_t addr)
{
 80800c0:	b510      	push	{r4, lr}
 80800c2:	4604      	mov	r4, r0
  i2c_addr = addr;
 80800c4:	7001      	strb	r1, [r0, #0]
  Wire.begin();
 80800c6:	f003 fc1b 	bl	8083900 <_Z19__fetch_global_Wirev>
 80800ca:	f002 fc2f 	bl	808292c <_ZN7TwoWire5beginEv>
    return false;
  }
  */

  /* Everything seems to be properly initialised and connected */
  _framInitialised = true;
 80800ce:	2001      	movs	r0, #1
 80800d0:	7060      	strb	r0, [r4, #1]

  return true;
}
 80800d2:	bd10      	pop	{r4, pc}

080800d4 <_ZN17Adafruit_FRAM_I2C6write8Eth>:
    @params[in] i2cAddr
                The 8-bit value to write at framAddr
*/
/**************************************************************************/
void Adafruit_FRAM_I2C::write8 (uint16_t framAddr, uint8_t value)
{
 80800d4:	b570      	push	{r4, r5, r6, lr}
 80800d6:	4606      	mov	r6, r0
 80800d8:	460c      	mov	r4, r1
 80800da:	4615      	mov	r5, r2
  Wire.beginTransmission(i2c_addr);
 80800dc:	f003 fc10 	bl	8083900 <_Z19__fetch_global_Wirev>
 80800e0:	7831      	ldrb	r1, [r6, #0]
 80800e2:	f002 fc3a 	bl	808295a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(framAddr >> 8);
 80800e6:	f003 fc0b 	bl	8083900 <_Z19__fetch_global_Wirev>
 80800ea:	0a21      	lsrs	r1, r4, #8
 80800ec:	f7ff ffe1 	bl	80800b2 <_ZN7TwoWire5writeEi>
  Wire.write(framAddr & 0xFF);
 80800f0:	f003 fc06 	bl	8083900 <_Z19__fetch_global_Wirev>
 80800f4:	b2e1      	uxtb	r1, r4
 80800f6:	f7ff ffdc 	bl	80800b2 <_ZN7TwoWire5writeEi>
  Wire.write(value);
 80800fa:	f003 fc01 	bl	8083900 <_Z19__fetch_global_Wirev>
 80800fe:	6803      	ldr	r3, [r0, #0]
 8080100:	4629      	mov	r1, r5
 8080102:	689b      	ldr	r3, [r3, #8]
 8080104:	4798      	blx	r3
  Wire.endTransmission();
 8080106:	f003 fbfb 	bl	8083900 <_Z19__fetch_global_Wirev>
}
 808010a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
  Wire.beginTransmission(i2c_addr);
  Wire.write(framAddr >> 8);
  Wire.write(framAddr & 0xFF);
  Wire.write(value);
  Wire.endTransmission();
 808010e:	f002 bc2f 	b.w	8082970 <_ZN7TwoWire15endTransmissionEv>

08080112 <_ZN17Adafruit_FRAM_I2C5read8Et>:

    @returns    The 8-bit value retrieved at framAddr
*/
/**************************************************************************/
uint8_t Adafruit_FRAM_I2C::read8 (uint16_t framAddr)
{
 8080112:	b538      	push	{r3, r4, r5, lr}
 8080114:	4604      	mov	r4, r0
 8080116:	460d      	mov	r5, r1
  Wire.beginTransmission(i2c_addr);
 8080118:	f003 fbf2 	bl	8083900 <_Z19__fetch_global_Wirev>
 808011c:	7821      	ldrb	r1, [r4, #0]
 808011e:	f002 fc1c 	bl	808295a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(framAddr >> 8);
 8080122:	f003 fbed 	bl	8083900 <_Z19__fetch_global_Wirev>
 8080126:	0a29      	lsrs	r1, r5, #8
 8080128:	f7ff ffc3 	bl	80800b2 <_ZN7TwoWire5writeEi>
  Wire.write(framAddr & 0xFF);
 808012c:	f003 fbe8 	bl	8083900 <_Z19__fetch_global_Wirev>
 8080130:	b2e9      	uxtb	r1, r5
 8080132:	f7ff ffbe 	bl	80800b2 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
 8080136:	f003 fbe3 	bl	8083900 <_Z19__fetch_global_Wirev>
 808013a:	f002 fc19 	bl	8082970 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(i2c_addr, (uint8_t)1);
 808013e:	f003 fbdf 	bl	8083900 <_Z19__fetch_global_Wirev>
 8080142:	2201      	movs	r2, #1
 8080144:	7821      	ldrb	r1, [r4, #0]
 8080146:	f002 fc00 	bl	808294a <_ZN7TwoWire11requestFromEhh>

  return Wire.read();
 808014a:	f003 fbd9 	bl	8083900 <_Z19__fetch_global_Wirev>
 808014e:	6803      	ldr	r3, [r0, #0]
 8080150:	695b      	ldr	r3, [r3, #20]
 8080152:	4798      	blx	r3
}
 8080154:	b2c0      	uxtb	r0, r0
 8080156:	bd38      	pop	{r3, r4, r5, pc}

08080158 <_GLOBAL__sub_I__ZN17Adafruit_FRAM_I2CC2Ev>:
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 8080158:	f001 bcac 	b.w	8081ab4 <HAL_Pin_Map>

0808015c <_Z11watchdogISRv>:
  currentEvent = Time.now();                        // Time in time_t of the interrupt
}

void watchdogISR()
{
  watchdogFlag = true;
 808015c:	4b01      	ldr	r3, [pc, #4]	; (8080164 <_Z11watchdogISRv+0x8>)
 808015e:	2201      	movs	r2, #1
 8080160:	701a      	strb	r2, [r3, #0]
 8080162:	4770      	bx	lr
 8080164:	20000549 	.word	0x20000549

08080168 <_Z9sensorISRv>:
}

// Here are the various hardware and timer interrupt service routines

void sensorISR()
{
 8080168:	b508      	push	{r3, lr}
  sensorDetect = true;                              // sets the sensor flag for the main loop
 808016a:	4b04      	ldr	r3, [pc, #16]	; (808017c <_Z9sensorISRv+0x14>)
 808016c:	2201      	movs	r2, #1
 808016e:	701a      	strb	r2, [r3, #0]
  currentEvent = Time.now();                        // Time in time_t of the interrupt
 8080170:	f003 f957 	bl	8083422 <_ZN9TimeClass3nowEv>
 8080174:	4b02      	ldr	r3, [pc, #8]	; (8080180 <_Z9sensorISRv+0x18>)
 8080176:	6018      	str	r0, [r3, #0]
 8080178:	bd08      	pop	{r3, pc}
 808017a:	bf00      	nop
 808017c:	20000524 	.word	0x20000524
 8080180:	20000504 	.word	0x20000504

08080184 <_Z7sendNow6String>:
  if (verboseMode) Particle.publish("Variables",data, PRIVATE);
  return 1;
}

int sendNow(String command) // Function to force sending data in current hour
{
 8080184:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8080186:	4904      	ldr	r1, [pc, #16]	; (8080198 <_Z7sendNow6String+0x14>)
 8080188:	f003 f807 	bl	808319a <_ZNK6String6equalsEPKc>
  if (command == "1")
 808018c:	b118      	cbz	r0, 8080196 <_Z7sendNow6String+0x12>
  {
    state = REPORTING_STATE;
 808018e:	4b03      	ldr	r3, [pc, #12]	; (808019c <_Z7sendNow6String+0x18>)
 8080190:	2206      	movs	r2, #6
 8080192:	701a      	strb	r2, [r3, #0]
    return 1;
 8080194:	2001      	movs	r0, #1
  }
  else return 0;
}
 8080196:	bd08      	pop	{r3, pc}
 8080198:	08085d1d 	.word	0x08085d1d
 808019c:	20000520 	.word	0x20000520

080801a0 <_Z12hardResetNow6String>:
  }
  else return 0;
}

int hardResetNow(String command)   // Will perform a hard reset on the Electron
{
 80801a0:	b508      	push	{r3, lr}
 80801a2:	4905      	ldr	r1, [pc, #20]	; (80801b8 <_Z12hardResetNow6String+0x18>)
 80801a4:	f002 fff9 	bl	808319a <_ZNK6String6equalsEPKc>
  if (command == "1")
 80801a8:	b120      	cbz	r0, 80801b4 <_Z12hardResetNow6String+0x14>
  {
    digitalWrite(hardResetPin,HIGH);          // This will cut all power to the Electron AND the carrir board
 80801aa:	2004      	movs	r0, #4
 80801ac:	2101      	movs	r1, #1
 80801ae:	f003 fb64 	bl	808387a <digitalWrite>
 80801b2:	2001      	movs	r0, #1
    return 1;                                 // Unfortunately, this will never be sent
  }
  else return 0;
}
 80801b4:	bd08      	pop	{r3, pc}
 80801b6:	bf00      	nop
 80801b8:	08085d1d 	.word	0x08085d1d

080801bc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.16.constprop.21>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
 80801bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80801be:	4605      	mov	r5, r0
 80801c0:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80801c4:	4323      	orrs	r3, r4
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80801c6:	f88d 3000 	strb.w	r3, [sp]
 80801ca:	233c      	movs	r3, #60	; 0x3c
 80801cc:	f002 f99c 	bl	8082508 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, 60, flags1, flags2);
    }
 80801d0:	4628      	mov	r0, r5
 80801d2:	b003      	add	sp, #12
 80801d4:	bd30      	pop	{r4, r5, pc}
	...

080801d8 <_Z9FRAMread8j>:
// Begin section
uint8_t FRAMread8(unsigned int address)  // Read 8 bits from FRAM
{
    uint8_t result;
    //Serial.println("In FRAMread8");
    result = fram.read8(address);
 80801d8:	b281      	uxth	r1, r0
 80801da:	4801      	ldr	r0, [pc, #4]	; (80801e0 <_Z9FRAMread8j+0x8>)
 80801dc:	f7ff bf99 	b.w	8080112 <_ZN17Adafruit_FRAM_I2C5read8Et>
 80801e0:	200004f8 	.word	0x200004f8

080801e4 <_Z10FRAMwrite8jh>:
    return result;
}

void FRAMwrite8(unsigned int address, uint8_t value)    // Write 8 bits to FRAM
{
    fram.write8(address,value);
 80801e4:	460a      	mov	r2, r1
 80801e6:	b281      	uxth	r1, r0
 80801e8:	4801      	ldr	r0, [pc, #4]	; (80801f0 <_Z10FRAMwrite8jh+0xc>)
 80801ea:	f7ff bf73 	b.w	80800d4 <_ZN17Adafruit_FRAM_I2C6write8Eth>
 80801ee:	bf00      	nop
 80801f0:	200004f8 	.word	0x200004f8

080801f4 <_Z10FRAMread16j>:
}

int FRAMread16(unsigned int address)
{
 80801f4:	b570      	push	{r4, r5, r6, lr}
    long two;
    long one;
    //Read the 2 bytes from  memory.
    two = fram.read8(address);
 80801f6:	4d07      	ldr	r5, [pc, #28]	; (8080214 <_Z10FRAMread16j+0x20>)
 80801f8:	b284      	uxth	r4, r0
 80801fa:	4621      	mov	r1, r4
 80801fc:	4628      	mov	r0, r5
 80801fe:	f7ff ff88 	bl	8080112 <_ZN17Adafruit_FRAM_I2C5read8Et>
    one = fram.read8(address + 1);
 8080202:	1c61      	adds	r1, r4, #1
int FRAMread16(unsigned int address)
{
    long two;
    long one;
    //Read the 2 bytes from  memory.
    two = fram.read8(address);
 8080204:	4606      	mov	r6, r0
    one = fram.read8(address + 1);
 8080206:	b289      	uxth	r1, r1
 8080208:	4628      	mov	r0, r5
 808020a:	f7ff ff82 	bl	8080112 <_ZN17Adafruit_FRAM_I2C5read8Et>
    //Return the recomposed long by using bitshift.
    return ((two << 0) & 0xFF) + ((one << 8) & 0xFFFF);
}
 808020e:	eb06 2000 	add.w	r0, r6, r0, lsl #8
 8080212:	bd70      	pop	{r4, r5, r6, pc}
 8080214:	200004f8 	.word	0x200004f8

08080218 <_Z11FRAMwrite16ji>:

void FRAMwrite16(unsigned int address, int value)   // Write 16 bits to FRAM
{
 8080218:	b570      	push	{r4, r5, r6, lr}
 808021a:	460e      	mov	r6, r1
    //Decomposition from a long to 2 bytes by using bitshift.
    //One = Most significant -> Four = Least significant byte
    uint8_t two = (value & 0xFF);
    uint8_t one = ((value >> 8) & 0xFF);
    //Write the 2 bytes into the eeprom memory.
    fram.write8(address, two);
 808021c:	4d07      	ldr	r5, [pc, #28]	; (808023c <_Z11FRAMwrite16ji+0x24>)
 808021e:	b284      	uxth	r4, r0
 8080220:	b2ca      	uxtb	r2, r1
 8080222:	4628      	mov	r0, r5
 8080224:	4621      	mov	r1, r4
 8080226:	f7ff ff55 	bl	80800d4 <_ZN17Adafruit_FRAM_I2C6write8Eth>
    fram.write8(address + 1, one);
 808022a:	1c61      	adds	r1, r4, #1
 808022c:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8080230:	4628      	mov	r0, r5
}
 8080232:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    //One = Most significant -> Four = Least significant byte
    uint8_t two = (value & 0xFF);
    uint8_t one = ((value >> 8) & 0xFF);
    //Write the 2 bytes into the eeprom memory.
    fram.write8(address, two);
    fram.write8(address + 1, one);
 8080236:	b289      	uxth	r1, r1
 8080238:	f7ff bf4c 	b.w	80800d4 <_ZN17Adafruit_FRAM_I2C6write8Eth>
 808023c:	200004f8 	.word	0x200004f8

08080240 <_Z11resetCounts6String>:
  }
  else return 0;
}

int resetCounts(String command)   // Resets the current hourly and daily counts
{
 8080240:	b508      	push	{r3, lr}
 8080242:	4912      	ldr	r1, [pc, #72]	; (808028c <_Z11resetCounts6String+0x4c>)
 8080244:	f002 ffa9 	bl	808319a <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080248:	b1f8      	cbz	r0, 808028a <_Z11resetCounts6String+0x4a>
  {
    FRAMwrite16(CURRENTDAILYCOUNT, 0);   // Reset Daily Count in memory
 808024a:	2100      	movs	r1, #0
 808024c:	200c      	movs	r0, #12
 808024e:	f7ff ffe3 	bl	8080218 <_Z11FRAMwrite16ji>
    FRAMwrite16(CURRENTHOURLYCOUNT, 0);  // Reset Hourly Count in memory
 8080252:	2100      	movs	r1, #0
 8080254:	2008      	movs	r0, #8
 8080256:	f7ff ffdf 	bl	8080218 <_Z11FRAMwrite16ji>
    FRAMwrite16(CURRENTHOURLYDURATION, 0);  // Reset Hourly Duration Count in memory
 808025a:	2100      	movs	r1, #0
 808025c:	200a      	movs	r0, #10
 808025e:	f7ff ffdb 	bl	8080218 <_Z11FRAMwrite16ji>
    FRAMwrite8(RESETCOUNT,0);          // If so, store incremented number - watchdog must have done This
 8080262:	2002      	movs	r0, #2
 8080264:	2100      	movs	r1, #0
 8080266:	f7ff ffbd 	bl	80801e4 <_Z10FRAMwrite8jh>
    resetCount = 0;
 808026a:	4a09      	ldr	r2, [pc, #36]	; (8080290 <_Z11resetCounts6String+0x50>)
 808026c:	2300      	movs	r3, #0
 808026e:	6013      	str	r3, [r2, #0]
    hourlyPersonCount = hourlyDurationSeconds = 0;                    // Reset count variables
 8080270:	4a08      	ldr	r2, [pc, #32]	; (8080294 <_Z11resetCounts6String+0x54>)
    dailyPersonCount = 0;
    hourlyPersonCountSent = hourlyDurationSecondsSent = 0;                // In the off-chance there is data in flight
    dataInFlight = false;
 8080272:	2001      	movs	r0, #1
    FRAMwrite16(CURRENTDAILYCOUNT, 0);   // Reset Daily Count in memory
    FRAMwrite16(CURRENTHOURLYCOUNT, 0);  // Reset Hourly Count in memory
    FRAMwrite16(CURRENTHOURLYDURATION, 0);  // Reset Hourly Duration Count in memory
    FRAMwrite8(RESETCOUNT,0);          // If so, store incremented number - watchdog must have done This
    resetCount = 0;
    hourlyPersonCount = hourlyDurationSeconds = 0;                    // Reset count variables
 8080274:	6013      	str	r3, [r2, #0]
 8080276:	4a08      	ldr	r2, [pc, #32]	; (8080298 <_Z11resetCounts6String+0x58>)
 8080278:	6013      	str	r3, [r2, #0]
    dailyPersonCount = 0;
 808027a:	4a08      	ldr	r2, [pc, #32]	; (808029c <_Z11resetCounts6String+0x5c>)
 808027c:	6013      	str	r3, [r2, #0]
    hourlyPersonCountSent = hourlyDurationSecondsSent = 0;                // In the off-chance there is data in flight
 808027e:	4a08      	ldr	r2, [pc, #32]	; (80802a0 <_Z11resetCounts6String+0x60>)
 8080280:	6013      	str	r3, [r2, #0]
 8080282:	4a08      	ldr	r2, [pc, #32]	; (80802a4 <_Z11resetCounts6String+0x64>)
 8080284:	6013      	str	r3, [r2, #0]
    dataInFlight = false;
 8080286:	4a08      	ldr	r2, [pc, #32]	; (80802a8 <_Z11resetCounts6String+0x68>)
 8080288:	7013      	strb	r3, [r2, #0]
    return 1;
  }
  else return 0;
}
 808028a:	bd08      	pop	{r3, pc}
 808028c:	08085d1d 	.word	0x08085d1d
 8080290:	20000534 	.word	0x20000534
 8080294:	200004fc 	.word	0x200004fc
 8080298:	20000528 	.word	0x20000528
 808029c:	200004ec 	.word	0x200004ec
 80802a0:	20000560 	.word	0x20000560
 80802a4:	2000051c 	.word	0x2000051c
 80802a8:	200005bd 	.word	0x200005bd

080802ac <_Z10FRAMread32m>:
}

unsigned long FRAMread32(unsigned long address)
{
 80802ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    long four;
    long three;
    long two;
    long one;
    //Read the 4 bytes from memory.
    four = fram.read8(address);
 80802b0:	4e0f      	ldr	r6, [pc, #60]	; (80802f0 <_Z10FRAMread32m+0x44>)
 80802b2:	b284      	uxth	r4, r0
 80802b4:	4621      	mov	r1, r4
 80802b6:	4630      	mov	r0, r6
 80802b8:	f7ff ff2b 	bl	8080112 <_ZN17Adafruit_FRAM_I2C5read8Et>
    three = fram.read8(address + 1);
 80802bc:	1c61      	adds	r1, r4, #1
    long four;
    long three;
    long two;
    long one;
    //Read the 4 bytes from memory.
    four = fram.read8(address);
 80802be:	4605      	mov	r5, r0
    three = fram.read8(address + 1);
 80802c0:	b289      	uxth	r1, r1
 80802c2:	4630      	mov	r0, r6
 80802c4:	f7ff ff25 	bl	8080112 <_ZN17Adafruit_FRAM_I2C5read8Et>
    two = fram.read8(address + 2);
 80802c8:	1ca1      	adds	r1, r4, #2
    long three;
    long two;
    long one;
    //Read the 4 bytes from memory.
    four = fram.read8(address);
    three = fram.read8(address + 1);
 80802ca:	4680      	mov	r8, r0
    two = fram.read8(address + 2);
 80802cc:	b289      	uxth	r1, r1
 80802ce:	4630      	mov	r0, r6
 80802d0:	f7ff ff1f 	bl	8080112 <_ZN17Adafruit_FRAM_I2C5read8Et>
    one = fram.read8(address + 3);
 80802d4:	1ce1      	adds	r1, r4, #3
    long two;
    long one;
    //Read the 4 bytes from memory.
    four = fram.read8(address);
    three = fram.read8(address + 1);
    two = fram.read8(address + 2);
 80802d6:	4607      	mov	r7, r0
    one = fram.read8(address + 3);
 80802d8:	b289      	uxth	r1, r1
 80802da:	4630      	mov	r0, r6
 80802dc:	f7ff ff19 	bl	8080112 <_ZN17Adafruit_FRAM_I2C5read8Et>
    //Return the recomposed long by using bitshift.
    return ((four << 0) & 0xFF) + ((three << 8) & 0xFFFF) + ((two << 16) & 0xFFFFFF) + ((one << 24) & 0xFFFFFFFF);
 80802e0:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 80802e4:	eb05 4507 	add.w	r5, r5, r7, lsl #16
}
 80802e8:	eb05 6000 	add.w	r0, r5, r0, lsl #24
 80802ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80802f0:	200004f8 	.word	0x200004f8

080802f4 <_Z11FRAMwrite32im>:

void FRAMwrite32(int address, unsigned long value)  // Write 32 bits to FRAM
{
 80802f4:	b570      	push	{r4, r5, r6, lr}
 80802f6:	460e      	mov	r6, r1
    uint8_t four = (value & 0xFF);
    uint8_t three = ((value >> 8) & 0xFF);
    uint8_t two = ((value >> 16) & 0xFF);
    uint8_t one = ((value >> 24) & 0xFF);
    //Write the 4 bytes into the eeprom memory.
    fram.write8(address, four);
 80802f8:	4d0e      	ldr	r5, [pc, #56]	; (8080334 <_Z11FRAMwrite32im+0x40>)
 80802fa:	b284      	uxth	r4, r0
 80802fc:	b2ca      	uxtb	r2, r1
 80802fe:	4628      	mov	r0, r5
 8080300:	4621      	mov	r1, r4
 8080302:	f7ff fee7 	bl	80800d4 <_ZN17Adafruit_FRAM_I2C6write8Eth>
    fram.write8(address + 1, three);
 8080306:	1c61      	adds	r1, r4, #1
 8080308:	f3c6 2207 	ubfx	r2, r6, #8, #8
 808030c:	4628      	mov	r0, r5
 808030e:	b289      	uxth	r1, r1
 8080310:	f7ff fee0 	bl	80800d4 <_ZN17Adafruit_FRAM_I2C6write8Eth>
    fram.write8(address + 2, two);
 8080314:	1ca1      	adds	r1, r4, #2
 8080316:	f3c6 4207 	ubfx	r2, r6, #16, #8
 808031a:	4628      	mov	r0, r5
 808031c:	b289      	uxth	r1, r1
 808031e:	f7ff fed9 	bl	80800d4 <_ZN17Adafruit_FRAM_I2C6write8Eth>
    fram.write8(address + 3, one);
 8080322:	1ce1      	adds	r1, r4, #3
 8080324:	0e32      	lsrs	r2, r6, #24
 8080326:	4628      	mov	r0, r5
}
 8080328:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    uint8_t one = ((value >> 24) & 0xFF);
    //Write the 4 bytes into the eeprom memory.
    fram.write8(address, four);
    fram.write8(address + 1, three);
    fram.write8(address + 2, two);
    fram.write8(address + 3, one);
 808032c:	b289      	uxth	r1, r1
 808032e:	f7ff bed1 	b.w	80800d4 <_ZN17Adafruit_FRAM_I2C6write8Eth>
 8080332:	bf00      	nop
 8080334:	200004f8 	.word	0x200004f8

08080338 <_Z17getSignalStrengthv>:
  getTemperature();                                         // Get Temperature at startup as well
  stateOfCharge = int(batteryMonitor.getSoC());             // Percentage of full charge
}

void getSignalStrength()
{
 8080338:	b530      	push	{r4, r5, lr}
 808033a:	b08f      	sub	sp, #60	; 0x3c
  // New Signal Strength capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
 808033c:	4910      	ldr	r1, [pc, #64]	; (8080380 <_Z17getSignalStrengthv+0x48>)
 808033e:	a804      	add	r0, sp, #16
 8080340:	f001 fea2 	bl	8082088 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
 8080344:	a804      	add	r0, sp, #16
 8080346:	f001 fefa 	bl	808213e <_ZNK14CellularSignal19getAccessTechnologyEv>
 808034a:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
 808034c:	a804      	add	r0, sp, #16
 808034e:	f001 ff55 	bl	80821fc <_ZNK14CellularSignal11getStrengthEv>
 8080352:	4605      	mov	r5, r0

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
 8080354:	a804      	add	r0, sp, #16
 8080356:	f001 ff39 	bl	80821cc <_ZNK14CellularSignal10getQualityEv>

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
 808035a:	f003 fe0b 	bl	8083f74 <__aeabi_f2d>
 808035e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8080362:	4628      	mov	r0, r5
 8080364:	f003 fe06 	bl	8083f74 <__aeabi_f2d>
 8080368:	e9cd 0100 	strd	r0, r1, [sp]
 808036c:	4b05      	ldr	r3, [pc, #20]	; (8080384 <_Z17getSignalStrengthv+0x4c>)
 808036e:	4a06      	ldr	r2, [pc, #24]	; (8080388 <_Z17getSignalStrengthv+0x50>)
 8080370:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8080374:	2140      	movs	r1, #64	; 0x40
 8080376:	4805      	ldr	r0, [pc, #20]	; (808038c <_Z17getSignalStrengthv+0x54>)
 8080378:	f001 fe02 	bl	8081f80 <snprintf>
}
 808037c:	b00f      	add	sp, #60	; 0x3c
 808037e:	bd30      	pop	{r4, r5, pc}
 8080380:	200005e8 	.word	0x200005e8
 8080384:	20000410 	.word	0x20000410
 8080388:	08085788 	.word	0x08085788
 808038c:	2000056c 	.word	0x2000056c

08080390 <_Z14getTemperaturev>:

int getTemperature()
{
 8080390:	b508      	push	{r3, lr}
  int reading = analogRead(tmp36Pin);   //getting the voltage reading from the temperature sensor
 8080392:	200a      	movs	r0, #10
 8080394:	f003 fa9d 	bl	80838d2 <analogRead>
  float voltage = reading * 3.3;        // converting that reading to voltage, for 3.3v arduino use 3.3
 8080398:	f003 fdda 	bl	8083f50 <__aeabi_i2d>
 808039c:	a314      	add	r3, pc, #80	; (adr r3, 80803f0 <_Z14getTemperaturev+0x60>)
 808039e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80803a2:	f003 fe3b 	bl	808401c <__aeabi_dmul>
 80803a6:	f004 f873 	bl	8084490 <__aeabi_d2f>
  voltage /= 4096.0;                    // Electron is different than the Arduino where there are only 1024 steps
  int temperatureC = int(((voltage - 0.5) * 100));  //converting from 10 mv per degree with 500 mV offset to degrees ((voltage - 500mV) times 100) - 5 degree calibration
  temperatureF = int((temperatureC * 9.0 / 5.0) + 32.0);  // now convert to Fahrenheit
 80803aa:	f04f 5166 	mov.w	r1, #964689920	; 0x39800000
 80803ae:	f004 f9cd 	bl	808474c <__aeabi_fmul>
 80803b2:	f003 fddf 	bl	8083f74 <__aeabi_f2d>
 80803b6:	2200      	movs	r2, #0
 80803b8:	4b0f      	ldr	r3, [pc, #60]	; (80803f8 <_Z14getTemperaturev+0x68>)
 80803ba:	f003 fc7b 	bl	8083cb4 <__aeabi_dsub>
 80803be:	2200      	movs	r2, #0
 80803c0:	4b0e      	ldr	r3, [pc, #56]	; (80803fc <_Z14getTemperaturev+0x6c>)
 80803c2:	f003 fe2b 	bl	808401c <__aeabi_dmul>
 80803c6:	f004 f83b 	bl	8084440 <__aeabi_d2iz>
 80803ca:	f003 fdc1 	bl	8083f50 <__aeabi_i2d>
 80803ce:	2200      	movs	r2, #0
 80803d0:	4b0b      	ldr	r3, [pc, #44]	; (8080400 <_Z14getTemperaturev+0x70>)
 80803d2:	f003 fe23 	bl	808401c <__aeabi_dmul>
 80803d6:	2200      	movs	r2, #0
 80803d8:	4b0a      	ldr	r3, [pc, #40]	; (8080404 <_Z14getTemperaturev+0x74>)
 80803da:	f003 ff49 	bl	8084270 <__aeabi_ddiv>
 80803de:	2200      	movs	r2, #0
 80803e0:	4b09      	ldr	r3, [pc, #36]	; (8080408 <_Z14getTemperaturev+0x78>)
 80803e2:	f003 fc69 	bl	8083cb8 <__adddf3>
 80803e6:	f004 f82b 	bl	8084440 <__aeabi_d2iz>
 80803ea:	4b08      	ldr	r3, [pc, #32]	; (808040c <_Z14getTemperaturev+0x7c>)
 80803ec:	6018      	str	r0, [r3, #0]
  return temperatureF;
}
 80803ee:	bd08      	pop	{r3, pc}
 80803f0:	66666666 	.word	0x66666666
 80803f4:	400a6666 	.word	0x400a6666
 80803f8:	3fe00000 	.word	0x3fe00000
 80803fc:	40590000 	.word	0x40590000
 8080400:	40220000 	.word	0x40220000
 8080404:	40140000 	.word	0x40140000
 8080408:	40400000 	.word	0x40400000
 808040c:	20000544 	.word	0x20000544

08080410 <_Z16takeMeasurementsv>:
  else Particle.publish("Ubidots Hook", dataCopy, PRIVATE);       // Publish the response code
}

// These are the functions that are part of the takeMeasurements call

void takeMeasurements() {
 8080410:	b508      	push	{r3, lr}
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8080412:	4b09      	ldr	r3, [pc, #36]	; (8080438 <_Z16takeMeasurementsv+0x28>)
 8080414:	2200      	movs	r2, #0
 8080416:	4611      	mov	r1, r2
 8080418:	6858      	ldr	r0, [r3, #4]
 808041a:	f001 fd51 	bl	8081ec0 <network_ready>
  if (Cellular.ready()) getSignalStrength();                // Test signal strength if the cellular modem is on and ready
 808041e:	b108      	cbz	r0, 8080424 <_Z16takeMeasurementsv+0x14>
 8080420:	f7ff ff8a 	bl	8080338 <_Z17getSignalStrengthv>
  getTemperature();                                         // Get Temperature at startup as well
 8080424:	f7ff ffb4 	bl	8080390 <_Z14getTemperaturev>
  stateOfCharge = int(batteryMonitor.getSoC());             // Percentage of full charge
 8080428:	4804      	ldr	r0, [pc, #16]	; (808043c <_Z16takeMeasurementsv+0x2c>)
 808042a:	f002 fa1d 	bl	8082868 <_ZN9FuelGauge6getSoCEv>
 808042e:	f004 fb53 	bl	8084ad8 <__aeabi_f2iz>
 8080432:	4b03      	ldr	r3, [pc, #12]	; (8080440 <_Z16takeMeasurementsv+0x30>)
 8080434:	6018      	str	r0, [r3, #0]
 8080436:	bd08      	pop	{r3, pc}
 8080438:	200005e8 	.word	0x200005e8
 808043c:	2000050c 	.word	0x2000050c
 8080440:	2000052c 	.word	0x2000052c

08080444 <_Z11petWatchdogv>:
{
  watchdogFlag = true;
}

void petWatchdog()
{
 8080444:	b508      	push	{r3, lr}
  digitalWrite(donePin, HIGH);                      // Pet the watchdog
 8080446:	2101      	movs	r1, #1
 8080448:	2006      	movs	r0, #6
 808044a:	f003 fa16 	bl	808387a <digitalWrite>
  digitalWrite(donePin, LOW);
 808044e:	2100      	movs	r1, #0
 8080450:	2006      	movs	r0, #6
 8080452:	f003 fa12 	bl	808387a <digitalWrite>
  watchdogFlag = false;
 8080456:	4b02      	ldr	r3, [pc, #8]	; (8080460 <_Z11petWatchdogv+0x1c>)
 8080458:	2200      	movs	r2, #0
 808045a:	701a      	strb	r2, [r3, #0]
 808045c:	bd08      	pop	{r3, pc}
 808045e:	bf00      	nop
 8080460:	20000549 	.word	0x20000549

08080464 <_Z17connectToParticlev>:
}

// These functions control the connection and disconnection from Particle

bool connectToParticle() {
 8080464:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8080468:	481a      	ldr	r0, [pc, #104]	; (80804d4 <_Z17connectToParticlev+0x70>)
 808046a:	2300      	movs	r3, #0
 808046c:	461a      	mov	r2, r3
 808046e:	4619      	mov	r1, r3
 8080470:	6840      	ldr	r0, [r0, #4]
 8080472:	f001 fd2d 	bl	8081ed0 <network_on>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080476:	f240 36e7 	movw	r6, #999	; 0x3e7
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 808047a:	f001 fcc9 	bl	8081e10 <spark_cloud_flag_connect>
 808047e:	f44f 7496 	mov.w	r4, #300	; 0x12c
 8080482:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080484:	2000      	movs	r0, #0
 8080486:	f001 fb0d 	bl	8081aa4 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 808048a:	4680      	mov	r8, r0
 808048c:	f04f 0900 	mov.w	r9, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080490:	2000      	movs	r0, #0
 8080492:	f001 fb07 	bl	8081aa4 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080496:	ebb0 0008 	subs.w	r0, r0, r8
 808049a:	eb61 0109 	sbc.w	r1, r1, r9
 808049e:	428f      	cmp	r7, r1
 80804a0:	bf08      	it	eq
 80804a2:	4286      	cmpeq	r6, r0
 80804a4:	d305      	bcc.n	80804b2 <_Z17connectToParticlev+0x4e>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80804a6:	f001 fcc3 	bl	8081e30 <spark_cloud_flag_connected>
 80804aa:	b910      	cbnz	r0, 80804b2 <_Z17connectToParticlev+0x4e>
            spark_process();
 80804ac:	f001 fca8 	bl	8081e00 <spark_process>
 80804b0:	e7ee      	b.n	8080490 <_Z17connectToParticlev+0x2c>
 80804b2:	f001 fcbd 	bl	8081e30 <spark_cloud_flag_connected>
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
 80804b6:	b118      	cbz	r0, 80804c0 <_Z17connectToParticlev+0x5c>
    Particle.process();
  }
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}
 80804b8:	e8bd 43d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, lr}
 80804bc:	f001 bcb8 	b.w	8081e30 <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80804c0:	f001 fad8 	bl	8081a74 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80804c4:	4b04      	ldr	r3, [pc, #16]	; (80804d8 <_Z17connectToParticlev+0x74>)
 80804c6:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80804c8:	f001 fc9a 	bl	8081e00 <spark_process>

bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
 80804cc:	3c01      	subs	r4, #1
 80804ce:	d0f3      	beq.n	80804b8 <_Z17connectToParticlev+0x54>
 80804d0:	e7d8      	b.n	8080484 <_Z17connectToParticlev+0x20>
 80804d2:	bf00      	nop
 80804d4:	200005e8 	.word	0x200005e8
 80804d8:	20000bbc 	.word	0x20000bbc

080804dc <_Z22disconnectFromParticlev>:
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}

bool disconnectFromParticle()
{
 80804dc:	b508      	push	{r3, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
 80804de:	f001 fc9f 	bl	8081e20 <spark_cloud_flag_disconnect>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 80804e2:	4806      	ldr	r0, [pc, #24]	; (80804fc <_Z22disconnectFromParticlev+0x20>)
 80804e4:	2300      	movs	r3, #0
 80804e6:	461a      	mov	r2, r3
 80804e8:	4619      	mov	r1, r3
 80804ea:	6840      	ldr	r0, [r0, #4]
 80804ec:	f001 fcf8 	bl	8081ee0 <network_off>
  Particle.disconnect();                                          // Otherwise Electron will attempt to reconnect on wake
  Cellular.off();
  delay(1000);                                                    // Bummer but only should happen once an hour
 80804f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80804f4:	f001 fd5c 	bl	8081fb0 <delay>
  return true;
}
 80804f8:	2001      	movs	r0, #1
 80804fa:	bd08      	pop	{r3, pc}
 80804fc:	200005e8 	.word	0x200005e8

08080500 <_Z9PMICresetv>:


// Power Management function

void PMICreset() {
 8080500:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  power.begin();                                            // Settings for Solar powered power management
 8080502:	481f      	ldr	r0, [pc, #124]	; (8080580 <_Z9PMICresetv+0x80>)
 8080504:	f002 fb4a 	bl	8082b9c <_ZN4PMIC5beginEv>
  power.disableWatchdog();
 8080508:	481d      	ldr	r0, [pc, #116]	; (8080580 <_Z9PMICresetv+0x80>)
 808050a:	f002 fcf4 	bl	8082ef6 <_ZN4PMIC15disableWatchdogEv>
  if (solarPowerMode) {
 808050e:	4b1d      	ldr	r3, [pc, #116]	; (8080584 <_Z9PMICresetv+0x84>)
 8080510:	781c      	ldrb	r4, [r3, #0]
 8080512:	4b1d      	ldr	r3, [pc, #116]	; (8080588 <_Z9PMICresetv+0x88>)
 8080514:	b1bc      	cbz	r4, 8080546 <_Z9PMICresetv+0x46>
    lowBattLimit = 20;                                      // Trigger for Low Batt State
 8080516:	2214      	movs	r2, #20
    power.setInputVoltageLimit(4840);                       // Set the lowest input voltage to 4.84 volts best setting for 6V solar panels
 8080518:	f241 21e8 	movw	r1, #4840	; 0x12e8
 808051c:	4818      	ldr	r0, [pc, #96]	; (8080580 <_Z9PMICresetv+0x80>)

void PMICreset() {
  power.begin();                                            // Settings for Solar powered power management
  power.disableWatchdog();
  if (solarPowerMode) {
    lowBattLimit = 20;                                      // Trigger for Low Batt State
 808051e:	601a      	str	r2, [r3, #0]
    power.setInputVoltageLimit(4840);                       // Set the lowest input voltage to 4.84 volts best setting for 6V solar panels
 8080520:	f002 fbbe 	bl	8082ca0 <_ZN4PMIC20setInputVoltageLimitEt>
    power.setInputCurrentLimit(900);                        // default is 900mA
 8080524:	f44f 7161 	mov.w	r1, #900	; 0x384
 8080528:	4815      	ldr	r0, [pc, #84]	; (8080580 <_Z9PMICresetv+0x80>)
 808052a:	f002 fc43 	bl	8082db4 <_ZN4PMIC20setInputCurrentLimitEt>
    power.setChargeCurrent(0,0,1,0,0,0);                    // default is 512mA matches my 3W panel
 808052e:	2200      	movs	r2, #0
 8080530:	4611      	mov	r1, r2
 8080532:	9202      	str	r2, [sp, #8]
 8080534:	9201      	str	r2, [sp, #4]
 8080536:	9200      	str	r2, [sp, #0]
 8080538:	2301      	movs	r3, #1
 808053a:	4811      	ldr	r0, [pc, #68]	; (8080580 <_Z9PMICresetv+0x80>)
 808053c:	f002 fc82 	bl	8082e44 <_ZN4PMIC16setChargeCurrentEbbbbbb>
    power.setChargeVoltage(4208);                           // Allows us to charge cloe to 100% - battery can't go over 45 celcius
 8080540:	f241 0170 	movw	r1, #4208	; 0x1070
 8080544:	e016      	b.n	8080574 <_Z9PMICresetv+0x74>
  }
  else  {
    lowBattLimit = 30;                                      // Trigger for Low Batt State
 8080546:	221e      	movs	r2, #30
    power.setInputVoltageLimit(4208);                       // This is the default value for the Electron
 8080548:	f241 0170 	movw	r1, #4208	; 0x1070
 808054c:	480c      	ldr	r0, [pc, #48]	; (8080580 <_Z9PMICresetv+0x80>)
    power.setInputCurrentLimit(900);                        // default is 900mA
    power.setChargeCurrent(0,0,1,0,0,0);                    // default is 512mA matches my 3W panel
    power.setChargeVoltage(4208);                           // Allows us to charge cloe to 100% - battery can't go over 45 celcius
  }
  else  {
    lowBattLimit = 30;                                      // Trigger for Low Batt State
 808054e:	601a      	str	r2, [r3, #0]
    power.setInputVoltageLimit(4208);                       // This is the default value for the Electron
 8080550:	f002 fba6 	bl	8082ca0 <_ZN4PMIC20setInputVoltageLimitEt>
    power.setInputCurrentLimit(1500);                       // default is 900mA this let's me charge faster
 8080554:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8080558:	4809      	ldr	r0, [pc, #36]	; (8080580 <_Z9PMICresetv+0x80>)
 808055a:	f002 fc2b 	bl	8082db4 <_ZN4PMIC20setInputCurrentLimitEt>
    power.setChargeCurrent(0,1,1,0,0,0);                    // default is 2048mA (011000) = 512mA+1024mA+512mA)
 808055e:	2301      	movs	r3, #1
 8080560:	4621      	mov	r1, r4
 8080562:	9402      	str	r4, [sp, #8]
 8080564:	9401      	str	r4, [sp, #4]
 8080566:	9400      	str	r4, [sp, #0]
 8080568:	461a      	mov	r2, r3
 808056a:	4805      	ldr	r0, [pc, #20]	; (8080580 <_Z9PMICresetv+0x80>)
 808056c:	f002 fc6a 	bl	8082e44 <_ZN4PMIC16setChargeCurrentEbbbbbb>
    power.setChargeVoltage(4112);                           // default is 4.112V termination voltage
 8080570:	f241 0110 	movw	r1, #4112	; 0x1010
 8080574:	4802      	ldr	r0, [pc, #8]	; (8080580 <_Z9PMICresetv+0x80>)
  }
}
 8080576:	b004      	add	sp, #16
 8080578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  else  {
    lowBattLimit = 30;                                      // Trigger for Low Batt State
    power.setInputVoltageLimit(4208);                       // This is the default value for the Electron
    power.setInputCurrentLimit(1500);                       // default is 900mA this let's me charge faster
    power.setChargeCurrent(0,1,1,0,0,0);                    // default is 2048mA (011000) = 512mA+1024mA+512mA)
    power.setChargeVoltage(4112);                           // default is 4.112V termination voltage
 808057c:	f002 bc95 	b.w	8082eaa <_ZN4PMIC16setChargeVoltageEt>
 8080580:	20000521 	.word	0x20000521
 8080584:	200005bc 	.word	0x200005bc
 8080588:	200004f0 	.word	0x200004f0

0808058c <_Z17printFRAMContentsv>:
/* Finally there is a special mode that can be accessed by pressing the user button at startup
In this mode, you connect to the serial port and the device will download event-level data from the FRAM.
This mode gives you granularity you don't get in the hourly average / summarty data */

void printFRAMContents()                // Prints out the inidividual event values in FRAM
{
 808058c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  connectToParticle();                  // For recovery purposes
 808058e:	f7ff ff69 	bl	8080464 <_Z17connectToParticlev>
  FRAMwrite8(CONTROLREGISTER,8);        // Take device out of low power mode and into Verbose-Mode
 8080592:	2108      	movs	r1, #8
 8080594:	2007      	movs	r0, #7
 8080596:	f7ff fe25 	bl	80801e4 <_Z10FRAMwrite8jh>
 808059a:	240a      	movs	r4, #10
  for (int i=0; i<10; i++) {            // Blinks the blue LED and gives us time to connect Serial
    digitalWrite(blueLED,HIGH);
 808059c:	2101      	movs	r1, #1
 808059e:	2007      	movs	r0, #7
 80805a0:	f003 f96b 	bl	808387a <digitalWrite>
    delay(500);
 80805a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80805a8:	f001 fd02 	bl	8081fb0 <delay>
    digitalWrite(blueLED,LOW);
 80805ac:	2100      	movs	r1, #0
 80805ae:	2007      	movs	r0, #7
 80805b0:	f003 f963 	bl	808387a <digitalWrite>
    delay(500);
 80805b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80805b8:	f001 fcfa 	bl	8081fb0 <delay>

void printFRAMContents()                // Prints out the inidividual event values in FRAM
{
  connectToParticle();                  // For recovery purposes
  FRAMwrite8(CONTROLREGISTER,8);        // Take device out of low power mode and into Verbose-Mode
  for (int i=0; i<10; i++) {            // Blinks the blue LED and gives us time to connect Serial
 80805bc:	3c01      	subs	r4, #1
 80805be:	d1ed      	bne.n	808059c <_Z17printFRAMContentsv+0x10>
    delay(500);
    digitalWrite(blueLED,LOW);
    delay(500);
  }
  unsigned int pointer;
  Serial.println("Time                Count  Duration");
 80805c0:	f003 f81c 	bl	80835fc <_Z16_fetch_usbserialv>
 80805c4:	492e      	ldr	r1, [pc, #184]	; (8080680 <_Z17printFRAMContentsv+0xf4>)
 80805c6:	f002 fce6 	bl	8082f96 <_ZN5Print7printlnEPKc>
 80805ca:	25c0      	movs	r5, #192	; 0xc0
  for (int i=0; i < FRAMread16(CURRENTPOINTER); i++) {
 80805cc:	2012      	movs	r0, #18
 80805ce:	f7ff fe11 	bl	80801f4 <_Z10FRAMread16j>
 80805d2:	4284      	cmp	r4, r0
 80805d4:	da38      	bge.n	8080648 <_Z17printFRAMContentsv+0xbc>
    pointer = (CURRENTOFFSET + i)*WORDSIZE;  // get the pointer from memory and add the offset
    Serial.print(Time.timeStr(FRAMread32(pointer))); Serial.print("  ");
 80805d6:	f003 f811 	bl	80835fc <_Z16_fetch_usbserialv>
 80805da:	4606      	mov	r6, r0
 80805dc:	4628      	mov	r0, r5
 80805de:	f7ff fe65 	bl	80802ac <_Z10FRAMread32m>
 80805e2:	4601      	mov	r1, r0
 80805e4:	4668      	mov	r0, sp
 80805e6:	f002 fed9 	bl	808339c <_ZN9TimeClass7timeStrEl>
 80805ea:	9900      	ldr	r1, [sp, #0]
 80805ec:	4630      	mov	r0, r6
 80805ee:	f002 fcbf 	bl	8082f70 <_ZN5Print5printEPKc>
 80805f2:	4668      	mov	r0, sp
 80805f4:	f002 fd5d 	bl	80830b2 <_ZN6StringD1Ev>
 80805f8:	f003 f800 	bl	80835fc <_Z16_fetch_usbserialv>
 80805fc:	4921      	ldr	r1, [pc, #132]	; (8080684 <_Z17printFRAMContentsv+0xf8>)
 80805fe:	f002 fcb7 	bl	8082f70 <_ZN5Print5printEPKc>
    Serial.print(FRAMread16(pointer+CURRENTCOUNTOFFSET)); Serial.print("   ");
 8080602:	f002 fffb 	bl	80835fc <_Z16_fetch_usbserialv>
 8080606:	4606      	mov	r6, r0
 8080608:	1d28      	adds	r0, r5, #4
 808060a:	f7ff fdf3 	bl	80801f4 <_Z10FRAMread16j>
 808060e:	220a      	movs	r2, #10
 8080610:	4601      	mov	r1, r0
 8080612:	4630      	mov	r0, r6
 8080614:	f002 fd17 	bl	8083046 <_ZN5Print5printEii>
 8080618:	f002 fff0 	bl	80835fc <_Z16_fetch_usbserialv>
 808061c:	491a      	ldr	r1, [pc, #104]	; (8080688 <_Z17printFRAMContentsv+0xfc>)
 808061e:	f002 fca7 	bl	8082f70 <_ZN5Print5printEPKc>
    Serial.print(FRAMread16(pointer+CURRENTDURATIONOFFSET)); Serial.println(" sec");
 8080622:	f002 ffeb 	bl	80835fc <_Z16_fetch_usbserialv>
 8080626:	4606      	mov	r6, r0
 8080628:	1da8      	adds	r0, r5, #6
 808062a:	f7ff fde3 	bl	80801f4 <_Z10FRAMread16j>
 808062e:	220a      	movs	r2, #10
 8080630:	4601      	mov	r1, r0
 8080632:	4630      	mov	r0, r6
 8080634:	f002 fd07 	bl	8083046 <_ZN5Print5printEii>
 8080638:	f002 ffe0 	bl	80835fc <_Z16_fetch_usbserialv>
 808063c:	4913      	ldr	r1, [pc, #76]	; (808068c <_Z17printFRAMContentsv+0x100>)
 808063e:	f002 fcaa 	bl	8082f96 <_ZN5Print7printlnEPKc>
    digitalWrite(blueLED,LOW);
    delay(500);
  }
  unsigned int pointer;
  Serial.println("Time                Count  Duration");
  for (int i=0; i < FRAMread16(CURRENTPOINTER); i++) {
 8080642:	3401      	adds	r4, #1
 8080644:	3508      	adds	r5, #8
 8080646:	e7c1      	b.n	80805cc <_Z17printFRAMContentsv+0x40>
    pointer = (CURRENTOFFSET + i)*WORDSIZE;  // get the pointer from memory and add the offset
    Serial.print(Time.timeStr(FRAMread32(pointer))); Serial.print("  ");
    Serial.print(FRAMread16(pointer+CURRENTCOUNTOFFSET)); Serial.print("   ");
    Serial.print(FRAMread16(pointer+CURRENTDURATIONOFFSET)); Serial.println(" sec");
  }
  Serial.println("  "); Serial.println("Report complete - press reset button to restart");
 8080648:	f002 ffd8 	bl	80835fc <_Z16_fetch_usbserialv>
 808064c:	490d      	ldr	r1, [pc, #52]	; (8080684 <_Z17printFRAMContentsv+0xf8>)
 808064e:	f002 fca2 	bl	8082f96 <_ZN5Print7printlnEPKc>
 8080652:	f002 ffd3 	bl	80835fc <_Z16_fetch_usbserialv>
 8080656:	490e      	ldr	r1, [pc, #56]	; (8080690 <_Z17printFRAMContentsv+0x104>)
 8080658:	f002 fc9d 	bl	8082f96 <_ZN5Print7printlnEPKc>
  while(1) {                          // Blinks forever
    digitalWrite(blueLED,HIGH);
 808065c:	2101      	movs	r1, #1
 808065e:	2007      	movs	r0, #7
 8080660:	f003 f90b 	bl	808387a <digitalWrite>
    delay(500);
 8080664:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8080668:	f001 fca2 	bl	8081fb0 <delay>
    digitalWrite(blueLED,LOW);
 808066c:	2100      	movs	r1, #0
 808066e:	2007      	movs	r0, #7
 8080670:	f003 f903 	bl	808387a <digitalWrite>
    delay(500);
 8080674:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8080678:	f001 fc9a 	bl	8081fb0 <delay>
 808067c:	e7ee      	b.n	808065c <_Z17printFRAMContentsv+0xd0>
 808067e:	bf00      	nop
 8080680:	080857a1 	.word	0x080857a1
 8080684:	080857c6 	.word	0x080857c6
 8080688:	080857c5 	.word	0x080857c5
 808068c:	080857c9 	.word	0x080857c9
 8080690:	080857ce 	.word	0x080857ce

08080694 <_Z14fullModemResetv>:
  }
}

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
 8080694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080696:	f001 fbc3 	bl	8081e20 <spark_cloud_flag_disconnect>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 808069a:	f001 f9eb 	bl	8081a74 <HAL_Timer_Get_Milli_Seconds>

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
 808069e:	f643 2597 	movw	r5, #14999	; 0x3a97
 80806a2:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80806a4:	f001 fbc4 	bl	8081e30 <spark_cloud_flag_connected>
 80806a8:	b140      	cbz	r0, 80806bc <_Z14fullModemResetv+0x28>
 80806aa:	f001 f9e3 	bl	8081a74 <HAL_Timer_Get_Milli_Seconds>
 80806ae:	1b00      	subs	r0, r0, r4
 80806b0:	42a8      	cmp	r0, r5
 80806b2:	d803      	bhi.n	80806bc <_Z14fullModemResetv+0x28>
		delay(100);
 80806b4:	2064      	movs	r0, #100	; 0x64
 80806b6:	f001 fc7b 	bl	8081fb0 <delay>

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
 80806ba:	e7f3      	b.n	80806a4 <_Z14fullModemResetv+0x10>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
 80806bc:	2100      	movs	r1, #0
 80806be:	4b09      	ldr	r3, [pc, #36]	; (80806e4 <_Z14fullModemResetv+0x50>)
 80806c0:	f247 5230 	movw	r2, #30000	; 0x7530
 80806c4:	4608      	mov	r0, r1
 80806c6:	f001 f9a5 	bl	8081a14 <cellular_command>
		delay(100);
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
 80806ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80806ce:	f001 fc6f 	bl	8081fb0 <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
 80806d2:	4b05      	ldr	r3, [pc, #20]	; (80806e8 <_Z14fullModemResetv+0x54>)
 80806d4:	220a      	movs	r2, #10
 80806d6:	681b      	ldr	r3, [r3, #0]
 80806d8:	2101      	movs	r1, #1
 80806da:	4668      	mov	r0, sp
 80806dc:	f002 fd90 	bl	8083200 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
 80806e0:	b003      	add	sp, #12
 80806e2:	bd30      	pop	{r4, r5, pc}
 80806e4:	080857fe 	.word	0x080857fe
 80806e8:	2000054c 	.word	0x2000054c

080806ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80806ec:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80806ee:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80806f0:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80806f2:	b17c      	cbz	r4, 8080714 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80806f4:	6863      	ldr	r3, [r4, #4]
 80806f6:	3b01      	subs	r3, #1
 80806f8:	6063      	str	r3, [r4, #4]
 80806fa:	b95b      	cbnz	r3, 8080714 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80806fc:	6823      	ldr	r3, [r4, #0]
 80806fe:	4620      	mov	r0, r4
 8080700:	689b      	ldr	r3, [r3, #8]
 8080702:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8080704:	68a3      	ldr	r3, [r4, #8]
 8080706:	3b01      	subs	r3, #1
 8080708:	60a3      	str	r3, [r4, #8]
 808070a:	b91b      	cbnz	r3, 8080714 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 808070c:	6823      	ldr	r3, [r4, #0]
 808070e:	4620      	mov	r0, r4
 8080710:	68db      	ldr	r3, [r3, #12]
 8080712:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 8080714:	4628      	mov	r0, r5
 8080716:	bd38      	pop	{r3, r4, r5, pc}

08080718 <_Z9ResetFRAMv>:
}


void ResetFRAM()  // This will reset the FRAM - set the version and preserve delay and sensitivity
{
 8080718:	b530      	push	{r4, r5, lr}
    // Note - have to hard code the size here due to this issue - http://www.microchip.com/forums/m501193.aspx
    byte tempControlReg = FRAMread8(CONTROLREGISTER);
 808071a:	2007      	movs	r0, #7
    fram.write8(address + 3, one);
}


void ResetFRAM()  // This will reset the FRAM - set the version and preserve delay and sensitivity
{
 808071c:	b085      	sub	sp, #20
    // Note - have to hard code the size here due to this issue - http://www.microchip.com/forums/m501193.aspx
    byte tempControlReg = FRAMread8(CONTROLREGISTER);
 808071e:	f7ff fd5b 	bl	80801d8 <_Z9FRAMread8j>
 8080722:	4b1f      	ldr	r3, [pc, #124]	; (80807a0 <_Z9ResetFRAMv+0x88>)
    Particle.publish("FRAM","Resetting in progress",PRIVATE);
 8080724:	2200      	movs	r2, #0
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080726:	781b      	ldrb	r3, [r3, #0]
 8080728:	491e      	ldr	r1, [pc, #120]	; (80807a4 <_Z9ResetFRAMv+0x8c>)
 808072a:	f88d 2000 	strb.w	r2, [sp]


void ResetFRAM()  // This will reset the FRAM - set the version and preserve delay and sensitivity
{
    // Note - have to hard code the size here due to this issue - http://www.microchip.com/forums/m501193.aspx
    byte tempControlReg = FRAMread8(CONTROLREGISTER);
 808072e:	4605      	mov	r5, r0
    Particle.publish("FRAM","Resetting in progress",PRIVATE);
 8080730:	4a1d      	ldr	r2, [pc, #116]	; (80807a8 <_Z9ResetFRAMv+0x90>)
 8080732:	a802      	add	r0, sp, #8
 8080734:	f7ff fd42 	bl	80801bc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.16.constprop.21>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080738:	a803      	add	r0, sp, #12
 808073a:	f7ff ffd7 	bl	80806ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (unsigned long i=8; i < 32768; i++) {  // Start at 8 to not overwrite permanent settings
 808073e:	2408      	movs	r4, #8
        FRAMwrite8(i,0x0);
 8080740:	2100      	movs	r1, #0
 8080742:	4620      	mov	r0, r4
 8080744:	f7ff fd4e 	bl	80801e4 <_Z10FRAMwrite8jh>
        if (i==8192) Serial.println(F("25% done"));
 8080748:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 808074c:	d103      	bne.n	8080756 <_Z9ResetFRAMv+0x3e>
 808074e:	f002 ff55 	bl	80835fc <_Z16_fetch_usbserialv>
 8080752:	4916      	ldr	r1, [pc, #88]	; (80807ac <_Z9ResetFRAMv+0x94>)
 8080754:	e014      	b.n	8080780 <_Z9ResetFRAMv+0x68>
        if (i==16384) Serial.println(F("50% done"));
 8080756:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 808075a:	d103      	bne.n	8080764 <_Z9ResetFRAMv+0x4c>
 808075c:	f002 ff4e 	bl	80835fc <_Z16_fetch_usbserialv>
 8080760:	4913      	ldr	r1, [pc, #76]	; (80807b0 <_Z9ResetFRAMv+0x98>)
 8080762:	e00d      	b.n	8080780 <_Z9ResetFRAMv+0x68>
        if (i==(24576)) Serial.println(F("75% done"));
 8080764:	f5b4 4fc0 	cmp.w	r4, #24576	; 0x6000
 8080768:	d103      	bne.n	8080772 <_Z9ResetFRAMv+0x5a>
 808076a:	f002 ff47 	bl	80835fc <_Z16_fetch_usbserialv>
 808076e:	4911      	ldr	r1, [pc, #68]	; (80807b4 <_Z9ResetFRAMv+0x9c>)
 8080770:	e006      	b.n	8080780 <_Z9ResetFRAMv+0x68>
        if (i==32767) Serial.println(F("Done"));
 8080772:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8080776:	429c      	cmp	r4, r3
 8080778:	d104      	bne.n	8080784 <_Z9ResetFRAMv+0x6c>
 808077a:	f002 ff3f 	bl	80835fc <_Z16_fetch_usbserialv>
 808077e:	490e      	ldr	r1, [pc, #56]	; (80807b8 <_Z9ResetFRAMv+0xa0>)
 8080780:	f002 fc09 	bl	8082f96 <_ZN5Print7printlnEPKc>
void ResetFRAM()  // This will reset the FRAM - set the version and preserve delay and sensitivity
{
    // Note - have to hard code the size here due to this issue - http://www.microchip.com/forums/m501193.aspx
    byte tempControlReg = FRAMread8(CONTROLREGISTER);
    Particle.publish("FRAM","Resetting in progress",PRIVATE);
    for (unsigned long i=8; i < 32768; i++) {  // Start at 8 to not overwrite permanent settings
 8080784:	3401      	adds	r4, #1
 8080786:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 808078a:	d1d9      	bne.n	8080740 <_Z9ResetFRAMv+0x28>
        if (i==8192) Serial.println(F("25% done"));
        if (i==16384) Serial.println(F("50% done"));
        if (i==(24576)) Serial.println(F("75% done"));
        if (i==32767) Serial.println(F("Done"));
    }
    FRAMwrite8(CONTROLREGISTER,tempControlReg);   // Preserce the control register values
 808078c:	4629      	mov	r1, r5
 808078e:	2007      	movs	r0, #7
 8080790:	f7ff fd28 	bl	80801e4 <_Z10FRAMwrite8jh>
    FRAMwrite8(VERSIONADDR,VERSIONNUMBER);  // Reset version to match #define value for sketch
 8080794:	2109      	movs	r1, #9
 8080796:	2000      	movs	r0, #0
 8080798:	f7ff fd24 	bl	80801e4 <_Z10FRAMwrite8jh>
}
 808079c:	b005      	add	sp, #20
 808079e:	bd30      	pop	{r4, r5, pc}
 80807a0:	20000500 	.word	0x20000500
 80807a4:	08085a8f 	.word	0x08085a8f
 80807a8:	0808580b 	.word	0x0808580b
 80807ac:	08085821 	.word	0x08085821
 80807b0:	0808582a 	.word	0x0808582a
 80807b4:	08085833 	.word	0x08085833
 80807b8:	0808583c 	.word	0x0808583c

080807bc <_Z9resetFRAM6String>:
// These are the particle functions that allow you to configure and run the device
// They are intended to allow for customization and control during installations
// and to allow for management.

int resetFRAM(String command)   // Will reset the local counts
{
 80807bc:	b508      	push	{r3, lr}
 80807be:	4904      	ldr	r1, [pc, #16]	; (80807d0 <_Z9resetFRAM6String+0x14>)
 80807c0:	f002 fceb 	bl	808319a <_ZNK6String6equalsEPKc>
  if (command == "1")
 80807c4:	b110      	cbz	r0, 80807cc <_Z9resetFRAM6String+0x10>
  {
    ResetFRAM();
 80807c6:	f7ff ffa7 	bl	8080718 <_Z9ResetFRAMv>
    return 1;
 80807ca:	2001      	movs	r0, #1
  }
  else return 0;
}
 80807cc:	bd08      	pop	{r3, pc}
 80807ce:	bf00      	nop
 80807d0:	08085d1d 	.word	0x08085d1d

080807d4 <_Z11recordCountv>:
  Particle.process();
  connectionEvents.loop();
}

void recordCount()                                          // Handles counting when the sensor triggers
{
 80807d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char data[256];                                           // Store the date in this character array - not global
  sensorDetect = false;                                     // Reset the flag
 80807d8:	4b57      	ldr	r3, [pc, #348]	; (8080938 <_Z11recordCountv+0x164>)
  int timeLapsed = difftime(currentEvent,lastEvent);        // This is the time between this event and last
 80807da:	4d58      	ldr	r5, [pc, #352]	; (808093c <_Z11recordCountv+0x168>)
 80807dc:	4e58      	ldr	r6, [pc, #352]	; (8080940 <_Z11recordCountv+0x16c>)
}

void recordCount()                                          // Handles counting when the sensor triggers
{
  char data[256];                                           // Store the date in this character array - not global
  sensorDetect = false;                                     // Reset the flag
 80807de:	2700      	movs	r7, #0
 80807e0:	701f      	strb	r7, [r3, #0]
  Particle.process();
  connectionEvents.loop();
}

void recordCount()                                          // Handles counting when the sensor triggers
{
 80807e2:	b0c7      	sub	sp, #284	; 0x11c
  char data[256];                                           // Store the date in this character array - not global
  sensorDetect = false;                                     // Reset the flag
  int timeLapsed = difftime(currentEvent,lastEvent);        // This is the time between this event and last
 80807e4:	6830      	ldr	r0, [r6, #0]
 80807e6:	6829      	ldr	r1, [r5, #0]
 80807e8:	f004 f9ea 	bl	8084bc0 <difftime>
  int sessionLength = difftime(lastEvent,sessionStart)+keepSession;
 80807ec:	4c55      	ldr	r4, [pc, #340]	; (8080944 <_Z11recordCountv+0x170>)

void recordCount()                                          // Handles counting when the sensor triggers
{
  char data[256];                                           // Store the date in this character array - not global
  sensorDetect = false;                                     // Reset the flag
  int timeLapsed = difftime(currentEvent,lastEvent);        // This is the time between this event and last
 80807ee:	4682      	mov	sl, r0
 80807f0:	468b      	mov	fp, r1
  int sessionLength = difftime(lastEvent,sessionStart)+keepSession;
 80807f2:	6828      	ldr	r0, [r5, #0]
 80807f4:	6821      	ldr	r1, [r4, #0]
 80807f6:	f004 f9e3 	bl	8084bc0 <difftime>
 80807fa:	4b53      	ldr	r3, [pc, #332]	; (8080948 <_Z11recordCountv+0x174>)
 80807fc:	4680      	mov	r8, r0
 80807fe:	681b      	ldr	r3, [r3, #0]
  if (timeLapsed > keepSession) {                           // Check to see if this is a new session or just a keep session event
 8080800:	4650      	mov	r0, sl
void recordCount()                                          // Handles counting when the sensor triggers
{
  char data[256];                                           // Store the date in this character array - not global
  sensorDetect = false;                                     // Reset the flag
  int timeLapsed = difftime(currentEvent,lastEvent);        // This is the time between this event and last
  int sessionLength = difftime(lastEvent,sessionStart)+keepSession;
 8080802:	4689      	mov	r9, r1
  if (timeLapsed > keepSession) {                           // Check to see if this is a new session or just a keep session event
 8080804:	4659      	mov	r1, fp
void recordCount()                                          // Handles counting when the sensor triggers
{
  char data[256];                                           // Store the date in this character array - not global
  sensorDetect = false;                                     // Reset the flag
  int timeLapsed = difftime(currentEvent,lastEvent);        // This is the time between this event and last
  int sessionLength = difftime(lastEvent,sessionStart)+keepSession;
 8080806:	9303      	str	r3, [sp, #12]
  if (timeLapsed > keepSession) {                           // Check to see if this is a new session or just a keep session event
 8080808:	f003 fe1a 	bl	8084440 <__aeabi_d2iz>
 808080c:	9b03      	ldr	r3, [sp, #12]
 808080e:	46b2      	mov	sl, r6
 8080810:	4298      	cmp	r0, r3
 8080812:	46ab      	mov	fp, r5
 8080814:	dd6c      	ble.n	80808f0 <_Z11recordCountv+0x11c>
void recordCount()                                          // Handles counting when the sensor triggers
{
  char data[256];                                           // Store the date in this character array - not global
  sensorDetect = false;                                     // Reset the flag
  int timeLapsed = difftime(currentEvent,lastEvent);        // This is the time between this event and last
  int sessionLength = difftime(lastEvent,sessionStart)+keepSession;
 8080816:	4618      	mov	r0, r3
 8080818:	f003 fb9a 	bl	8083f50 <__aeabi_i2d>
 808081c:	4642      	mov	r2, r8
 808081e:	464b      	mov	r3, r9
 8080820:	f003 fa4a 	bl	8083cb8 <__adddf3>
 8080824:	f003 fe0c 	bl	8084440 <__aeabi_d2iz>
 8080828:	4680      	mov	r8, r0
  if (timeLapsed > keepSession) {                           // Check to see if this is a new session or just a keep session event
    // Record the current hourly values in the current count section FRAM
    hourlyPersonCount++;                                    // Increment the PersonCount
 808082a:	4e48      	ldr	r6, [pc, #288]	; (808094c <_Z11recordCountv+0x178>)
    FRAMwrite16(CURRENTHOURLYCOUNT, static_cast<uint16_t>(hourlyPersonCount));  // Load Hourly Count to memory
 808082c:	2008      	movs	r0, #8
  sensorDetect = false;                                     // Reset the flag
  int timeLapsed = difftime(currentEvent,lastEvent);        // This is the time between this event and last
  int sessionLength = difftime(lastEvent,sessionStart)+keepSession;
  if (timeLapsed > keepSession) {                           // Check to see if this is a new session or just a keep session event
    // Record the current hourly values in the current count section FRAM
    hourlyPersonCount++;                                    // Increment the PersonCount
 808082e:	6831      	ldr	r1, [r6, #0]
 8080830:	3101      	adds	r1, #1
 8080832:	6031      	str	r1, [r6, #0]
    FRAMwrite16(CURRENTHOURLYCOUNT, static_cast<uint16_t>(hourlyPersonCount));  // Load Hourly Count to memory
 8080834:	b289      	uxth	r1, r1
 8080836:	f7ff fcef 	bl	8080218 <_Z11FRAMwrite16ji>
    hourlyDurationSeconds += sessionLength;               // Increment the duration counter as well
 808083a:	4b45      	ldr	r3, [pc, #276]	; (8080950 <_Z11recordCountv+0x17c>)
    FRAMwrite16(CURRENTHOURLYDURATION, static_cast<uint16_t>(hourlyDurationSeconds));  // Load Hourly Count to memory
 808083c:	200a      	movs	r0, #10
  int sessionLength = difftime(lastEvent,sessionStart)+keepSession;
  if (timeLapsed > keepSession) {                           // Check to see if this is a new session or just a keep session event
    // Record the current hourly values in the current count section FRAM
    hourlyPersonCount++;                                    // Increment the PersonCount
    FRAMwrite16(CURRENTHOURLYCOUNT, static_cast<uint16_t>(hourlyPersonCount));  // Load Hourly Count to memory
    hourlyDurationSeconds += sessionLength;               // Increment the duration counter as well
 808083e:	6819      	ldr	r1, [r3, #0]
 8080840:	4441      	add	r1, r8
 8080842:	6019      	str	r1, [r3, #0]
    FRAMwrite16(CURRENTHOURLYDURATION, static_cast<uint16_t>(hourlyDurationSeconds));  // Load Hourly Count to memory
 8080844:	b289      	uxth	r1, r1
 8080846:	f7ff fce7 	bl	8080218 <_Z11FRAMwrite16ji>
    dailyPersonCount++;                                     // Increment the PersonCount
 808084a:	4b42      	ldr	r3, [pc, #264]	; (8080954 <_Z11recordCountv+0x180>)
    FRAMwrite16(CURRENTDAILYCOUNT, static_cast<uint16_t>(dailyPersonCount));   // Load Daily Count to memory
 808084c:	200c      	movs	r0, #12
    // Record the current hourly values in the current count section FRAM
    hourlyPersonCount++;                                    // Increment the PersonCount
    FRAMwrite16(CURRENTHOURLYCOUNT, static_cast<uint16_t>(hourlyPersonCount));  // Load Hourly Count to memory
    hourlyDurationSeconds += sessionLength;               // Increment the duration counter as well
    FRAMwrite16(CURRENTHOURLYDURATION, static_cast<uint16_t>(hourlyDurationSeconds));  // Load Hourly Count to memory
    dailyPersonCount++;                                     // Increment the PersonCount
 808084e:	6819      	ldr	r1, [r3, #0]
 8080850:	3101      	adds	r1, #1
 8080852:	6019      	str	r1, [r3, #0]
    FRAMwrite16(CURRENTDAILYCOUNT, static_cast<uint16_t>(dailyPersonCount));   // Load Daily Count to memory
 8080854:	b289      	uxth	r1, r1
 8080856:	f7ff fcdf 	bl	8080218 <_Z11FRAMwrite16ji>
    FRAMwrite32(CURRENTCOUNTSTIME, sessionStart);           // Write to FRAM - this is so we know when the last counts were saved
 808085a:	6821      	ldr	r1, [r4, #0]
 808085c:	200e      	movs	r0, #14
 808085e:	f7ff fd49 	bl	80802f4 <_Z11FRAMwrite32im>
    // Record the event values in main FRAM
    unsigned int pointer = (CURRENTOFFSET + FRAMread16(CURRENTPOINTER))*WORDSIZE;  // get the pointer from memory and add the offset
 8080862:	2012      	movs	r0, #18
 8080864:	f7ff fcc6 	bl	80801f4 <_Z10FRAMread16j>
 8080868:	3018      	adds	r0, #24
 808086a:	00c5      	lsls	r5, r0, #3
    FRAMwrite32(pointer, sessionStart);   // Write to FRAM beginning time for each event
 808086c:	6821      	ldr	r1, [r4, #0]
 808086e:	4628      	mov	r0, r5
 8080870:	f7ff fd40 	bl	80802f4 <_Z11FRAMwrite32im>
    FRAMwrite16(pointer+CURRENTCOUNTOFFSET,static_cast<uint16_t>(hourlyPersonCount));
 8080874:	8831      	ldrh	r1, [r6, #0]
 8080876:	1d28      	adds	r0, r5, #4
 8080878:	f7ff fcce 	bl	8080218 <_Z11FRAMwrite16ji>
    FRAMwrite16(pointer+CURRENTDURATIONOFFSET,static_cast<uint16_t>(sessionLength));
 808087c:	fa1f f188 	uxth.w	r1, r8
 8080880:	1da8      	adds	r0, r5, #6
 8080882:	f7ff fcc9 	bl	8080218 <_Z11FRAMwrite16ji>
    unsigned int newCURRENTPOINTER = (FRAMread16(CURRENTPOINTER)+1) % CURRENTCOUNTNUMBER;  // This is where we "wrap" the count to stay in our memory space
 8080886:	2012      	movs	r0, #18
 8080888:	f7ff fcb4 	bl	80801f4 <_Z10FRAMread16j>
    FRAMwrite16(CURRENTPOINTER,newCURRENTPOINTER);
 808088c:	f44f 637e 	mov.w	r3, #4064	; 0xfe0
 8080890:	3001      	adds	r0, #1
 8080892:	fb90 f1f3 	sdiv	r1, r0, r3
 8080896:	fb03 0111 	mls	r1, r3, r1, r0
 808089a:	2012      	movs	r0, #18
 808089c:	f7ff fcbc 	bl	8080218 <_Z11FRAMwrite16ji>
    // Update the LED so we can see a new session is recoded
    ledState = !ledState;                                   // toggle the status of the LEDPIN:
 80808a0:	4b2d      	ldr	r3, [pc, #180]	; (8080958 <_Z11recordCountv+0x184>)
    digitalWrite(blueLED, ledState);                        // update the LED pin itself
 80808a2:	2007      	movs	r0, #7
    FRAMwrite16(pointer+CURRENTCOUNTOFFSET,static_cast<uint16_t>(hourlyPersonCount));
    FRAMwrite16(pointer+CURRENTDURATIONOFFSET,static_cast<uint16_t>(sessionLength));
    unsigned int newCURRENTPOINTER = (FRAMread16(CURRENTPOINTER)+1) % CURRENTCOUNTNUMBER;  // This is where we "wrap" the count to stay in our memory space
    FRAMwrite16(CURRENTPOINTER,newCURRENTPOINTER);
    // Update the LED so we can see a new session is recoded
    ledState = !ledState;                                   // toggle the status of the LEDPIN:
 80808a4:	7819      	ldrb	r1, [r3, #0]
 80808a6:	f081 0101 	eor.w	r1, r1, #1
 80808aa:	7019      	strb	r1, [r3, #0]
    digitalWrite(blueLED, ledState);                        // update the LED pin itself
 80808ac:	f002 ffe5 	bl	808387a <digitalWrite>
    // Publish if ew are in verbose mode
    snprintf(data, sizeof(data), "New visit: %i, duration of %i",hourlyPersonCount,sessionLength);
 80808b0:	f8cd 8000 	str.w	r8, [sp]
 80808b4:	6833      	ldr	r3, [r6, #0]
 80808b6:	4a29      	ldr	r2, [pc, #164]	; (808095c <_Z11recordCountv+0x188>)
 80808b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80808bc:	a806      	add	r0, sp, #24
 80808be:	f001 fb5f 	bl	8081f80 <snprintf>
    if (verboseMode) Particle.publish("Count",data, PRIVATE);
 80808c2:	4b27      	ldr	r3, [pc, #156]	; (8080960 <_Z11recordCountv+0x18c>)
 80808c4:	781b      	ldrb	r3, [r3, #0]
 80808c6:	b15b      	cbz	r3, 80808e0 <_Z11recordCountv+0x10c>
 80808c8:	4b26      	ldr	r3, [pc, #152]	; (8080964 <_Z11recordCountv+0x190>)
 80808ca:	a804      	add	r0, sp, #16
 80808cc:	781b      	ldrb	r3, [r3, #0]
 80808ce:	aa06      	add	r2, sp, #24
 80808d0:	f88d 7000 	strb.w	r7, [sp]
 80808d4:	4924      	ldr	r1, [pc, #144]	; (8080968 <_Z11recordCountv+0x194>)
 80808d6:	f7ff fc71 	bl	80801bc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.16.constprop.21>
 80808da:	a805      	add	r0, sp, #20
 80808dc:	f7ff ff06 	bl	80806ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    // Reset the time values to start the next session
    lastEvent = currentEvent;
 80808e0:	f8da 3000 	ldr.w	r3, [sl]
 80808e4:	f8cb 3000 	str.w	r3, [fp]
    sessionStart = currentEvent;
 80808e8:	f8da 3000 	ldr.w	r3, [sl]
 80808ec:	6023      	str	r3, [r4, #0]
 80808ee:	e001      	b.n	80808f4 <_Z11recordCountv+0x120>
  }
  else lastEvent = currentEvent;                            // In this case, it is the same person who is loitering in the detection area
 80808f0:	6833      	ldr	r3, [r6, #0]
 80808f2:	602b      	str	r3, [r5, #0]
  if (!digitalRead(userSwitch)) {                           // A low value means someone is pushing this button - will trigger a send to Ubidots and take out of low power mode
 80808f4:	2005      	movs	r0, #5
 80808f6:	f002 ffd9 	bl	80838ac <digitalRead>
 80808fa:	4604      	mov	r4, r0
 80808fc:	b9c8      	cbnz	r0, 8080932 <_Z11recordCountv+0x15e>
    if (lowPowerMode) {
 80808fe:	4d1b      	ldr	r5, [pc, #108]	; (808096c <_Z11recordCountv+0x198>)
 8080900:	782b      	ldrb	r3, [r5, #0]
 8080902:	b1b3      	cbz	r3, 8080932 <_Z11recordCountv+0x15e>
 8080904:	4b17      	ldr	r3, [pc, #92]	; (8080964 <_Z11recordCountv+0x190>)
      Particle.publish("Mode","Normal Operations", PRIVATE);
 8080906:	4a1a      	ldr	r2, [pc, #104]	; (8080970 <_Z11recordCountv+0x19c>)
 8080908:	781b      	ldrb	r3, [r3, #0]
 808090a:	491a      	ldr	r1, [pc, #104]	; (8080974 <_Z11recordCountv+0x1a0>)
 808090c:	f88d 0000 	strb.w	r0, [sp]
 8080910:	a804      	add	r0, sp, #16
 8080912:	f7ff fc53 	bl	80801bc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.16.constprop.21>
 8080916:	a805      	add	r0, sp, #20
 8080918:	f7ff fee8 	bl	80806ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      controlRegister = (0b1111110 & controlRegister);     // Will set the lowPowerMode bit to zero
 808091c:	4b16      	ldr	r3, [pc, #88]	; (8080978 <_Z11recordCountv+0x1a4>)
      FRAMwrite8(CONTROLREGISTER,controlRegister);
 808091e:	2007      	movs	r0, #7
  }
  else lastEvent = currentEvent;                            // In this case, it is the same person who is loitering in the detection area
  if (!digitalRead(userSwitch)) {                           // A low value means someone is pushing this button - will trigger a send to Ubidots and take out of low power mode
    if (lowPowerMode) {
      Particle.publish("Mode","Normal Operations", PRIVATE);
      controlRegister = (0b1111110 & controlRegister);     // Will set the lowPowerMode bit to zero
 8080920:	7819      	ldrb	r1, [r3, #0]
 8080922:	f001 017e 	and.w	r1, r1, #126	; 0x7e
 8080926:	7019      	strb	r1, [r3, #0]
      FRAMwrite8(CONTROLREGISTER,controlRegister);
 8080928:	f7ff fc5c 	bl	80801e4 <_Z10FRAMwrite8jh>
      lowPowerMode = false;
 808092c:	702c      	strb	r4, [r5, #0]
      connectToParticle();                                  // Reconnect to Particle for monitoring and management
 808092e:	f7ff fd99 	bl	8080464 <_Z17connectToParticlev>
    }
  }
}
 8080932:	b047      	add	sp, #284	; 0x11c
 8080934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8080938:	20000524 	.word	0x20000524
 808093c:	20000518 	.word	0x20000518
 8080940:	20000504 	.word	0x20000504
 8080944:	200005b4 	.word	0x200005b4
 8080948:	200005b8 	.word	0x200005b8
 808094c:	20000528 	.word	0x20000528
 8080950:	200004fc 	.word	0x200004fc
 8080954:	200004ec 	.word	0x200004ec
 8080958:	20000514 	.word	0x20000514
 808095c:	08085841 	.word	0x08085841
 8080960:	2000055c 	.word	0x2000055c
 8080964:	20000500 	.word	0x20000500
 8080968:	08085a59 	.word	0x08085a59
 808096c:	20000556 	.word	0x20000556
 8080970:	0808585f 	.word	0x0808585f
 8080974:	080859b6 	.word	0x080859b6
 8080978:	200005be 	.word	0x200005be

0808097c <_Z9sendEventv>:

void sendEvent()
{
 808097c:	b530      	push	{r4, r5, lr}
  char data[256];                                                         // Store the date in this character array - not global
  if (hourlyPersonCount > 0) averageHourlyDuration = int(hourlyDurationSeconds / hourlyPersonCount);
 808097e:	4a1f      	ldr	r2, [pc, #124]	; (80809fc <_Z9sendEventv+0x80>)
 8080980:	4d1f      	ldr	r5, [pc, #124]	; (8080a00 <_Z9sendEventv+0x84>)
 8080982:	6813      	ldr	r3, [r2, #0]
 8080984:	4614      	mov	r4, r2
 8080986:	2b00      	cmp	r3, #0
 8080988:	bfc8      	it	gt
 808098a:	6829      	ldrgt	r1, [r5, #0]
 808098c:	4a1d      	ldr	r2, [pc, #116]	; (8080a04 <_Z9sendEventv+0x88>)
 808098e:	bfcc      	ite	gt
 8080990:	fb91 f1f3 	sdivgt	r1, r1, r3
  else averageHourlyDuration = 0;
 8080994:	2100      	movle	r1, #0
 8080996:	6011      	str	r1, [r2, #0]
  snprintf(data, sizeof(data), "{\"hourly\":%i, \"avgduration\":%i, \"daily\":%i,\"battery\":%i, \"temp\":%i, \"resets\":%i}",hourlyPersonCount, averageHourlyDuration, dailyPersonCount, stateOfCharge, temperatureF,resetCount);
 8080998:	491b      	ldr	r1, [pc, #108]	; (8080a08 <_Z9sendEventv+0x8c>)
    }
  }
}

void sendEvent()
{
 808099a:	b0c9      	sub	sp, #292	; 0x124
  char data[256];                                                         // Store the date in this character array - not global
  if (hourlyPersonCount > 0) averageHourlyDuration = int(hourlyDurationSeconds / hourlyPersonCount);
  else averageHourlyDuration = 0;
  snprintf(data, sizeof(data), "{\"hourly\":%i, \"avgduration\":%i, \"daily\":%i,\"battery\":%i, \"temp\":%i, \"resets\":%i}",hourlyPersonCount, averageHourlyDuration, dailyPersonCount, stateOfCharge, temperatureF,resetCount);
 808099c:	6809      	ldr	r1, [r1, #0]
 808099e:	a808      	add	r0, sp, #32
 80809a0:	9104      	str	r1, [sp, #16]
 80809a2:	491a      	ldr	r1, [pc, #104]	; (8080a0c <_Z9sendEventv+0x90>)
 80809a4:	6809      	ldr	r1, [r1, #0]
 80809a6:	9103      	str	r1, [sp, #12]
 80809a8:	4919      	ldr	r1, [pc, #100]	; (8080a10 <_Z9sendEventv+0x94>)
 80809aa:	6809      	ldr	r1, [r1, #0]
 80809ac:	9102      	str	r1, [sp, #8]
 80809ae:	4919      	ldr	r1, [pc, #100]	; (8080a14 <_Z9sendEventv+0x98>)
 80809b0:	6809      	ldr	r1, [r1, #0]
 80809b2:	9101      	str	r1, [sp, #4]
 80809b4:	6812      	ldr	r2, [r2, #0]
 80809b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80809ba:	9200      	str	r2, [sp, #0]
 80809bc:	4a16      	ldr	r2, [pc, #88]	; (8080a18 <_Z9sendEventv+0x9c>)
 80809be:	f001 fadf 	bl	8081f80 <snprintf>
 80809c2:	4b16      	ldr	r3, [pc, #88]	; (8080a1c <_Z9sendEventv+0xa0>)
  Particle.publish("Occupancy_Hook", data, PRIVATE);
 80809c4:	2200      	movs	r2, #0
 80809c6:	781b      	ldrb	r3, [r3, #0]
 80809c8:	4915      	ldr	r1, [pc, #84]	; (8080a20 <_Z9sendEventv+0xa4>)
 80809ca:	f88d 2000 	strb.w	r2, [sp]
 80809ce:	a806      	add	r0, sp, #24
 80809d0:	aa08      	add	r2, sp, #32
 80809d2:	f7ff fbf3 	bl	80801bc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.16.constprop.21>
 80809d6:	a807      	add	r0, sp, #28
 80809d8:	f7ff fe88 	bl	80806ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  hourlyPersonCountSent = hourlyPersonCount;                              // This is the number that was sent to Ubidots - will be subtracted once we get confirmation
 80809dc:	6822      	ldr	r2, [r4, #0]
 80809de:	4b11      	ldr	r3, [pc, #68]	; (8080a24 <_Z9sendEventv+0xa8>)
 80809e0:	601a      	str	r2, [r3, #0]
  hourlyDurationSecondsSent = hourlyDurationSeconds;
 80809e2:	682a      	ldr	r2, [r5, #0]
 80809e4:	4b10      	ldr	r3, [pc, #64]	; (8080a28 <_Z9sendEventv+0xac>)
 80809e6:	601a      	str	r2, [r3, #0]
  currentHourlyPeriod = Time.hour();                                      // Change the time period
 80809e8:	f002 fd22 	bl	8083430 <_ZN9TimeClass4hourEv>
 80809ec:	4b0f      	ldr	r3, [pc, #60]	; (8080a2c <_Z9sendEventv+0xb0>)
  dataInFlight = true;                                                    // set the data inflight flag
 80809ee:	2201      	movs	r2, #1
  else averageHourlyDuration = 0;
  snprintf(data, sizeof(data), "{\"hourly\":%i, \"avgduration\":%i, \"daily\":%i,\"battery\":%i, \"temp\":%i, \"resets\":%i}",hourlyPersonCount, averageHourlyDuration, dailyPersonCount, stateOfCharge, temperatureF,resetCount);
  Particle.publish("Occupancy_Hook", data, PRIVATE);
  hourlyPersonCountSent = hourlyPersonCount;                              // This is the number that was sent to Ubidots - will be subtracted once we get confirmation
  hourlyDurationSecondsSent = hourlyDurationSeconds;
  currentHourlyPeriod = Time.hour();                                      // Change the time period
 80809f0:	7018      	strb	r0, [r3, #0]
  dataInFlight = true;                                                    // set the data inflight flag
 80809f2:	4b0f      	ldr	r3, [pc, #60]	; (8080a30 <_Z9sendEventv+0xb4>)
 80809f4:	701a      	strb	r2, [r3, #0]
}
 80809f6:	b049      	add	sp, #292	; 0x124
 80809f8:	bd30      	pop	{r4, r5, pc}
 80809fa:	bf00      	nop
 80809fc:	20000528 	.word	0x20000528
 8080a00:	200004fc 	.word	0x200004fc
 8080a04:	20000568 	.word	0x20000568
 8080a08:	20000534 	.word	0x20000534
 8080a0c:	20000544 	.word	0x20000544
 8080a10:	2000052c 	.word	0x2000052c
 8080a14:	200004ec 	.word	0x200004ec
 8080a18:	08085871 	.word	0x08085871
 8080a1c:	20000500 	.word	0x20000500
 8080a20:	080858c2 	.word	0x080858c2
 8080a24:	2000051c 	.word	0x2000051c
 8080a28:	20000560 	.word	0x20000560
 8080a2c:	20000548 	.word	0x20000548
 8080a30:	200005bd 	.word	0x200005bd

08080a34 <loop>:

  if (state != ERROR_STATE) state = IDLE_STATE;                         // IDLE unless error from above code
}

void loop()
{
 8080a34:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch(state) {
 8080a36:	4ca8      	ldr	r4, [pc, #672]	; (8080cd8 <loop+0x2a4>)

  if (state != ERROR_STATE) state = IDLE_STATE;                         // IDLE unless error from above code
}

void loop()
{
 8080a38:	b089      	sub	sp, #36	; 0x24
  switch(state) {
 8080a3a:	7823      	ldrb	r3, [r4, #0]
 8080a3c:	3b01      	subs	r3, #1
 8080a3e:	2b06      	cmp	r3, #6
 8080a40:	f200 81af 	bhi.w	8080da2 <loop+0x36e>
 8080a44:	e8df f013 	tbh	[pc, r3, lsl #1]
 8080a48:	00070186 	.word	0x00070186
 8080a4c:	00980055 	.word	0x00980055
 8080a50:	00ee00cb 	.word	0x00ee00cb
 8080a54:	0117      	.short	0x0117
  case IDLE_STATE:
    if(hourlyPersonCountSent) {                                         // Cleared here as there could be counts coming in while "in Flight"
 8080a56:	4da1      	ldr	r5, [pc, #644]	; (8080cdc <loop+0x2a8>)
 8080a58:	6829      	ldr	r1, [r5, #0]
 8080a5a:	b1a1      	cbz	r1, 8080a86 <loop+0x52>
      hourlyPersonCount -= hourlyPersonCountSent;                       // Confirmed that count was recevied - clearing
 8080a5c:	4aa0      	ldr	r2, [pc, #640]	; (8080ce0 <loop+0x2ac>)
      FRAMwrite16(CURRENTHOURLYCOUNT, static_cast<uint16_t>(hourlyPersonCount));  // Load Hourly Count to memory
 8080a5e:	2008      	movs	r0, #8
void loop()
{
  switch(state) {
  case IDLE_STATE:
    if(hourlyPersonCountSent) {                                         // Cleared here as there could be counts coming in while "in Flight"
      hourlyPersonCount -= hourlyPersonCountSent;                       // Confirmed that count was recevied - clearing
 8080a60:	6813      	ldr	r3, [r2, #0]
      FRAMwrite16(CURRENTHOURLYCOUNT, static_cast<uint16_t>(hourlyPersonCount));  // Load Hourly Count to memory
      hourlyDurationSeconds -= hourlyDurationSecondsSent;               // Confirmed that count was recevied - clearing
 8080a62:	4ea0      	ldr	r6, [pc, #640]	; (8080ce4 <loop+0x2b0>)
void loop()
{
  switch(state) {
  case IDLE_STATE:
    if(hourlyPersonCountSent) {                                         // Cleared here as there could be counts coming in while "in Flight"
      hourlyPersonCount -= hourlyPersonCountSent;                       // Confirmed that count was recevied - clearing
 8080a64:	1a59      	subs	r1, r3, r1
 8080a66:	6011      	str	r1, [r2, #0]
      FRAMwrite16(CURRENTHOURLYCOUNT, static_cast<uint16_t>(hourlyPersonCount));  // Load Hourly Count to memory
 8080a68:	b289      	uxth	r1, r1
 8080a6a:	f7ff fbd5 	bl	8080218 <_Z11FRAMwrite16ji>
      hourlyDurationSeconds -= hourlyDurationSecondsSent;               // Confirmed that count was recevied - clearing
 8080a6e:	4a9e      	ldr	r2, [pc, #632]	; (8080ce8 <loop+0x2b4>)
 8080a70:	6831      	ldr	r1, [r6, #0]
 8080a72:	6813      	ldr	r3, [r2, #0]
      FRAMwrite16(CURRENTHOURLYDURATION, static_cast<uint16_t>(hourlyDurationSeconds));  // Load Hourly Duration Count to memory
 8080a74:	200a      	movs	r0, #10
  switch(state) {
  case IDLE_STATE:
    if(hourlyPersonCountSent) {                                         // Cleared here as there could be counts coming in while "in Flight"
      hourlyPersonCount -= hourlyPersonCountSent;                       // Confirmed that count was recevied - clearing
      FRAMwrite16(CURRENTHOURLYCOUNT, static_cast<uint16_t>(hourlyPersonCount));  // Load Hourly Count to memory
      hourlyDurationSeconds -= hourlyDurationSecondsSent;               // Confirmed that count was recevied - clearing
 8080a76:	1a59      	subs	r1, r3, r1
 8080a78:	6011      	str	r1, [r2, #0]
      FRAMwrite16(CURRENTHOURLYDURATION, static_cast<uint16_t>(hourlyDurationSeconds));  // Load Hourly Duration Count to memory
 8080a7a:	b289      	uxth	r1, r1
 8080a7c:	f7ff fbcc 	bl	8080218 <_Z11FRAMwrite16ji>
      hourlyPersonCountSent = hourlyDurationSecondsSent = 0;            // Reset for next time
 8080a80:	2300      	movs	r3, #0
 8080a82:	6033      	str	r3, [r6, #0]
 8080a84:	602b      	str	r3, [r5, #0]
    }
    if (sensorDetect) recordCount();                                    // The ISR had raised the sensor flag
 8080a86:	4b99      	ldr	r3, [pc, #612]	; (8080cec <loop+0x2b8>)
 8080a88:	781b      	ldrb	r3, [r3, #0]
 8080a8a:	b10b      	cbz	r3, 8080a90 <loop+0x5c>
 8080a8c:	f7ff fea2 	bl	80807d4 <_Z11recordCountv>
    if (watchdogFlag) petWatchdog();
 8080a90:	4b97      	ldr	r3, [pc, #604]	; (8080cf0 <loop+0x2bc>)
 8080a92:	781b      	ldrb	r3, [r3, #0]
 8080a94:	b10b      	cbz	r3, 8080a9a <loop+0x66>
 8080a96:	f7ff fcd5 	bl	8080444 <_Z11petWatchdogv>
    if (lowPowerMode && (millis() > stayAwakeTimeStamp + stayAwake)) state = NAPPING_STATE;
 8080a9a:	4b96      	ldr	r3, [pc, #600]	; (8080cf4 <loop+0x2c0>)
 8080a9c:	781b      	ldrb	r3, [r3, #0]
 8080a9e:	b14b      	cbz	r3, 8080ab4 <loop+0x80>
 8080aa0:	f000 ffe8 	bl	8081a74 <HAL_Timer_Get_Milli_Seconds>
 8080aa4:	4b94      	ldr	r3, [pc, #592]	; (8080cf8 <loop+0x2c4>)
 8080aa6:	681a      	ldr	r2, [r3, #0]
 8080aa8:	4b94      	ldr	r3, [pc, #592]	; (8080cfc <loop+0x2c8>)
 8080aaa:	681b      	ldr	r3, [r3, #0]
 8080aac:	4413      	add	r3, r2
 8080aae:	4283      	cmp	r3, r0
 8080ab0:	f0c0 8182 	bcc.w	8080db8 <loop+0x384>
    if (Time.hour() != currentHourlyPeriod) state = REPORTING_STATE;    // We want to report on the hour but not after bedtime
 8080ab4:	f002 fcbc 	bl	8083430 <_ZN9TimeClass4hourEv>
 8080ab8:	4b91      	ldr	r3, [pc, #580]	; (8080d00 <loop+0x2cc>)
 8080aba:	781b      	ldrb	r3, [r3, #0]
 8080abc:	4298      	cmp	r0, r3
 8080abe:	bf1c      	itt	ne
 8080ac0:	2306      	movne	r3, #6
 8080ac2:	7023      	strbne	r3, [r4, #0]
    if ((Time.hour() >= closeTime || Time.hour() < openTime)) state = SLEEPING_STATE;   // The park is closed, time to sleep
 8080ac4:	f002 fcb4 	bl	8083430 <_ZN9TimeClass4hourEv>
 8080ac8:	4b8e      	ldr	r3, [pc, #568]	; (8080d04 <loop+0x2d0>)
 8080aca:	681b      	ldr	r3, [r3, #0]
 8080acc:	4298      	cmp	r0, r3
 8080ace:	f280 8176 	bge.w	8080dbe <loop+0x38a>
 8080ad2:	f002 fcad 	bl	8083430 <_ZN9TimeClass4hourEv>
 8080ad6:	4b8c      	ldr	r3, [pc, #560]	; (8080d08 <loop+0x2d4>)
 8080ad8:	681b      	ldr	r3, [r3, #0]
 8080ada:	4298      	cmp	r0, r3
 8080adc:	f2c0 816f 	blt.w	8080dbe <loop+0x38a>
    if (stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;               // The battery is low - sleep
 8080ae0:	4b8a      	ldr	r3, [pc, #552]	; (8080d0c <loop+0x2d8>)
 8080ae2:	681a      	ldr	r2, [r3, #0]
 8080ae4:	4b8a      	ldr	r3, [pc, #552]	; (8080d10 <loop+0x2dc>)
 8080ae6:	681b      	ldr	r3, [r3, #0]
 8080ae8:	429a      	cmp	r2, r3
 8080aea:	f300 815a 	bgt.w	8080da2 <loop+0x36e>
 8080aee:	2305      	movs	r3, #5
 8080af0:	e008      	b.n	8080b04 <loop+0xd0>
    break;

  case SLEEPING_STATE: {                                                // This state is triggered once the park closes and runs until it opens
    if (!readyForBed)                                                   // Only do these things once - at bedtime
 8080af2:	4b88      	ldr	r3, [pc, #544]	; (8080d14 <loop+0x2e0>)
 8080af4:	781a      	ldrb	r2, [r3, #0]
 8080af6:	461f      	mov	r7, r3
 8080af8:	bba2      	cbnz	r2, 8080b64 <loop+0x130>
    {
      if (hourlyPersonCount) {                                          // If this number is not zero then we need to send this last count
 8080afa:	4b79      	ldr	r3, [pc, #484]	; (8080ce0 <loop+0x2ac>)
 8080afc:	681a      	ldr	r2, [r3, #0]
 8080afe:	461d      	mov	r5, r3
 8080b00:	b112      	cbz	r2, 8080b08 <loop+0xd4>
        state = REPORTING_STATE;
 8080b02:	2306      	movs	r3, #6
 8080b04:	7023      	strb	r3, [r4, #0]
        break;
 8080b06:	e14c      	b.n	8080da2 <loop+0x36e>
 8080b08:	f001 f992 	bl	8081e30 <spark_cloud_flag_connected>
      }
      if (Particle.connected()) {
 8080b0c:	b108      	cbz	r0, 8080b12 <loop+0xde>
        disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
 8080b0e:	f7ff fce5 	bl	80804dc <_Z22disconnectFromParticlev>
      }
      detachInterrupt(intPin);                                          // Done sensing for the day
 8080b12:	2003      	movs	r0, #3
      FRAMwrite16(CURRENTDAILYCOUNT, 0);                                // Reset the counts in FRAM
      FRAMwrite8(RESETCOUNT,resetCount);
 8080b14:	4e80      	ldr	r6, [pc, #512]	; (8080d18 <loop+0x2e4>)
        break;
      }
      if (Particle.connected()) {
        disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
      }
      detachInterrupt(intPin);                                          // Done sensing for the day
 8080b16:	f001 ff6f 	bl	80829f8 <_Z15detachInterruptt>
      FRAMwrite16(CURRENTDAILYCOUNT, 0);                                // Reset the counts in FRAM
 8080b1a:	2100      	movs	r1, #0
 8080b1c:	200c      	movs	r0, #12
 8080b1e:	f7ff fb7b 	bl	8080218 <_Z11FRAMwrite16ji>
      FRAMwrite8(RESETCOUNT,resetCount);
 8080b22:	7831      	ldrb	r1, [r6, #0]
 8080b24:	2002      	movs	r0, #2
 8080b26:	f7ff fb5d 	bl	80801e4 <_Z10FRAMwrite8jh>
      FRAMwrite16(CURRENTHOURLYCOUNT, 0);
 8080b2a:	2100      	movs	r1, #0
 8080b2c:	2008      	movs	r0, #8
 8080b2e:	f7ff fb73 	bl	8080218 <_Z11FRAMwrite16ji>
      FRAMwrite16(CURRENTHOURLYDURATION, 0);
 8080b32:	2100      	movs	r1, #0
 8080b34:	200a      	movs	r0, #10
 8080b36:	f7ff fb6f 	bl	8080218 <_Z11FRAMwrite16ji>
      dailyPersonCount = resetCount = hourlyPersonCount = hourlyDurationSeconds = 0; // All the counts have been reported so time to zero everything
 8080b3a:	4b6b      	ldr	r3, [pc, #428]	; (8080ce8 <loop+0x2b4>)
 8080b3c:	2400      	movs	r4, #0
 8080b3e:	601c      	str	r4, [r3, #0]
 8080b40:	4b76      	ldr	r3, [pc, #472]	; (8080d1c <loop+0x2e8>)
      ledState = false;
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
 8080b42:	4621      	mov	r1, r4
      detachInterrupt(intPin);                                          // Done sensing for the day
      FRAMwrite16(CURRENTDAILYCOUNT, 0);                                // Reset the counts in FRAM
      FRAMwrite8(RESETCOUNT,resetCount);
      FRAMwrite16(CURRENTHOURLYCOUNT, 0);
      FRAMwrite16(CURRENTHOURLYDURATION, 0);
      dailyPersonCount = resetCount = hourlyPersonCount = hourlyDurationSeconds = 0; // All the counts have been reported so time to zero everything
 8080b44:	601c      	str	r4, [r3, #0]
      ledState = false;
 8080b46:	4b76      	ldr	r3, [pc, #472]	; (8080d20 <loop+0x2ec>)
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
 8080b48:	2007      	movs	r0, #7
      FRAMwrite16(CURRENTDAILYCOUNT, 0);                                // Reset the counts in FRAM
      FRAMwrite8(RESETCOUNT,resetCount);
      FRAMwrite16(CURRENTHOURLYCOUNT, 0);
      FRAMwrite16(CURRENTHOURLYDURATION, 0);
      dailyPersonCount = resetCount = hourlyPersonCount = hourlyDurationSeconds = 0; // All the counts have been reported so time to zero everything
      ledState = false;
 8080b4a:	701c      	strb	r4, [r3, #0]
      detachInterrupt(intPin);                                          // Done sensing for the day
      FRAMwrite16(CURRENTDAILYCOUNT, 0);                                // Reset the counts in FRAM
      FRAMwrite8(RESETCOUNT,resetCount);
      FRAMwrite16(CURRENTHOURLYCOUNT, 0);
      FRAMwrite16(CURRENTHOURLYDURATION, 0);
      dailyPersonCount = resetCount = hourlyPersonCount = hourlyDurationSeconds = 0; // All the counts have been reported so time to zero everything
 8080b4c:	602c      	str	r4, [r5, #0]
 8080b4e:	6034      	str	r4, [r6, #0]
      ledState = false;
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
 8080b50:	f002 fe93 	bl	808387a <digitalWrite>
      digitalWrite(tmp36Shutdwn, LOW);                                  // Turns off the temp sensor
 8080b54:	4621      	mov	r1, r4
 8080b56:	201d      	movs	r0, #29
 8080b58:	f002 fe8f 	bl	808387a <digitalWrite>
      petWatchdog();                                                    // Pet the watchdog
 8080b5c:	f7ff fc72 	bl	8080444 <_Z11petWatchdogv>
      readyForBed = true;                                               // Set the flag for the night
 8080b60:	2301      	movs	r3, #1
 8080b62:	703b      	strb	r3, [r7, #0]
    }
    int secondsToHour = (60*(60 - Time.minute()));                      // Time till the top of the hour
 8080b64:	f002 fc6e 	bl	8083444 <_ZN9TimeClass6minuteEv>
    System.sleep(SLEEP_MODE_SOFTPOWEROFF,secondsToHour);                // Very deep sleep till the next hour - then resets
 8080b68:	4b6e      	ldr	r3, [pc, #440]	; (8080d24 <loop+0x2f0>)
 8080b6a:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8080b6e:	223c      	movs	r2, #60	; 0x3c
 8080b70:	681b      	ldr	r3, [r3, #0]
 8080b72:	4342      	muls	r2, r0
 8080b74:	2102      	movs	r1, #2
 8080b76:	e051      	b.n	8080c1c <loop+0x1e8>
 8080b78:	f001 f95a 	bl	8081e30 <spark_cloud_flag_connected>
    } break;

  case NAPPING_STATE: {                                                 // This state puts the device in low power mode quickly
      if (Particle.connected())
 8080b7c:	b170      	cbz	r0, 8080b9c <loop+0x168>
 8080b7e:	4b6a      	ldr	r3, [pc, #424]	; (8080d28 <loop+0x2f4>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080b80:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080b82:	781b      	ldrb	r3, [r3, #0]
      {
        Particle.publish("State","Disconnecting from Particle", PRIVATE);
 8080b84:	4969      	ldr	r1, [pc, #420]	; (8080d2c <loop+0x2f8>)
 8080b86:	f88d 2000 	strb.w	r2, [sp]
 8080b8a:	a806      	add	r0, sp, #24
 8080b8c:	4a68      	ldr	r2, [pc, #416]	; (8080d30 <loop+0x2fc>)
 8080b8e:	f7ff fb15 	bl	80801bc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.16.constprop.21>
 8080b92:	a807      	add	r0, sp, #28
 8080b94:	f7ff fdaa 	bl	80806ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
 8080b98:	f7ff fca0 	bl	80804dc <_Z22disconnectFromParticlev>
      }
      ledState = false;                                                 // Turn out the light
 8080b9c:	4b60      	ldr	r3, [pc, #384]	; (8080d20 <loop+0x2ec>)
 8080b9e:	2100      	movs	r1, #0
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
 8080ba0:	2007      	movs	r0, #7
      if (Particle.connected())
      {
        Particle.publish("State","Disconnecting from Particle", PRIVATE);
        disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
      }
      ledState = false;                                                 // Turn out the light
 8080ba2:	7019      	strb	r1, [r3, #0]
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
 8080ba4:	f002 fe69 	bl	808387a <digitalWrite>
      petWatchdog();                                                    // Pet the watchdog
 8080ba8:	f7ff fc4c 	bl	8080444 <_Z11petWatchdogv>
      int secondsToHour = (60*(60 - Time.minute()));                    // Time till the top of the hour
 8080bac:	f002 fc4a 	bl	8083444 <_ZN9TimeClass6minuteEv>
 8080bb0:	4b5c      	ldr	r3, [pc, #368]	; (8080d24 <loop+0x2f0>)
 8080bb2:	2201      	movs	r2, #1
 8080bb4:	6819      	ldr	r1, [r3, #0]
 8080bb6:	2303      	movs	r3, #3
 8080bb8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8080bbc:	ab08      	add	r3, sp, #32
 8080bbe:	f803 2d0b 	strb.w	r2, [r3, #-11]!
        return sleep(sleepMode, seconds, flag);
    }

    inline static SleepResult sleep(long seconds) { return sleep(SLEEP_MODE_WLAN, seconds); }
    inline static SleepResult sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0, SleepOptionFlags flag=SLEEP_NETWORK_OFF) {
        return sleepPinImpl(&wakeUpPin, 1, &edgeTriggerMode, 1, seconds, flag);
 8080bc2:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8080bc6:	9102      	str	r1, [sp, #8]
 8080bc8:	213c      	movs	r1, #60	; 0x3c
 8080bca:	4348      	muls	r0, r1
 8080bcc:	9200      	str	r2, [sp, #0]
 8080bce:	9001      	str	r0, [sp, #4]
 8080bd0:	f10d 0116 	add.w	r1, sp, #22
 8080bd4:	a806      	add	r0, sp, #24
 8080bd6:	f002 fb43 	bl	8083260 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>
      System.sleep(intPin, RISING, secondsToHour);                      // Sensor will wake us with an interrupt or timeout at the hour
      state = IDLE_STATE;                                               // Back to the IDLE_STATE after a nap
 8080bda:	2302      	movs	r3, #2
 8080bdc:	e792      	b.n	8080b04 <loop+0xd0>
 8080bde:	f001 f927 	bl	8081e30 <spark_cloud_flag_connected>
    } break;

  case LOW_BATTERY_STATE: {                                             // Sleep state but leaves the fuel gauge on
      if (Particle.connected()) {
 8080be2:	b108      	cbz	r0, 8080be8 <loop+0x1b4>
        disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
 8080be4:	f7ff fc7a 	bl	80804dc <_Z22disconnectFromParticlev>
      }
      detachInterrupt(intPin);                                          // Done sensing for the day
 8080be8:	2003      	movs	r0, #3
 8080bea:	f001 ff05 	bl	80829f8 <_Z15detachInterruptt>
      ledState = false;
 8080bee:	2400      	movs	r4, #0
 8080bf0:	4b4b      	ldr	r3, [pc, #300]	; (8080d20 <loop+0x2ec>)
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
 8080bf2:	4621      	mov	r1, r4
 8080bf4:	2007      	movs	r0, #7
  case LOW_BATTERY_STATE: {                                             // Sleep state but leaves the fuel gauge on
      if (Particle.connected()) {
        disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
      }
      detachInterrupt(intPin);                                          // Done sensing for the day
      ledState = false;
 8080bf6:	701c      	strb	r4, [r3, #0]
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
 8080bf8:	f002 fe3f 	bl	808387a <digitalWrite>
      digitalWrite(tmp36Shutdwn, LOW);                                  // Turns off the temp sensor
 8080bfc:	4621      	mov	r1, r4
 8080bfe:	201d      	movs	r0, #29
 8080c00:	f002 fe3b 	bl	808387a <digitalWrite>
  currentEvent = Time.now();                        // Time in time_t of the interrupt
}

void watchdogISR()
{
  watchdogFlag = true;
 8080c04:	4b3a      	ldr	r3, [pc, #232]	; (8080cf0 <loop+0x2bc>)
 8080c06:	2401      	movs	r4, #1
 8080c08:	701c      	strb	r4, [r3, #0]
      detachInterrupt(intPin);                                          // Done sensing for the day
      ledState = false;
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
      digitalWrite(tmp36Shutdwn, LOW);                                  // Turns off the temp sensor
      watchdogISR();                                       // Pet the watchdog
      int secondsToHour = (60*(60 - Time.minute()));                    // Time till the top of the hour
 8080c0a:	f002 fc1b 	bl	8083444 <_ZN9TimeClass6minuteEv>
      System.sleep(SLEEP_MODE_DEEP,secondsToHour);                      // Very deep sleep till the next hour - then resets
 8080c0e:	4621      	mov	r1, r4
 8080c10:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8080c14:	223c      	movs	r2, #60	; 0x3c
 8080c16:	4b43      	ldr	r3, [pc, #268]	; (8080d24 <loop+0x2f0>)
 8080c18:	4342      	muls	r2, r0
 8080c1a:	681b      	ldr	r3, [r3, #0]
 8080c1c:	a806      	add	r0, sp, #24
 8080c1e:	f002 faef 	bl	8083200 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
    } break;
 8080c22:	e0be      	b.n	8080da2 <loop+0x36e>
  currentEvent = Time.now();                        // Time in time_t of the interrupt
}

void watchdogISR()
{
  watchdogFlag = true;
 8080c24:	4b32      	ldr	r3, [pc, #200]	; (8080cf0 <loop+0x2bc>)
 8080c26:	2501      	movs	r5, #1
 8080c28:	701d      	strb	r5, [r3, #0]
 8080c2a:	f001 f901 	bl	8081e30 <spark_cloud_flag_connected>
      System.sleep(SLEEP_MODE_DEEP,secondsToHour);                      // Very deep sleep till the next hour - then resets
    } break;

  case REPORTING_STATE: {                                               // Reporting - hourly or on command
      watchdogISR();                                                      // Pet the watchdog once an hour
      if (!Particle.connected()) {
 8080c2e:	b940      	cbnz	r0, 8080c42 <loop+0x20e>
        if (!connectToParticle()) {
 8080c30:	f7ff fc18 	bl	8080464 <_Z17connectToParticlev>
 8080c34:	b928      	cbnz	r0, 8080c42 <loop+0x20e>
 8080c36:	f000 ff1d 	bl	8081a74 <HAL_Timer_Get_Milli_Seconds>
          resetTimeStamp = millis();
 8080c3a:	4b3e      	ldr	r3, [pc, #248]	; (8080d34 <loop+0x300>)
          state = ERROR_STATE;
 8080c3c:	7025      	strb	r5, [r4, #0]

  case REPORTING_STATE: {                                               // Reporting - hourly or on command
      watchdogISR();                                                      // Pet the watchdog once an hour
      if (!Particle.connected()) {
        if (!connectToParticle()) {
          resetTimeStamp = millis();
 8080c3e:	6018      	str	r0, [r3, #0]
          state = ERROR_STATE;
          break;
 8080c40:	e0af      	b.n	8080da2 <loop+0x36e>
        }
      }
      takeMeasurements();                                                 // Update Temp, Battery and Signal Strength values
 8080c42:	f7ff fbe5 	bl	8080410 <_Z16takeMeasurementsv>
      sendEvent();                                                        // Send data to Ubidots
 8080c46:	f7ff fe99 	bl	808097c <_Z9sendEventv>
 8080c4a:	f000 ff13 	bl	8081a74 <HAL_Timer_Get_Milli_Seconds>
      webhookTimeStamp = millis();
 8080c4e:	4b3a      	ldr	r3, [pc, #232]	; (8080d38 <loop+0x304>)
 8080c50:	6018      	str	r0, [r3, #0]
      if (verboseMode) Particle.publish("State","Waiting for Response", PRIVATE);
 8080c52:	4b3a      	ldr	r3, [pc, #232]	; (8080d3c <loop+0x308>)
 8080c54:	781b      	ldrb	r3, [r3, #0]
 8080c56:	b163      	cbz	r3, 8080c72 <loop+0x23e>
 8080c58:	4b33      	ldr	r3, [pc, #204]	; (8080d28 <loop+0x2f4>)
 8080c5a:	2200      	movs	r2, #0
 8080c5c:	781b      	ldrb	r3, [r3, #0]
 8080c5e:	a806      	add	r0, sp, #24
 8080c60:	f88d 2000 	strb.w	r2, [sp]
 8080c64:	4931      	ldr	r1, [pc, #196]	; (8080d2c <loop+0x2f8>)
 8080c66:	4a36      	ldr	r2, [pc, #216]	; (8080d40 <loop+0x30c>)
 8080c68:	f7ff faa8 	bl	80801bc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.16.constprop.21>
 8080c6c:	a807      	add	r0, sp, #28
 8080c6e:	f7ff fd3d 	bl	80806ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      state = RESP_WAIT_STATE;                                            // Wait for Response
 8080c72:	2307      	movs	r3, #7
 8080c74:	e746      	b.n	8080b04 <loop+0xd0>
    } break;

  case RESP_WAIT_STATE:
    if (!dataInFlight)                                                  // Response received back to IDLE state
 8080c76:	4b33      	ldr	r3, [pc, #204]	; (8080d44 <loop+0x310>)
 8080c78:	781d      	ldrb	r5, [r3, #0]
 8080c7a:	b985      	cbnz	r5, 8080c9e <loop+0x26a>
    {
      state = IDLE_STATE;
 8080c7c:	2302      	movs	r3, #2
 8080c7e:	7023      	strb	r3, [r4, #0]
 8080c80:	f000 fef8 	bl	8081a74 <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
 8080c84:	4b1c      	ldr	r3, [pc, #112]	; (8080cf8 <loop+0x2c4>)
 8080c86:	6018      	str	r0, [r3, #0]
      if (verboseMode) Particle.publish("State","Idle", PRIVATE);
 8080c88:	4b2c      	ldr	r3, [pc, #176]	; (8080d3c <loop+0x308>)
 8080c8a:	781b      	ldrb	r3, [r3, #0]
 8080c8c:	2b00      	cmp	r3, #0
 8080c8e:	f000 8088 	beq.w	8080da2 <loop+0x36e>
 8080c92:	4b25      	ldr	r3, [pc, #148]	; (8080d28 <loop+0x2f4>)
 8080c94:	4a2c      	ldr	r2, [pc, #176]	; (8080d48 <loop+0x314>)
 8080c96:	781b      	ldrb	r3, [r3, #0]
 8080c98:	f88d 5000 	strb.w	r5, [sp]
 8080c9c:	e014      	b.n	8080cc8 <loop+0x294>
 8080c9e:	f000 fee9 	bl	8081a74 <HAL_Timer_Get_Milli_Seconds>
    }
    else if (millis() > webhookTimeStamp + webhookWait) {               // If it takes too long - will need to reset
 8080ca2:	4b25      	ldr	r3, [pc, #148]	; (8080d38 <loop+0x304>)
 8080ca4:	681a      	ldr	r2, [r3, #0]
 8080ca6:	4b29      	ldr	r3, [pc, #164]	; (8080d4c <loop+0x318>)
 8080ca8:	681b      	ldr	r3, [r3, #0]
 8080caa:	4413      	add	r3, r2
 8080cac:	4283      	cmp	r3, r0
 8080cae:	d278      	bcs.n	8080da2 <loop+0x36e>
 8080cb0:	f000 fee0 	bl	8081a74 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
 8080cb4:	4b1f      	ldr	r3, [pc, #124]	; (8080d34 <loop+0x300>)
      state = ERROR_STATE;                                              // Response timed out
      Particle.publish("State","Response Timeout Error", PRIVATE);
 8080cb6:	2200      	movs	r2, #0
      state = IDLE_STATE;
      stayAwakeTimeStamp = millis();
      if (verboseMode) Particle.publish("State","Idle", PRIVATE);
    }
    else if (millis() > webhookTimeStamp + webhookWait) {               // If it takes too long - will need to reset
      resetTimeStamp = millis();
 8080cb8:	6018      	str	r0, [r3, #0]
      state = ERROR_STATE;                                              // Response timed out
 8080cba:	2301      	movs	r3, #1
 8080cbc:	7023      	strb	r3, [r4, #0]
 8080cbe:	4b1a      	ldr	r3, [pc, #104]	; (8080d28 <loop+0x2f4>)
 8080cc0:	781b      	ldrb	r3, [r3, #0]
      Particle.publish("State","Response Timeout Error", PRIVATE);
 8080cc2:	f88d 2000 	strb.w	r2, [sp]
 8080cc6:	4a22      	ldr	r2, [pc, #136]	; (8080d50 <loop+0x31c>)
 8080cc8:	a806      	add	r0, sp, #24
 8080cca:	4918      	ldr	r1, [pc, #96]	; (8080d2c <loop+0x2f8>)
 8080ccc:	f7ff fa76 	bl	80801bc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.16.constprop.21>
 8080cd0:	a807      	add	r0, sp, #28
 8080cd2:	f7ff fd0b 	bl	80806ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080cd6:	e064      	b.n	8080da2 <loop+0x36e>
 8080cd8:	20000520 	.word	0x20000520
 8080cdc:	2000051c 	.word	0x2000051c
 8080ce0:	20000528 	.word	0x20000528
 8080ce4:	20000560 	.word	0x20000560
 8080ce8:	200004fc 	.word	0x200004fc
 8080cec:	20000524 	.word	0x20000524
 8080cf0:	20000549 	.word	0x20000549
 8080cf4:	20000556 	.word	0x20000556
 8080cf8:	20000564 	.word	0x20000564
 8080cfc:	20000408 	.word	0x20000408
 8080d00:	20000548 	.word	0x20000548
 8080d04:	20000558 	.word	0x20000558
 8080d08:	200005b0 	.word	0x200005b0
 8080d0c:	2000052c 	.word	0x2000052c
 8080d10:	200004f0 	.word	0x200004f0
 8080d14:	200005bf 	.word	0x200005bf
 8080d18:	20000534 	.word	0x20000534
 8080d1c:	200004ec 	.word	0x200004ec
 8080d20:	20000514 	.word	0x20000514
 8080d24:	2000054c 	.word	0x2000054c
 8080d28:	20000500 	.word	0x20000500
 8080d2c:	080858ed 	.word	0x080858ed
 8080d30:	080858d1 	.word	0x080858d1
 8080d34:	200005ac 	.word	0x200005ac
 8080d38:	200004f4 	.word	0x200004f4
 8080d3c:	2000055c 	.word	0x2000055c
 8080d40:	080858f3 	.word	0x080858f3
 8080d44:	200005bd 	.word	0x200005bd
 8080d48:	08085908 	.word	0x08085908
 8080d4c:	2000040c 	.word	0x2000040c
 8080d50:	0808590d 	.word	0x0808590d
 8080d54:	f000 fe8e 	bl	8081a74 <HAL_Timer_Get_Milli_Seconds>
    }
    break;

  case ERROR_STATE:                                          // To be enhanced - where we deal with errors
    if (millis() > resetTimeStamp + resetWait)
 8080d58:	4b1a      	ldr	r3, [pc, #104]	; (8080dc4 <loop+0x390>)
 8080d5a:	681a      	ldr	r2, [r3, #0]
 8080d5c:	4b1a      	ldr	r3, [pc, #104]	; (8080dc8 <loop+0x394>)
 8080d5e:	681b      	ldr	r3, [r3, #0]
 8080d60:	4413      	add	r3, r2
 8080d62:	4298      	cmp	r0, r3
 8080d64:	d91d      	bls.n	8080da2 <loop+0x36e>
 8080d66:	4b19      	ldr	r3, [pc, #100]	; (8080dcc <loop+0x398>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080d68:	2400      	movs	r4, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080d6a:	781b      	ldrb	r3, [r3, #0]
    {
      Particle.publish("State","ERROR_STATE - Resetting", PRIVATE);
 8080d6c:	4a18      	ldr	r2, [pc, #96]	; (8080dd0 <loop+0x39c>)
 8080d6e:	4919      	ldr	r1, [pc, #100]	; (8080dd4 <loop+0x3a0>)
 8080d70:	a806      	add	r0, sp, #24
 8080d72:	f88d 4000 	strb.w	r4, [sp]
 8080d76:	f7ff fa21 	bl	80801bc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.16.constprop.21>
 8080d7a:	a807      	add	r0, sp, #28
 8080d7c:	f7ff fcb6 	bl	80806ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      delay(2000);                                          // This makes sure it goes through before reset
 8080d80:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080d84:	f001 f914 	bl	8081fb0 <delay>
      if (resetCount <= 3)  System.reset();                 // Today, only way out is reset
 8080d88:	4b13      	ldr	r3, [pc, #76]	; (8080dd8 <loop+0x3a4>)
 8080d8a:	681b      	ldr	r3, [r3, #0]
 8080d8c:	2b03      	cmp	r3, #3
 8080d8e:	dc02      	bgt.n	8080d96 <loop+0x362>
 8080d90:	f002 fa32 	bl	80831f8 <_ZN11SystemClass5resetEv>
 8080d94:	e005      	b.n	8080da2 <loop+0x36e>
      else {
        FRAMwrite8(RESETCOUNT,0);                           // Zero the ResetCount
 8080d96:	4621      	mov	r1, r4
 8080d98:	2002      	movs	r0, #2
 8080d9a:	f7ff fa23 	bl	80801e4 <_Z10FRAMwrite8jh>
        fullModemReset();                                   // Full Modem reset and reboot
 8080d9e:	f7ff fc79 	bl	8080694 <_Z14fullModemResetv>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8080da2:	f000 fe67 	bl	8081a74 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8080da6:	4b0d      	ldr	r3, [pc, #52]	; (8080ddc <loop+0x3a8>)
 8080da8:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 8080daa:	f001 f829 	bl	8081e00 <spark_process>
      }
    }
    break;
  }
  Particle.process();
  connectionEvents.loop();
 8080dae:	480c      	ldr	r0, [pc, #48]	; (8080de0 <loop+0x3ac>)
 8080db0:	f000 fd22 	bl	80817f8 <_ZN16ConnectionEvents4loopEv>
}
 8080db4:	b009      	add	sp, #36	; 0x24
 8080db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      FRAMwrite16(CURRENTHOURLYDURATION, static_cast<uint16_t>(hourlyDurationSeconds));  // Load Hourly Duration Count to memory
      hourlyPersonCountSent = hourlyDurationSecondsSent = 0;            // Reset for next time
    }
    if (sensorDetect) recordCount();                                    // The ISR had raised the sensor flag
    if (watchdogFlag) petWatchdog();
    if (lowPowerMode && (millis() > stayAwakeTimeStamp + stayAwake)) state = NAPPING_STATE;
 8080db8:	2304      	movs	r3, #4
 8080dba:	7023      	strb	r3, [r4, #0]
 8080dbc:	e67a      	b.n	8080ab4 <loop+0x80>
    if (Time.hour() != currentHourlyPeriod) state = REPORTING_STATE;    // We want to report on the hour but not after bedtime
    if ((Time.hour() >= closeTime || Time.hour() < openTime)) state = SLEEPING_STATE;   // The park is closed, time to sleep
 8080dbe:	2303      	movs	r3, #3
 8080dc0:	7023      	strb	r3, [r4, #0]
 8080dc2:	e68d      	b.n	8080ae0 <loop+0xac>
 8080dc4:	200005ac 	.word	0x200005ac
 8080dc8:	20000400 	.word	0x20000400
 8080dcc:	20000500 	.word	0x20000500
 8080dd0:	08085924 	.word	0x08085924
 8080dd4:	080858ed 	.word	0x080858ed
 8080dd8:	20000534 	.word	0x20000534
 8080ddc:	20000bbc 	.word	0x20000bbc
 8080de0:	20000538 	.word	0x20000538

08080de4 <_Z14UbidotsHandlerPKcS0_>:
  currentHourlyPeriod = Time.hour();                                      // Change the time period
  dataInFlight = true;                                                    // set the data inflight flag
}

void UbidotsHandler(const char *event, const char *data)  // Looks at the response from Ubidots - Will reset Photon if no successful response
{
 8080de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8080de8:	b084      	sub	sp, #16
  // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
  char dataCopy[strlen(data)+1];                                    // data needs to be copied since Particle.publish() will clear it
 8080dea:	4608      	mov	r0, r1
  currentHourlyPeriod = Time.hour();                                      // Change the time period
  dataInFlight = true;                                                    // set the data inflight flag
}

void UbidotsHandler(const char *event, const char *data)  // Looks at the response from Ubidots - Will reset Photon if no successful response
{
 8080dec:	af02      	add	r7, sp, #8
 8080dee:	460d      	mov	r5, r1
  // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
  char dataCopy[strlen(data)+1];                                    // data needs to be copied since Particle.publish() will clear it
 8080df0:	f004 f867 	bl	8084ec2 <strlen>
 8080df4:	f100 0308 	add.w	r3, r0, #8
 8080df8:	f023 0307 	bic.w	r3, r3, #7
  if ((responseCode == 200) || (responseCode == 201))
  {
    Particle.publish("State","Response Received", PRIVATE);
    dataInFlight = false;                                 // Data has been received
  }
  else Particle.publish("Ubidots Hook", dataCopy, PRIVATE);       // Publish the response code
 8080dfc:	46e8      	mov	r8, sp
}

void UbidotsHandler(const char *event, const char *data)  // Looks at the response from Ubidots - Will reset Photon if no successful response
{
  // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
  char dataCopy[strlen(data)+1];                                    // data needs to be copied since Particle.publish() will clear it
 8080dfe:	ebad 0d03 	sub.w	sp, sp, r3
 8080e02:	ac02      	add	r4, sp, #8
  strncpy(dataCopy, data, sizeof(dataCopy));            // Copy - overflow safe
 8080e04:	1c42      	adds	r2, r0, #1
 8080e06:	4629      	mov	r1, r5
 8080e08:	4620      	mov	r0, r4
 8080e0a:	f004 f877 	bl	8084efc <strncpy>
  if (!strlen(dataCopy)) {                                      // First check to see if there is any data
 8080e0e:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8080e12:	4e14      	ldr	r6, [pc, #80]	; (8080e64 <_Z14UbidotsHandlerPKcS0_+0x80>)
 8080e14:	b922      	cbnz	r2, 8080e20 <_Z14UbidotsHandlerPKcS0_+0x3c>
 8080e16:	7833      	ldrb	r3, [r6, #0]
    Particle.publish("Ubidots Hook", "No Data", PRIVATE);
 8080e18:	f88d 2000 	strb.w	r2, [sp]
 8080e1c:	4a12      	ldr	r2, [pc, #72]	; (8080e68 <_Z14UbidotsHandlerPKcS0_+0x84>)
 8080e1e:	e015      	b.n	8080e4c <_Z14UbidotsHandlerPKcS0_+0x68>
    return;
  }
  int responseCode = atoi(dataCopy);                    // Response is only a single number thanks to Template
 8080e20:	4620      	mov	r0, r4
 8080e22:	f003 febb 	bl	8084b9c <atoi>
  if ((responseCode == 200) || (responseCode == 201))
 8080e26:	38c8      	subs	r0, #200	; 0xc8
 8080e28:	2500      	movs	r5, #0
 8080e2a:	2801      	cmp	r0, #1
 8080e2c:	7833      	ldrb	r3, [r6, #0]
  {
    Particle.publish("State","Response Received", PRIVATE);
 8080e2e:	f88d 5000 	strb.w	r5, [sp]
  if (!strlen(dataCopy)) {                                      // First check to see if there is any data
    Particle.publish("Ubidots Hook", "No Data", PRIVATE);
    return;
  }
  int responseCode = atoi(dataCopy);                    // Response is only a single number thanks to Template
  if ((responseCode == 200) || (responseCode == 201))
 8080e32:	d80a      	bhi.n	8080e4a <_Z14UbidotsHandlerPKcS0_+0x66>
  {
    Particle.publish("State","Response Received", PRIVATE);
 8080e34:	4a0d      	ldr	r2, [pc, #52]	; (8080e6c <_Z14UbidotsHandlerPKcS0_+0x88>)
 8080e36:	490e      	ldr	r1, [pc, #56]	; (8080e70 <_Z14UbidotsHandlerPKcS0_+0x8c>)
 8080e38:	4638      	mov	r0, r7
 8080e3a:	f7ff f9bf 	bl	80801bc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.16.constprop.21>
 8080e3e:	1d38      	adds	r0, r7, #4
 8080e40:	f7ff fc54 	bl	80806ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    dataInFlight = false;                                 // Data has been received
 8080e44:	4b0b      	ldr	r3, [pc, #44]	; (8080e74 <_Z14UbidotsHandlerPKcS0_+0x90>)
 8080e46:	701d      	strb	r5, [r3, #0]
 8080e48:	e007      	b.n	8080e5a <_Z14UbidotsHandlerPKcS0_+0x76>
  }
  else Particle.publish("Ubidots Hook", dataCopy, PRIVATE);       // Publish the response code
 8080e4a:	4622      	mov	r2, r4
 8080e4c:	4638      	mov	r0, r7
 8080e4e:	490a      	ldr	r1, [pc, #40]	; (8080e78 <_Z14UbidotsHandlerPKcS0_+0x94>)
 8080e50:	f7ff f9b4 	bl	80801bc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.16.constprop.21>
 8080e54:	1d38      	adds	r0, r7, #4
 8080e56:	f7ff fc49 	bl	80806ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080e5a:	46c5      	mov	sp, r8
}
 8080e5c:	3708      	adds	r7, #8
 8080e5e:	46bd      	mov	sp, r7
 8080e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8080e64:	20000500 	.word	0x20000500
 8080e68:	0808593c 	.word	0x0808593c
 8080e6c:	08085951 	.word	0x08085951
 8080e70:	080858ed 	.word	0x080858ed
 8080e74:	200005bd 	.word	0x200005bd
 8080e78:	08085944 	.word	0x08085944

08080e7c <_Z14setKeepSession6String>:
  else return 0;
}


int setKeepSession(String command)  // This is the amount of time in seconds we will wait before starting a new session
{
 8080e7c:	b510      	push	{r4, lr}
 8080e7e:	b0c6      	sub	sp, #280	; 0x118
  char * pEND;
  char data[256];
  byte tempKeepSession = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 8080e80:	220a      	movs	r2, #10
 8080e82:	a903      	add	r1, sp, #12
 8080e84:	6800      	ldr	r0, [r0, #0]
 8080e86:	f004 f8d3 	bl	8085030 <strtol>
 8080e8a:	b2c4      	uxtb	r4, r0
  if ((tempKeepSession < 0) | (tempKeepSession > 250)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 8080e8c:	2cfa      	cmp	r4, #250	; 0xfa
 8080e8e:	d81d      	bhi.n	8080ecc <_Z14setKeepSession6String+0x50>
  FRAMwrite8(KEEPSESSION,tempKeepSession);
 8080e90:	4621      	mov	r1, r4
 8080e92:	2003      	movs	r0, #3
 8080e94:	f7ff f9a6 	bl	80801e4 <_Z10FRAMwrite8jh>
  keepSession = tempKeepSession;                   // keepSession - The time to keep a session alive - in seconds
 8080e98:	4b0f      	ldr	r3, [pc, #60]	; (8080ed8 <_Z14setKeepSession6String+0x5c>)
  snprintf(data, sizeof(data), "Values are: keepSession: %i",keepSession);
 8080e9a:	4a10      	ldr	r2, [pc, #64]	; (8080edc <_Z14setKeepSession6String+0x60>)
  char * pEND;
  char data[256];
  byte tempKeepSession = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempKeepSession < 0) | (tempKeepSession > 250)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  FRAMwrite8(KEEPSESSION,tempKeepSession);
  keepSession = tempKeepSession;                   // keepSession - The time to keep a session alive - in seconds
 8080e9c:	601c      	str	r4, [r3, #0]
  snprintf(data, sizeof(data), "Values are: keepSession: %i",keepSession);
 8080e9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8080ea2:	4623      	mov	r3, r4
 8080ea4:	a806      	add	r0, sp, #24
 8080ea6:	f001 f86b 	bl	8081f80 <snprintf>
  if (verboseMode) Particle.publish("Variables",data, PRIVATE);
 8080eaa:	4b0d      	ldr	r3, [pc, #52]	; (8080ee0 <_Z14setKeepSession6String+0x64>)
 8080eac:	781b      	ldrb	r3, [r3, #0]
 8080eae:	b17b      	cbz	r3, 8080ed0 <_Z14setKeepSession6String+0x54>
 8080eb0:	4b0c      	ldr	r3, [pc, #48]	; (8080ee4 <_Z14setKeepSession6String+0x68>)
 8080eb2:	2200      	movs	r2, #0
 8080eb4:	781b      	ldrb	r3, [r3, #0]
 8080eb6:	a804      	add	r0, sp, #16
 8080eb8:	f88d 2000 	strb.w	r2, [sp]
 8080ebc:	490a      	ldr	r1, [pc, #40]	; (8080ee8 <_Z14setKeepSession6String+0x6c>)
 8080ebe:	aa06      	add	r2, sp, #24
 8080ec0:	f7ff f97c 	bl	80801bc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.16.constprop.21>
 8080ec4:	a805      	add	r0, sp, #20
 8080ec6:	f7ff fc11 	bl	80806ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080eca:	e001      	b.n	8080ed0 <_Z14setKeepSession6String+0x54>
int setKeepSession(String command)  // This is the amount of time in seconds we will wait before starting a new session
{
  char * pEND;
  char data[256];
  byte tempKeepSession = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempKeepSession < 0) | (tempKeepSession > 250)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 8080ecc:	2000      	movs	r0, #0
 8080ece:	e000      	b.n	8080ed2 <_Z14setKeepSession6String+0x56>
  FRAMwrite8(KEEPSESSION,tempKeepSession);
  keepSession = tempKeepSession;                   // keepSession - The time to keep a session alive - in seconds
  snprintf(data, sizeof(data), "Values are: keepSession: %i",keepSession);
  if (verboseMode) Particle.publish("Variables",data, PRIVATE);
  return 1;
 8080ed0:	2001      	movs	r0, #1
}
 8080ed2:	b046      	add	sp, #280	; 0x118
 8080ed4:	bd10      	pop	{r4, pc}
 8080ed6:	bf00      	nop
 8080ed8:	200005b8 	.word	0x200005b8
 8080edc:	08085963 	.word	0x08085963
 8080ee0:	2000055c 	.word	0x2000055c
 8080ee4:	20000500 	.word	0x20000500
 8080ee8:	0808597f 	.word	0x0808597f

08080eec <_Z12setSolarMode6String>:
  }
  else return 0;
}

int setSolarMode(String command) // Function to force sending data in current hour
{
 8080eec:	b530      	push	{r4, r5, lr}
 8080eee:	4920      	ldr	r1, [pc, #128]	; (8080f70 <_Z12setSolarMode6String+0x84>)
 8080ef0:	b085      	sub	sp, #20
 8080ef2:	4605      	mov	r5, r0
 8080ef4:	f002 f951 	bl	808319a <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080ef8:	4604      	mov	r4, r0
 8080efa:	b1b0      	cbz	r0, 8080f2a <_Z12setSolarMode6String+0x3e>
  {
    solarPowerMode = true;
 8080efc:	4b1d      	ldr	r3, [pc, #116]	; (8080f74 <_Z12setSolarMode6String+0x88>)
 8080efe:	2401      	movs	r4, #1
    controlRegister = FRAMread8(CONTROLREGISTER);
 8080f00:	2007      	movs	r0, #7

int setSolarMode(String command) // Function to force sending data in current hour
{
  if (command == "1")
  {
    solarPowerMode = true;
 8080f02:	701c      	strb	r4, [r3, #0]
    controlRegister = FRAMread8(CONTROLREGISTER);
 8080f04:	f7ff f968 	bl	80801d8 <_Z9FRAMread8j>
    controlRegister = (0b00000100 | controlRegister);          // Turn on solarPowerMode
 8080f08:	4b1b      	ldr	r3, [pc, #108]	; (8080f78 <_Z12setSolarMode6String+0x8c>)
 8080f0a:	f040 0004 	orr.w	r0, r0, #4
 8080f0e:	b2c1      	uxtb	r1, r0
    FRAMwrite8(CONTROLREGISTER,controlRegister);               // Write it to the register
 8080f10:	2007      	movs	r0, #7
{
  if (command == "1")
  {
    solarPowerMode = true;
    controlRegister = FRAMread8(CONTROLREGISTER);
    controlRegister = (0b00000100 | controlRegister);          // Turn on solarPowerMode
 8080f12:	7019      	strb	r1, [r3, #0]
    FRAMwrite8(CONTROLREGISTER,controlRegister);               // Write it to the register
 8080f14:	f7ff f966 	bl	80801e4 <_Z10FRAMwrite8jh>
    PMICreset();                                               // Change the power management Settings
 8080f18:	f7ff faf2 	bl	8080500 <_Z9PMICresetv>
 8080f1c:	4b17      	ldr	r3, [pc, #92]	; (8080f7c <_Z12setSolarMode6String+0x90>)
    Particle.publish("Mode","Set Solar Powered Mode", PRIVATE);
 8080f1e:	2200      	movs	r2, #0
 8080f20:	781b      	ldrb	r3, [r3, #0]
 8080f22:	f88d 2000 	strb.w	r2, [sp]
 8080f26:	4a16      	ldr	r2, [pc, #88]	; (8080f80 <_Z12setSolarMode6String+0x94>)
 8080f28:	e017      	b.n	8080f5a <_Z12setSolarMode6String+0x6e>
 8080f2a:	4916      	ldr	r1, [pc, #88]	; (8080f84 <_Z12setSolarMode6String+0x98>)
 8080f2c:	4628      	mov	r0, r5
 8080f2e:	f002 f934 	bl	808319a <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
 8080f32:	b1d0      	cbz	r0, 8080f6a <_Z12setSolarMode6String+0x7e>
  {
    solarPowerMode = false;
 8080f34:	4b0f      	ldr	r3, [pc, #60]	; (8080f74 <_Z12setSolarMode6String+0x88>)
    controlRegister = FRAMread8(CONTROLREGISTER);
 8080f36:	2007      	movs	r0, #7
    Particle.publish("Mode","Set Solar Powered Mode", PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    solarPowerMode = false;
 8080f38:	701c      	strb	r4, [r3, #0]
    controlRegister = FRAMread8(CONTROLREGISTER);
 8080f3a:	f7ff f94d 	bl	80801d8 <_Z9FRAMread8j>
    controlRegister = (0b11111011 & controlRegister);           // Turn off solarPowerMode
 8080f3e:	4b0e      	ldr	r3, [pc, #56]	; (8080f78 <_Z12setSolarMode6String+0x8c>)
 8080f40:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
    FRAMwrite8(CONTROLREGISTER,controlRegister);                // Write it to the register
 8080f44:	2007      	movs	r0, #7
  }
  else if (command == "0")
  {
    solarPowerMode = false;
    controlRegister = FRAMread8(CONTROLREGISTER);
    controlRegister = (0b11111011 & controlRegister);           // Turn off solarPowerMode
 8080f46:	7019      	strb	r1, [r3, #0]
    FRAMwrite8(CONTROLREGISTER,controlRegister);                // Write it to the register
 8080f48:	f7ff f94c 	bl	80801e4 <_Z10FRAMwrite8jh>
    PMICreset();                                                // Change the power management settings
 8080f4c:	f7ff fad8 	bl	8080500 <_Z9PMICresetv>
 8080f50:	4b0a      	ldr	r3, [pc, #40]	; (8080f7c <_Z12setSolarMode6String+0x90>)
    Particle.publish("Mode","Cleared Solar Powered Mode", PRIVATE);
 8080f52:	4a0d      	ldr	r2, [pc, #52]	; (8080f88 <_Z12setSolarMode6String+0x9c>)
 8080f54:	781b      	ldrb	r3, [r3, #0]
 8080f56:	f88d 4000 	strb.w	r4, [sp]
 8080f5a:	490c      	ldr	r1, [pc, #48]	; (8080f8c <_Z12setSolarMode6String+0xa0>)
 8080f5c:	a802      	add	r0, sp, #8
 8080f5e:	f7ff f92d 	bl	80801bc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.16.constprop.21>
 8080f62:	a803      	add	r0, sp, #12
 8080f64:	f7ff fbc2 	bl	80806ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080f68:	2001      	movs	r0, #1
    return 1;
  }
  else return 0;
}
 8080f6a:	b005      	add	sp, #20
 8080f6c:	bd30      	pop	{r4, r5, pc}
 8080f6e:	bf00      	nop
 8080f70:	08085d1d 	.word	0x08085d1d
 8080f74:	200005bc 	.word	0x200005bc
 8080f78:	200005be 	.word	0x200005be
 8080f7c:	20000500 	.word	0x20000500
 8080f80:	08085989 	.word	0x08085989
 8080f84:	08085b48 	.word	0x08085b48
 8080f88:	080859a0 	.word	0x080859a0
 8080f8c:	080859b6 	.word	0x080859b6

08080f90 <_Z14setVerboseMode6String>:

int setVerboseMode(String command) // Function to force sending data in current hour
{
 8080f90:	b530      	push	{r4, r5, lr}
 8080f92:	491e      	ldr	r1, [pc, #120]	; (808100c <_Z14setVerboseMode6String+0x7c>)
 8080f94:	b085      	sub	sp, #20
 8080f96:	4605      	mov	r5, r0
 8080f98:	f002 f8ff 	bl	808319a <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080f9c:	4604      	mov	r4, r0
 8080f9e:	b1a0      	cbz	r0, 8080fca <_Z14setVerboseMode6String+0x3a>
  {
    verboseMode = true;
 8080fa0:	4b1b      	ldr	r3, [pc, #108]	; (8081010 <_Z14setVerboseMode6String+0x80>)
 8080fa2:	2401      	movs	r4, #1
    controlRegister = FRAMread8(CONTROLREGISTER);
 8080fa4:	2007      	movs	r0, #7

int setVerboseMode(String command) // Function to force sending data in current hour
{
  if (command == "1")
  {
    verboseMode = true;
 8080fa6:	701c      	strb	r4, [r3, #0]
    controlRegister = FRAMread8(CONTROLREGISTER);
 8080fa8:	f7ff f916 	bl	80801d8 <_Z9FRAMread8j>
    controlRegister = (0b00001000 | controlRegister);                    // Turn on verboseMode
 8080fac:	4b19      	ldr	r3, [pc, #100]	; (8081014 <_Z14setVerboseMode6String+0x84>)
 8080fae:	f040 0008 	orr.w	r0, r0, #8
 8080fb2:	b2c1      	uxtb	r1, r0
    FRAMwrite8(CONTROLREGISTER,controlRegister);                        // Write it to the register
 8080fb4:	2007      	movs	r0, #7
{
  if (command == "1")
  {
    verboseMode = true;
    controlRegister = FRAMread8(CONTROLREGISTER);
    controlRegister = (0b00001000 | controlRegister);                    // Turn on verboseMode
 8080fb6:	7019      	strb	r1, [r3, #0]
    FRAMwrite8(CONTROLREGISTER,controlRegister);                        // Write it to the register
 8080fb8:	f7ff f914 	bl	80801e4 <_Z10FRAMwrite8jh>
 8080fbc:	4b16      	ldr	r3, [pc, #88]	; (8081018 <_Z14setVerboseMode6String+0x88>)
    Particle.publish("Mode","Set Verbose Mode", PRIVATE);
 8080fbe:	2200      	movs	r2, #0
 8080fc0:	781b      	ldrb	r3, [r3, #0]
 8080fc2:	f88d 2000 	strb.w	r2, [sp]
 8080fc6:	4a15      	ldr	r2, [pc, #84]	; (808101c <_Z14setVerboseMode6String+0x8c>)
 8080fc8:	e015      	b.n	8080ff6 <_Z14setVerboseMode6String+0x66>
 8080fca:	4915      	ldr	r1, [pc, #84]	; (8081020 <_Z14setVerboseMode6String+0x90>)
 8080fcc:	4628      	mov	r0, r5
 8080fce:	f002 f8e4 	bl	808319a <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
 8080fd2:	b1c0      	cbz	r0, 8081006 <_Z14setVerboseMode6String+0x76>
  {
    verboseMode = false;
 8080fd4:	4b0e      	ldr	r3, [pc, #56]	; (8081010 <_Z14setVerboseMode6String+0x80>)
    controlRegister = FRAMread8(CONTROLREGISTER);
 8080fd6:	2007      	movs	r0, #7
    Particle.publish("Mode","Set Verbose Mode", PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    verboseMode = false;
 8080fd8:	701c      	strb	r4, [r3, #0]
    controlRegister = FRAMread8(CONTROLREGISTER);
 8080fda:	f7ff f8fd 	bl	80801d8 <_Z9FRAMread8j>
    controlRegister = (0b11110111 & controlRegister);                    // Turn off verboseMode
 8080fde:	4b0d      	ldr	r3, [pc, #52]	; (8081014 <_Z14setVerboseMode6String+0x84>)
 8080fe0:	f000 01f7 	and.w	r1, r0, #247	; 0xf7
    FRAMwrite8(CONTROLREGISTER,controlRegister);                        // Write it to the register
 8080fe4:	2007      	movs	r0, #7
  }
  else if (command == "0")
  {
    verboseMode = false;
    controlRegister = FRAMread8(CONTROLREGISTER);
    controlRegister = (0b11110111 & controlRegister);                    // Turn off verboseMode
 8080fe6:	7019      	strb	r1, [r3, #0]
    FRAMwrite8(CONTROLREGISTER,controlRegister);                        // Write it to the register
 8080fe8:	f7ff f8fc 	bl	80801e4 <_Z10FRAMwrite8jh>
 8080fec:	4b0a      	ldr	r3, [pc, #40]	; (8081018 <_Z14setVerboseMode6String+0x88>)
    Particle.publish("Mode","Cleared Verbose Mode", PRIVATE);
 8080fee:	4a0d      	ldr	r2, [pc, #52]	; (8081024 <_Z14setVerboseMode6String+0x94>)
 8080ff0:	781b      	ldrb	r3, [r3, #0]
 8080ff2:	f88d 4000 	strb.w	r4, [sp]
 8080ff6:	490c      	ldr	r1, [pc, #48]	; (8081028 <_Z14setVerboseMode6String+0x98>)
 8080ff8:	a802      	add	r0, sp, #8
 8080ffa:	f7ff f8df 	bl	80801bc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.16.constprop.21>
 8080ffe:	a803      	add	r0, sp, #12
 8081000:	f7ff fb74 	bl	80806ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081004:	2001      	movs	r0, #1
    return 1;
  }
  else return 0;
}
 8081006:	b005      	add	sp, #20
 8081008:	bd30      	pop	{r4, r5, pc}
 808100a:	bf00      	nop
 808100c:	08085d1d 	.word	0x08085d1d
 8081010:	2000055c 	.word	0x2000055c
 8081014:	200005be 	.word	0x200005be
 8081018:	20000500 	.word	0x20000500
 808101c:	080859bb 	.word	0x080859bb
 8081020:	08085b48 	.word	0x08085b48
 8081024:	080859cc 	.word	0x080859cc
 8081028:	080859b6 	.word	0x080859b6

0808102c <_Z11setTimeZone6String>:

int setTimeZone(String command)
{
 808102c:	b570      	push	{r4, r5, r6, lr}
 808102e:	b0cc      	sub	sp, #304	; 0x130
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 8081030:	220a      	movs	r2, #10
 8081032:	a905      	add	r1, sp, #20
 8081034:	6800      	ldr	r0, [r0, #0]
 8081036:	f003 fffb 	bl	8085030 <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 808103a:	b2c5      	uxtb	r5, r0
 808103c:	f105 030c 	add.w	r3, r5, #12
 8081040:	b2db      	uxtb	r3, r3
 8081042:	2b18      	cmp	r3, #24
 8081044:	d83b      	bhi.n	80810be <_Z11setTimeZone6String+0x92>

int setTimeZone(String command)
{
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 8081046:	b244      	sxtb	r4, r0
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  Time.zone((float)tempTimeZoneOffset);
 8081048:	4620      	mov	r0, r4
 808104a:	f003 fb2b 	bl	80846a4 <__aeabi_i2f>
 808104e:	f002 f989 	bl	8083364 <_ZN9TimeClass4zoneEf>
  FRAMwrite8(TIMEZONE,tempTimeZoneOffset);                             // Store the new value in FRAMwrite8
 8081052:	4629      	mov	r1, r5
 8081054:	2004      	movs	r0, #4
 8081056:	f7ff f8c5 	bl	80801e4 <_Z10FRAMwrite8jh>
  t = Time.now();
 808105a:	f002 f9e2 	bl	8083422 <_ZN9TimeClass3nowEv>
 808105e:	4e19      	ldr	r6, [pc, #100]	; (80810c4 <_Z11setTimeZone6String+0x98>)
 8081060:	4d19      	ldr	r5, [pc, #100]	; (80810c8 <_Z11setTimeZone6String+0x9c>)
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 8081062:	4623      	mov	r3, r4
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  Time.zone((float)tempTimeZoneOffset);
  FRAMwrite8(TIMEZONE,tempTimeZoneOffset);                             // Store the new value in FRAMwrite8
  t = Time.now();
 8081064:	6030      	str	r0, [r6, #0]
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 8081066:	4a19      	ldr	r2, [pc, #100]	; (80810cc <_Z11setTimeZone6String+0xa0>)
 8081068:	f44f 7180 	mov.w	r1, #256	; 0x100
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 808106c:	2400      	movs	r4, #0
 808106e:	a80c      	add	r0, sp, #48	; 0x30
 8081070:	f000 ff86 	bl	8081f80 <snprintf>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8081074:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("Time",data, PRIVATE);
 8081076:	aa0c      	add	r2, sp, #48	; 0x30
 8081078:	4915      	ldr	r1, [pc, #84]	; (80810d0 <_Z11setTimeZone6String+0xa4>)
 808107a:	a808      	add	r0, sp, #32
 808107c:	f88d 4000 	strb.w	r4, [sp]
 8081080:	f7ff f89c 	bl	80801bc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.16.constprop.21>
 8081084:	a809      	add	r0, sp, #36	; 0x24
 8081086:	f7ff fb31 	bl	80806ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1000);
 808108a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808108e:	f000 ff8f 	bl	8081fb0 <delay>
  Particle.publish("Time",Time.timeStr(t), PRIVATE);
 8081092:	6831      	ldr	r1, [r6, #0]
 8081094:	a808      	add	r0, sp, #32
 8081096:	f002 f981 	bl	808339c <_ZN9TimeClass7timeStrEl>
 808109a:	9b08      	ldr	r3, [sp, #32]
 808109c:	490c      	ldr	r1, [pc, #48]	; (80810d0 <_Z11setTimeZone6String+0xa4>)
 808109e:	9303      	str	r3, [sp, #12]
 80810a0:	9a03      	ldr	r2, [sp, #12]
 80810a2:	782b      	ldrb	r3, [r5, #0]
 80810a4:	a806      	add	r0, sp, #24
 80810a6:	f88d 4000 	strb.w	r4, [sp]
 80810aa:	f7ff f887 	bl	80801bc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.16.constprop.21>
 80810ae:	a807      	add	r0, sp, #28
 80810b0:	f7ff fb1c 	bl	80806ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80810b4:	a808      	add	r0, sp, #32
 80810b6:	f001 fffc 	bl	80830b2 <_ZN6StringD1Ev>
  return 1;
 80810ba:	2001      	movs	r0, #1
 80810bc:	e000      	b.n	80810c0 <_Z11setTimeZone6String+0x94>
int setTimeZone(String command)
{
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 80810be:	2000      	movs	r0, #0
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
  Particle.publish("Time",data, PRIVATE);
  delay(1000);
  Particle.publish("Time",Time.timeStr(t), PRIVATE);
  return 1;
}
 80810c0:	b04c      	add	sp, #304	; 0x130
 80810c2:	bd70      	pop	{r4, r5, r6, pc}
 80810c4:	20000508 	.word	0x20000508
 80810c8:	20000500 	.word	0x20000500
 80810cc:	080859e1 	.word	0x080859e1
 80810d0:	08085a84 	.word	0x08085a84

080810d4 <_Z11setOpenTime6String>:

int setOpenTime(String command)
{
 80810d4:	b510      	push	{r4, lr}
 80810d6:	b0c6      	sub	sp, #280	; 0x118
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 80810d8:	220a      	movs	r2, #10
 80810da:	a903      	add	r1, sp, #12
 80810dc:	6800      	ldr	r0, [r0, #0]
 80810de:	f003 ffa7 	bl	8085030 <strtol>
  if ((tempTime < 0) || (tempTime > 23)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 80810e2:	2817      	cmp	r0, #23
 80810e4:	d81b      	bhi.n	808111e <_Z11setOpenTime6String+0x4a>
  openTime = tempTime;
 80810e6:	4c0f      	ldr	r4, [pc, #60]	; (8081124 <_Z11setOpenTime6String+0x50>)
  FRAMwrite8(OPENTIMEADDR,openTime);                             // Store the new value in FRAMwrite8
 80810e8:	b2c1      	uxtb	r1, r0
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 23)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  openTime = tempTime;
 80810ea:	6020      	str	r0, [r4, #0]
  FRAMwrite8(OPENTIMEADDR,openTime);                             // Store the new value in FRAMwrite8
 80810ec:	2005      	movs	r0, #5
 80810ee:	f7ff f879 	bl	80801e4 <_Z10FRAMwrite8jh>
  snprintf(data, sizeof(data), "Open time set to %i",openTime);
 80810f2:	6823      	ldr	r3, [r4, #0]
 80810f4:	4a0c      	ldr	r2, [pc, #48]	; (8081128 <_Z11setOpenTime6String+0x54>)
 80810f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80810fa:	a806      	add	r0, sp, #24
 80810fc:	f000 ff40 	bl	8081f80 <snprintf>
 8081100:	4b0a      	ldr	r3, [pc, #40]	; (808112c <_Z11setOpenTime6String+0x58>)
  Particle.publish("Time",data, PRIVATE);
 8081102:	2200      	movs	r2, #0
 8081104:	781b      	ldrb	r3, [r3, #0]
 8081106:	490a      	ldr	r1, [pc, #40]	; (8081130 <_Z11setOpenTime6String+0x5c>)
 8081108:	f88d 2000 	strb.w	r2, [sp]
 808110c:	a804      	add	r0, sp, #16
 808110e:	aa06      	add	r2, sp, #24
 8081110:	f7ff f854 	bl	80801bc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.16.constprop.21>
 8081114:	a805      	add	r0, sp, #20
 8081116:	f7ff fae9 	bl	80806ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
 808111a:	2001      	movs	r0, #1
 808111c:	e000      	b.n	8081120 <_Z11setOpenTime6String+0x4c>
int setOpenTime(String command)
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 23)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 808111e:	2000      	movs	r0, #0
  openTime = tempTime;
  FRAMwrite8(OPENTIMEADDR,openTime);                             // Store the new value in FRAMwrite8
  snprintf(data, sizeof(data), "Open time set to %i",openTime);
  Particle.publish("Time",data, PRIVATE);
  return 1;
}
 8081120:	b046      	add	sp, #280	; 0x118
 8081122:	bd10      	pop	{r4, pc}
 8081124:	200005b0 	.word	0x200005b0
 8081128:	080859f5 	.word	0x080859f5
 808112c:	20000500 	.word	0x20000500
 8081130:	08085a84 	.word	0x08085a84

08081134 <_Z12setCloseTime6String>:

int setCloseTime(String command)
{
 8081134:	b510      	push	{r4, lr}
 8081136:	b0c6      	sub	sp, #280	; 0x118
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 8081138:	220a      	movs	r2, #10
 808113a:	a903      	add	r1, sp, #12
 808113c:	6800      	ldr	r0, [r0, #0]
 808113e:	f003 ff77 	bl	8085030 <strtol>
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 8081142:	2818      	cmp	r0, #24
 8081144:	d81b      	bhi.n	808117e <_Z12setCloseTime6String+0x4a>
  closeTime = tempTime;
 8081146:	4c0f      	ldr	r4, [pc, #60]	; (8081184 <_Z12setCloseTime6String+0x50>)
  FRAMwrite8(CLOSETIMEADDR,closeTime);                             // Store the new value in FRAMwrite8
 8081148:	b2c1      	uxtb	r1, r0
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  closeTime = tempTime;
 808114a:	6020      	str	r0, [r4, #0]
  FRAMwrite8(CLOSETIMEADDR,closeTime);                             // Store the new value in FRAMwrite8
 808114c:	2006      	movs	r0, #6
 808114e:	f7ff f849 	bl	80801e4 <_Z10FRAMwrite8jh>
  snprintf(data, sizeof(data), "Closing time set to %i",closeTime);
 8081152:	6823      	ldr	r3, [r4, #0]
 8081154:	4a0c      	ldr	r2, [pc, #48]	; (8081188 <_Z12setCloseTime6String+0x54>)
 8081156:	f44f 7180 	mov.w	r1, #256	; 0x100
 808115a:	a806      	add	r0, sp, #24
 808115c:	f000 ff10 	bl	8081f80 <snprintf>
 8081160:	4b0a      	ldr	r3, [pc, #40]	; (808118c <_Z12setCloseTime6String+0x58>)
  Particle.publish("Time",data, PRIVATE);
 8081162:	2200      	movs	r2, #0
 8081164:	781b      	ldrb	r3, [r3, #0]
 8081166:	490a      	ldr	r1, [pc, #40]	; (8081190 <_Z12setCloseTime6String+0x5c>)
 8081168:	f88d 2000 	strb.w	r2, [sp]
 808116c:	a804      	add	r0, sp, #16
 808116e:	aa06      	add	r2, sp, #24
 8081170:	f7ff f824 	bl	80801bc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.16.constprop.21>
 8081174:	a805      	add	r0, sp, #20
 8081176:	f7ff fab9 	bl	80806ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  return 1;
 808117a:	2001      	movs	r0, #1
 808117c:	e000      	b.n	8081180 <_Z12setCloseTime6String+0x4c>
int setCloseTime(String command)
{
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTime < 0) || (tempTime > 24)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 808117e:	2000      	movs	r0, #0
  closeTime = tempTime;
  FRAMwrite8(CLOSETIMEADDR,closeTime);                             // Store the new value in FRAMwrite8
  snprintf(data, sizeof(data), "Closing time set to %i",closeTime);
  Particle.publish("Time",data, PRIVATE);
  return 1;
}
 8081180:	b046      	add	sp, #280	; 0x118
 8081182:	bd10      	pop	{r4, pc}
 8081184:	20000558 	.word	0x20000558
 8081188:	08085a09 	.word	0x08085a09
 808118c:	20000500 	.word	0x20000500
 8081190:	08085a84 	.word	0x08085a84

08081194 <_Z15setLowPowerMode6String>:


int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
 8081194:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 8081196:	4924      	ldr	r1, [pc, #144]	; (8081228 <_Z15setLowPowerMode6String+0x94>)
 8081198:	4605      	mov	r5, r0
 808119a:	f001 fffe 	bl	808319a <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
 808119e:	b928      	cbnz	r0, 80811ac <_Z15setLowPowerMode6String+0x18>
 80811a0:	4922      	ldr	r1, [pc, #136]	; (808122c <_Z15setLowPowerMode6String+0x98>)
 80811a2:	4628      	mov	r0, r5
 80811a4:	f001 fff9 	bl	808319a <_ZNK6String6equalsEPKc>
 80811a8:	2800      	cmp	r0, #0
 80811aa:	d03b      	beq.n	8081224 <_Z15setLowPowerMode6String+0x90>
  controlRegister = FRAMread8(CONTROLREGISTER);                       // Get the control register (generla approach)
 80811ac:	2007      	movs	r0, #7
 80811ae:	f7ff f813 	bl	80801d8 <_Z9FRAMread8j>
 80811b2:	4c1f      	ldr	r4, [pc, #124]	; (8081230 <_Z15setLowPowerMode6String+0x9c>)
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80811b4:	491c      	ldr	r1, [pc, #112]	; (8081228 <_Z15setLowPowerMode6String+0x94>)
 80811b6:	7020      	strb	r0, [r4, #0]
 80811b8:	4628      	mov	r0, r5
 80811ba:	f001 ffee 	bl	808319a <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
 80811be:	4606      	mov	r6, r0
 80811c0:	b1a0      	cbz	r0, 80811ec <_Z15setLowPowerMode6String+0x58>
 80811c2:	4b1c      	ldr	r3, [pc, #112]	; (8081234 <_Z15setLowPowerMode6String+0xa0>)
  {
    Particle.publish("Mode","Low Power", PRIVATE);
 80811c4:	2200      	movs	r2, #0
 80811c6:	781b      	ldrb	r3, [r3, #0]
 80811c8:	491b      	ldr	r1, [pc, #108]	; (8081238 <_Z15setLowPowerMode6String+0xa4>)
 80811ca:	f88d 2000 	strb.w	r2, [sp]
 80811ce:	a802      	add	r0, sp, #8
 80811d0:	4a1a      	ldr	r2, [pc, #104]	; (808123c <_Z15setLowPowerMode6String+0xa8>)
 80811d2:	f7fe fff3 	bl	80801bc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.16.constprop.21>
 80811d6:	a803      	add	r0, sp, #12
 80811d8:	f7ff fa88 	bl	80806ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    controlRegister = (0b00000001 | controlRegister);                  // If so, flip the lowPowerMode bit
 80811dc:	7823      	ldrb	r3, [r4, #0]
    lowPowerMode = true;
 80811de:	2201      	movs	r2, #1
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
  controlRegister = FRAMread8(CONTROLREGISTER);                       // Get the control register (generla approach)
  if (command == "1")                                                 // Command calls for setting lowPowerMode
  {
    Particle.publish("Mode","Low Power", PRIVATE);
    controlRegister = (0b00000001 | controlRegister);                  // If so, flip the lowPowerMode bit
 80811e0:	f043 0301 	orr.w	r3, r3, #1
 80811e4:	7023      	strb	r3, [r4, #0]
    lowPowerMode = true;
 80811e6:	4b16      	ldr	r3, [pc, #88]	; (8081240 <_Z15setLowPowerMode6String+0xac>)
 80811e8:	701a      	strb	r2, [r3, #0]
 80811ea:	e016      	b.n	808121a <_Z15setLowPowerMode6String+0x86>
 80811ec:	490f      	ldr	r1, [pc, #60]	; (808122c <_Z15setLowPowerMode6String+0x98>)
 80811ee:	4628      	mov	r0, r5
 80811f0:	f001 ffd3 	bl	808319a <_ZNK6String6equalsEPKc>
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
 80811f4:	b188      	cbz	r0, 808121a <_Z15setLowPowerMode6String+0x86>
 80811f6:	4b0f      	ldr	r3, [pc, #60]	; (8081234 <_Z15setLowPowerMode6String+0xa0>)
  {
    Particle.publish("Mode","Normal Operations", PRIVATE);
 80811f8:	4a12      	ldr	r2, [pc, #72]	; (8081244 <_Z15setLowPowerMode6String+0xb0>)
 80811fa:	781b      	ldrb	r3, [r3, #0]
 80811fc:	490e      	ldr	r1, [pc, #56]	; (8081238 <_Z15setLowPowerMode6String+0xa4>)
 80811fe:	a802      	add	r0, sp, #8
 8081200:	f88d 6000 	strb.w	r6, [sp]
 8081204:	f7fe ffda 	bl	80801bc <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.16.constprop.21>
 8081208:	a803      	add	r0, sp, #12
 808120a:	f7ff fa6f 	bl	80806ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    controlRegister = (0b1111110 & controlRegister);                  // If so, flip the lowPowerMode bit
 808120e:	7823      	ldrb	r3, [r4, #0]
 8081210:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8081214:	7023      	strb	r3, [r4, #0]
    lowPowerMode = false;
 8081216:	4b0a      	ldr	r3, [pc, #40]	; (8081240 <_Z15setLowPowerMode6String+0xac>)
 8081218:	701e      	strb	r6, [r3, #0]
  }
  FRAMwrite8(CONTROLREGISTER,controlRegister);                         // Write to the control register
 808121a:	2007      	movs	r0, #7
 808121c:	7821      	ldrb	r1, [r4, #0]
 808121e:	f7fe ffe1 	bl	80801e4 <_Z10FRAMwrite8jh>
 8081222:	2001      	movs	r0, #1
  return 1;
}
 8081224:	b004      	add	sp, #16
 8081226:	bd70      	pop	{r4, r5, r6, pc}
 8081228:	08085d1d 	.word	0x08085d1d
 808122c:	08085b48 	.word	0x08085b48
 8081230:	200005be 	.word	0x200005be
 8081234:	20000500 	.word	0x20000500
 8081238:	080859b6 	.word	0x080859b6
 808123c:	08085a20 	.word	0x08085a20
 8081240:	20000556 	.word	0x20000556
 8081244:	0808585f 	.word	0x0808585f

08081248 <_ZN10CloudClass8variableIA10_cIiEEEbRKT_DpRKT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 8081248:	2300      	movs	r3, #0
 808124a:	2202      	movs	r2, #2
 808124c:	f000 bdc8 	b.w	8081de0 <spark_variable>

08081250 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 8081250:	4602      	mov	r2, r0
 8081252:	4801      	ldr	r0, [pc, #4]	; (8081258 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
 8081254:	f001 b839 	b.w	80822ca <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8081258:	0808229f 	.word	0x0808229f

0808125c <setup>:
int dailyPersonCount = 0;                   // daily counter
int averageHourlyDuration = 0;              // Running average duration value


void setup()                                // Note: Disconnected Setup()
{
 808125c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808125e:	b0a9      	sub	sp, #164	; 0xa4
  Wire.begin();                             // Create a waire object
 8081260:	f002 fb4e 	bl	8083900 <_Z19__fetch_global_Wirev>
 8081264:	f001 fb62 	bl	808292c <_ZN7TwoWire5beginEv>

  pinMode(enablePin,OUTPUT);                // For GPS enabled units
 8081268:	2101      	movs	r1, #1
 808126a:	201c      	movs	r0, #28
 808126c:	f002 faf4 	bl	8083858 <pinMode>
  digitalWrite(enablePin,LOW);              // Turn off GPS to save battery
 8081270:	2100      	movs	r1, #0
 8081272:	201c      	movs	r0, #28
 8081274:	f002 fb01 	bl	808387a <digitalWrite>
  pinMode(intPin,INPUT_PULLUP);             // PIR Sensor Interrupt pin
 8081278:	2102      	movs	r1, #2
 808127a:	2003      	movs	r0, #3
 808127c:	f002 faec 	bl	8083858 <pinMode>
  pinMode(wakeUpPin,INPUT);                 // This pin is active HIGH
 8081280:	2100      	movs	r1, #0
 8081282:	2011      	movs	r0, #17
 8081284:	f002 fae8 	bl	8083858 <pinMode>
  pinMode(userSwitch,INPUT);                // Momentary contact button on board for direct user input
 8081288:	2100      	movs	r1, #0
 808128a:	2005      	movs	r0, #5
 808128c:	f002 fae4 	bl	8083858 <pinMode>
  pinMode(blueLED, OUTPUT);                 // declare the Blue LED Pin as an output
 8081290:	2101      	movs	r1, #1
 8081292:	2007      	movs	r0, #7
 8081294:	f002 fae0 	bl	8083858 <pinMode>
  pinMode(tmp36Shutdwn,OUTPUT);             // Supports shutting down the TMP-36 to save juice
 8081298:	2101      	movs	r1, #1
 808129a:	201d      	movs	r0, #29
 808129c:	f002 fadc 	bl	8083858 <pinMode>
  digitalWrite(tmp36Shutdwn, HIGH);         // Turns on the temp sensor
 80812a0:	2101      	movs	r1, #1
 80812a2:	201d      	movs	r0, #29
 80812a4:	f002 fae9 	bl	808387a <digitalWrite>
  pinMode(donePin,OUTPUT);                  // Allows us to pet the watchdog
 80812a8:	2101      	movs	r1, #1
 80812aa:	2006      	movs	r0, #6
 80812ac:	f002 fad4 	bl	8083858 <pinMode>
  pinMode(hardResetPin,OUTPUT);             // For a hard reset active HIGH
 80812b0:	2101      	movs	r1, #1
 80812b2:	2004      	movs	r0, #4
 80812b4:	f002 fad0 	bl	8083858 <pinMode>

  petWatchdog();                            // Pet the watchdog
 80812b8:	f7ff f8c4 	bl	8080444 <_Z11petWatchdogv>
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
 80812bc:	a804      	add	r0, sp, #16
    particle::Future<bool> publish(const char* name, const char* data) PARTICLE_DEPRECATED_API_DEFAULT_PUBLISH_SCOPE;
    particle::Future<bool> publish(const char* name, const char* data, int ttl) PARTICLE_DEPRECATED_API_DEFAULT_PUBLISH_SCOPE;

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
 80812be:	2400      	movs	r4, #0
 80812c0:	f000 fdbe 	bl	8081e40 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
 80812c4:	2300      	movs	r3, #0
 80812c6:	227d      	movs	r2, #125	; 0x7d
 80812c8:	a908      	add	r1, sp, #32
 80812ca:	a804      	add	r0, sp, #16
 80812cc:	f001 ff77 	bl	80831be <_ZNK6String8getBytesEPhjj>
 80812d0:	4623      	mov	r3, r4
 80812d2:	4622      	mov	r2, r4
 80812d4:	49a0      	ldr	r1, [pc, #640]	; (8081558 <setup+0x2fc>)
 80812d6:	9401      	str	r4, [sp, #4]
 80812d8:	9400      	str	r4, [sp, #0]
 80812da:	a808      	add	r0, sp, #32
 80812dc:	f000 fdc0 	bl	8081e60 <spark_subscribe>
  char responseTopic[125];
  String deviceID = System.deviceID();                                // Multiple Electrons share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);      // Subscribe to the integration response event

  Particle.variable("HourlyCount", hourlyPersonCount);                // Define my Particle variables
 80812e0:	499e      	ldr	r1, [pc, #632]	; (808155c <setup+0x300>)
 80812e2:	489f      	ldr	r0, [pc, #636]	; (8081560 <setup+0x304>)
 80812e4:	f7ff ffb0 	bl	8081248 <_ZN10CloudClass8variableIA10_cIiEEEbRKT_DpRKT0_>
  Particle.variable("DailyCount", dailyPersonCount);                  // Note: Don't have to be connected for any of this!!!
 80812e8:	499e      	ldr	r1, [pc, #632]	; (8081564 <setup+0x308>)
 80812ea:	489f      	ldr	r0, [pc, #636]	; (8081568 <setup+0x30c>)
 80812ec:	f7ff ffac 	bl	8081248 <_ZN10CloudClass8variableIA10_cIiEEEbRKT_DpRKT0_>
  Particle.variable("keepSession",keepSession);
 80812f0:	499e      	ldr	r1, [pc, #632]	; (808156c <setup+0x310>)
 80812f2:	489f      	ldr	r0, [pc, #636]	; (8081570 <setup+0x314>)
 80812f4:	f7ff ffa8 	bl	8081248 <_ZN10CloudClass8variableIA10_cIiEEEbRKT_DpRKT0_>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 80812f8:	4623      	mov	r3, r4
 80812fa:	2204      	movs	r2, #4
 80812fc:	499d      	ldr	r1, [pc, #628]	; (8081574 <setup+0x318>)
 80812fe:	489e      	ldr	r0, [pc, #632]	; (8081578 <setup+0x31c>)
 8081300:	f000 fd6e 	bl	8081de0 <spark_variable>
  Particle.variable("Signal", SignalString);
  Particle.variable("ResetCount", resetCount);
 8081304:	499d      	ldr	r1, [pc, #628]	; (808157c <setup+0x320>)
 8081306:	489e      	ldr	r0, [pc, #632]	; (8081580 <setup+0x324>)
 8081308:	f7ff ff9e 	bl	8081248 <_ZN10CloudClass8variableIA10_cIiEEEbRKT_DpRKT0_>
 808130c:	499d      	ldr	r1, [pc, #628]	; (8081584 <setup+0x328>)
 808130e:	4623      	mov	r3, r4
 8081310:	2204      	movs	r2, #4
 8081312:	6809      	ldr	r1, [r1, #0]
 8081314:	489c      	ldr	r0, [pc, #624]	; (8081588 <setup+0x32c>)
 8081316:	f000 fd63 	bl	8081de0 <spark_variable>
  Particle.variable("Release",releaseNumber);
  Particle.variable("stateOfChg", stateOfCharge);
 808131a:	499c      	ldr	r1, [pc, #624]	; (808158c <setup+0x330>)
 808131c:	489c      	ldr	r0, [pc, #624]	; (8081590 <setup+0x334>)
 808131e:	f7ff ff93 	bl	8081248 <_ZN10CloudClass8variableIA10_cIiEEEbRKT_DpRKT0_>
 8081322:	4623      	mov	r3, r4
 8081324:	2201      	movs	r2, #1
 8081326:	499b      	ldr	r1, [pc, #620]	; (8081594 <setup+0x338>)
 8081328:	489b      	ldr	r0, [pc, #620]	; (8081598 <setup+0x33c>)
 808132a:	f000 fd59 	bl	8081de0 <spark_variable>
  Particle.variable("lowPowerMode",lowPowerMode);
  Particle.variable("OpenTime",openTime);
 808132e:	499b      	ldr	r1, [pc, #620]	; (808159c <setup+0x340>)
 8081330:	489b      	ldr	r0, [pc, #620]	; (80815a0 <setup+0x344>)
 8081332:	f7ff ff89 	bl	8081248 <_ZN10CloudClass8variableIA10_cIiEEEbRKT_DpRKT0_>
  Particle.variable("CloseTime",closeTime);
 8081336:	499b      	ldr	r1, [pc, #620]	; (80815a4 <setup+0x348>)
 8081338:	489b      	ldr	r0, [pc, #620]	; (80815a8 <setup+0x34c>)
 808133a:	f7ff ff85 	bl	8081248 <_ZN10CloudClass8variableIA10_cIiEEEbRKT_DpRKT0_>

  Particle.function("Reset-FRAM", resetFRAM);                         // These functions allow you to configure and control the Electron
 808133e:	499b      	ldr	r1, [pc, #620]	; (80815ac <setup+0x350>)
 8081340:	489b      	ldr	r0, [pc, #620]	; (80815b0 <setup+0x354>)
 8081342:	f7ff ff85 	bl	8081250 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Reset-Counts",resetCounts);
 8081346:	499b      	ldr	r1, [pc, #620]	; (80815b4 <setup+0x358>)
 8081348:	489b      	ldr	r0, [pc, #620]	; (80815b8 <setup+0x35c>)
 808134a:	f7ff ff81 	bl	8081250 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Hard-Reset",hardResetNow);
 808134e:	499b      	ldr	r1, [pc, #620]	; (80815bc <setup+0x360>)
 8081350:	489b      	ldr	r0, [pc, #620]	; (80815c0 <setup+0x364>)
 8081352:	f7ff ff7d 	bl	8081250 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("KeepSession",setKeepSession);
 8081356:	499b      	ldr	r1, [pc, #620]	; (80815c4 <setup+0x368>)
 8081358:	489b      	ldr	r0, [pc, #620]	; (80815c8 <setup+0x36c>)
 808135a:	f7ff ff79 	bl	8081250 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Send-Now",sendNow);
 808135e:	499b      	ldr	r1, [pc, #620]	; (80815cc <setup+0x370>)
 8081360:	489b      	ldr	r0, [pc, #620]	; (80815d0 <setup+0x374>)
 8081362:	f7ff ff75 	bl	8081250 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("LowPowerMode",setLowPowerMode);
 8081366:	499b      	ldr	r1, [pc, #620]	; (80815d4 <setup+0x378>)
 8081368:	489b      	ldr	r0, [pc, #620]	; (80815d8 <setup+0x37c>)
 808136a:	f7ff ff71 	bl	8081250 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Solar-Mode",setSolarMode);
 808136e:	499b      	ldr	r1, [pc, #620]	; (80815dc <setup+0x380>)
 8081370:	489b      	ldr	r0, [pc, #620]	; (80815e0 <setup+0x384>)
 8081372:	f7ff ff6d 	bl	8081250 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Verbose-Mode",setVerboseMode);
 8081376:	499b      	ldr	r1, [pc, #620]	; (80815e4 <setup+0x388>)
 8081378:	489b      	ldr	r0, [pc, #620]	; (80815e8 <setup+0x38c>)
 808137a:	f7ff ff69 	bl	8081250 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetTimeZone",setTimeZone);
 808137e:	499b      	ldr	r1, [pc, #620]	; (80815ec <setup+0x390>)
 8081380:	489b      	ldr	r0, [pc, #620]	; (80815f0 <setup+0x394>)
 8081382:	f7ff ff65 	bl	8081250 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetOpenTime",setOpenTime);
 8081386:	499b      	ldr	r1, [pc, #620]	; (80815f4 <setup+0x398>)
 8081388:	489b      	ldr	r0, [pc, #620]	; (80815f8 <setup+0x39c>)
 808138a:	f7ff ff61 	bl	8081250 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetClose",setCloseTime);
 808138e:	499b      	ldr	r1, [pc, #620]	; (80815fc <setup+0x3a0>)
 8081390:	489b      	ldr	r0, [pc, #620]	; (8081600 <setup+0x3a4>)
 8081392:	f7ff ff5d 	bl	8081250 <_ZN10CloudClass8functionIA9_cIPFi6StringEEEEbRKT_DpT0_>

  // Load the elements for improving troubleshooting and reliability
  connectionEvents.setup();                                           // For logging connection event data
 8081396:	489b      	ldr	r0, [pc, #620]	; (8081604 <setup+0x3a8>)
 8081398:	f000 fade 	bl	8081958 <_ZN16ConnectionEvents5setupEv>


  if (!fram.begin()) {                                                  // You can stick the new i2c addr in here, e.g. begin(0x51);
 808139c:	2150      	movs	r1, #80	; 0x50
 808139e:	489a      	ldr	r0, [pc, #616]	; (8081608 <setup+0x3ac>)
 80813a0:	f7fe fe8e 	bl	80800c0 <_ZN17Adafruit_FRAM_I2C5beginEh>
 80813a4:	4d99      	ldr	r5, [pc, #612]	; (808160c <setup+0x3b0>)
 80813a6:	b158      	cbz	r0, 80813c0 <setup+0x164>
    resetTimeStamp = millis();
    state = ERROR_STATE;
  }
  else if (FRAMread8(VERSIONADDR) != VERSIONNUMBER) {                   // Check to see if the memory map in the sketch matches the data on the chip
 80813a8:	4620      	mov	r0, r4
 80813aa:	f7fe ff15 	bl	80801d8 <_Z9FRAMread8j>
 80813ae:	2809      	cmp	r0, #9
 80813b0:	d01d      	beq.n	80813ee <setup+0x192>
    ResetFRAM();                                                        // Reset the FRAM to correct the issue
 80813b2:	f7ff f9b1 	bl	8080718 <_Z9ResetFRAMv>
    if (FRAMread8(VERSIONADDR) != VERSIONNUMBER) {
 80813b6:	4620      	mov	r0, r4
 80813b8:	f7fe ff0e 	bl	80801d8 <_Z9FRAMread8j>
 80813bc:	2809      	cmp	r0, #9
 80813be:	d006      	beq.n	80813ce <setup+0x172>
 80813c0:	f000 fb58 	bl	8081a74 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
 80813c4:	4b92      	ldr	r3, [pc, #584]	; (8081610 <setup+0x3b4>)
 80813c6:	6018      	str	r0, [r3, #0]
      state = ERROR_STATE;   // Resetting did not fix the issue
 80813c8:	2301      	movs	r3, #1
 80813ca:	702b      	strb	r3, [r5, #0]
 80813cc:	e00f      	b.n	80813ee <setup+0x192>
    }
    else {
      FRAMwrite8(CONTROLREGISTER,0);                                    // Need to reset so not in low power or low battery mode
 80813ce:	4621      	mov	r1, r4
 80813d0:	2007      	movs	r0, #7
 80813d2:	f7fe ff07 	bl	80801e4 <_Z10FRAMwrite8jh>
      FRAMwrite8(OPENTIMEADDR,0);                                       // These set the defaults if the FRAM is erased
 80813d6:	4621      	mov	r1, r4
 80813d8:	2005      	movs	r0, #5
 80813da:	f7fe ff03 	bl	80801e4 <_Z10FRAMwrite8jh>
      FRAMwrite8(CLOSETIMEADDR,24);                                     // This will ensure the device does not sleep
 80813de:	2118      	movs	r1, #24
 80813e0:	2006      	movs	r0, #6
 80813e2:	f7fe feff 	bl	80801e4 <_Z10FRAMwrite8jh>
      FRAMwrite8(KEEPSESSION,2);
 80813e6:	2102      	movs	r1, #2
 80813e8:	2003      	movs	r0, #3
 80813ea:	f7fe fefb 	bl	80801e4 <_Z10FRAMwrite8jh>
    }
  }

  resetCount = FRAMread8(RESETCOUNT);                                   // Retrive system recount data from FRAM
 80813ee:	2002      	movs	r0, #2
 80813f0:	f7fe fef2 	bl	80801d8 <_Z9FRAMread8j>
 80813f4:	4c61      	ldr	r4, [pc, #388]	; (808157c <setup+0x320>)
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80813f6:	2200      	movs	r2, #0
 80813f8:	6020      	str	r0, [r4, #0]
 80813fa:	a828      	add	r0, sp, #160	; 0xa0
 80813fc:	f840 2d94 	str.w	r2, [r0, #-148]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8081400:	4611      	mov	r1, r2
 8081402:	f000 fb27 	bl	8081a54 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 8081406:	9b03      	ldr	r3, [sp, #12]
  if (System.resetReason() == RESET_REASON_PIN_RESET)                   // Check to see if we are starting from a pin reset
 8081408:	2b14      	cmp	r3, #20
 808140a:	d106      	bne.n	808141a <setup+0x1be>
  {
    resetCount++;
 808140c:	6821      	ldr	r1, [r4, #0]
    FRAMwrite8(RESETCOUNT,static_cast<uint8_t>(resetCount));            // If so, store incremented number - watchdog must have done This
 808140e:	2002      	movs	r0, #2
  }

  resetCount = FRAMread8(RESETCOUNT);                                   // Retrive system recount data from FRAM
  if (System.resetReason() == RESET_REASON_PIN_RESET)                   // Check to see if we are starting from a pin reset
  {
    resetCount++;
 8081410:	3101      	adds	r1, #1
 8081412:	6021      	str	r1, [r4, #0]
    FRAMwrite8(RESETCOUNT,static_cast<uint8_t>(resetCount));            // If so, store incremented number - watchdog must have done This
 8081414:	b2c9      	uxtb	r1, r1
 8081416:	f7fe fee5 	bl	80801e4 <_Z10FRAMwrite8jh>
  }
  if (resetCount >=6) {                                                 // If we get to resetCount 4, we are resetting without entering the main loop
 808141a:	6823      	ldr	r3, [r4, #0]
 808141c:	2b05      	cmp	r3, #5
 808141e:	dd05      	ble.n	808142c <setup+0x1d0>
    FRAMwrite8(RESETCOUNT,4);                                            // The hope here is to get to the main loop and report a value of 4 which will indicate this issue is occuring
 8081420:	2104      	movs	r1, #4
 8081422:	2002      	movs	r0, #2
 8081424:	f7fe fede 	bl	80801e4 <_Z10FRAMwrite8jh>
    fullModemReset();                                                   // This will reset the modem and the device will reboot
 8081428:	f7ff f934 	bl	8080694 <_Z14fullModemResetv>
  }

  // Here we load the values from FRAM
  keepSession = FRAMread8(KEEPSESSION);                                 // keepSession - The time to keep a session alive - in seconds
 808142c:	2003      	movs	r0, #3
 808142e:	f7fe fed3 	bl	80801d8 <_Z9FRAMread8j>
 8081432:	4b4e      	ldr	r3, [pc, #312]	; (808156c <setup+0x310>)
  openTime = FRAMread8(OPENTIMEADDR);
 8081434:	4e59      	ldr	r6, [pc, #356]	; (808159c <setup+0x340>)
    FRAMwrite8(RESETCOUNT,4);                                            // The hope here is to get to the main loop and report a value of 4 which will indicate this issue is occuring
    fullModemReset();                                                   // This will reset the modem and the device will reboot
  }

  // Here we load the values from FRAM
  keepSession = FRAMread8(KEEPSESSION);                                 // keepSession - The time to keep a session alive - in seconds
 8081436:	6018      	str	r0, [r3, #0]
  openTime = FRAMread8(OPENTIMEADDR);
 8081438:	2005      	movs	r0, #5
 808143a:	f7fe fecd 	bl	80801d8 <_Z9FRAMread8j>
 808143e:	6030      	str	r0, [r6, #0]
  closeTime = FRAMread8(CLOSETIMEADDR);
 8081440:	2006      	movs	r0, #6
 8081442:	f7fe fec9 	bl	80801d8 <_Z9FRAMread8j>
 8081446:	4c57      	ldr	r4, [pc, #348]	; (80815a4 <setup+0x348>)
 8081448:	4637      	mov	r7, r6
 808144a:	6020      	str	r0, [r4, #0]

  int8_t tempTimeZoneOffset = FRAMread8(TIMEZONE);                      // Load Time zone data from FRAM
 808144c:	2004      	movs	r0, #4
 808144e:	f7fe fec3 	bl	80801d8 <_Z9FRAMread8j>
  if (tempTimeZoneOffset <= 12 && tempTimeZoneOffset >= -12)  Time.zone((float)tempTimeZoneOffset);  // Load Timezone from FRAM
 8081452:	f100 030c 	add.w	r3, r0, #12
 8081456:	b2db      	uxtb	r3, r3
 8081458:	2b18      	cmp	r3, #24
 808145a:	4626      	mov	r6, r4
 808145c:	d803      	bhi.n	8081466 <setup+0x20a>
 808145e:	b240      	sxtb	r0, r0
 8081460:	f003 f920 	bl	80846a4 <__aeabi_i2f>
 8081464:	e000      	b.n	8081468 <setup+0x20c>
  else Time.zone(-5);                                                   // Default is EST in case proper value not in FRAM
 8081466:	486b      	ldr	r0, [pc, #428]	; (8081614 <setup+0x3b8>)
 8081468:	f001 ff7c 	bl	8083364 <_ZN9TimeClass4zoneEf>

  // And set the flags from the control register
  controlRegister = FRAMread8(CONTROLREGISTER);                         // Read the Control Register for system modes so they stick even after reset
 808146c:	2007      	movs	r0, #7
 808146e:	f7fe feb3 	bl	80801d8 <_Z9FRAMread8j>
 8081472:	4b69      	ldr	r3, [pc, #420]	; (8081618 <setup+0x3bc>)
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
 8081474:	4c47      	ldr	r4, [pc, #284]	; (8081594 <setup+0x338>)
  int8_t tempTimeZoneOffset = FRAMread8(TIMEZONE);                      // Load Time zone data from FRAM
  if (tempTimeZoneOffset <= 12 && tempTimeZoneOffset >= -12)  Time.zone((float)tempTimeZoneOffset);  // Load Timezone from FRAM
  else Time.zone(-5);                                                   // Default is EST in case proper value not in FRAM

  // And set the flags from the control register
  controlRegister = FRAMread8(CONTROLREGISTER);                         // Read the Control Register for system modes so they stick even after reset
 8081476:	7018      	strb	r0, [r3, #0]
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
 8081478:	f000 0301 	and.w	r3, r0, #1
 808147c:	7023      	strb	r3, [r4, #0]
  solarPowerMode  = (0b00000100 & controlRegister);                     // Set the solarPowerMode
 808147e:	4b67      	ldr	r3, [pc, #412]	; (808161c <setup+0x3c0>)
 8081480:	f3c0 0280 	ubfx	r2, r0, #2, #1
 8081484:	701a      	strb	r2, [r3, #0]
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode
 8081486:	4b66      	ldr	r3, [pc, #408]	; (8081620 <setup+0x3c4>)
 8081488:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 808148c:	7018      	strb	r0, [r3, #0]

  PMICreset();                                                          // Executes commands that set up the PMIC for Solar charging - once we know the Solar Mode
 808148e:	f7ff f837 	bl	8080500 <_Z9PMICresetv>

  takeMeasurements();                                                   // For the benefit of monitoring the device
 8081492:	f7fe ffbd 	bl	8080410 <_Z16takeMeasurementsv>

  if (!lowPowerMode && (stateOfCharge >= lowBattLimit) && !(Time.hour() >= closeTime || Time.hour() < openTime)) connectToParticle();  // If not lowpower or sleeping, we can connect
 8081496:	7823      	ldrb	r3, [r4, #0]
 8081498:	b97b      	cbnz	r3, 80814ba <setup+0x25e>
 808149a:	4b3c      	ldr	r3, [pc, #240]	; (808158c <setup+0x330>)
 808149c:	681a      	ldr	r2, [r3, #0]
 808149e:	4b61      	ldr	r3, [pc, #388]	; (8081624 <setup+0x3c8>)
 80814a0:	681b      	ldr	r3, [r3, #0]
 80814a2:	429a      	cmp	r2, r3
 80814a4:	db09      	blt.n	80814ba <setup+0x25e>
 80814a6:	f001 ffc3 	bl	8083430 <_ZN9TimeClass4hourEv>
 80814aa:	6833      	ldr	r3, [r6, #0]
 80814ac:	4298      	cmp	r0, r3
 80814ae:	da04      	bge.n	80814ba <setup+0x25e>
 80814b0:	f001 ffbe 	bl	8083430 <_ZN9TimeClass4hourEv>
 80814b4:	683b      	ldr	r3, [r7, #0]
 80814b6:	4298      	cmp	r0, r3
 80814b8:	da4b      	bge.n	8081552 <setup+0x2f6>

  currentHourlyPeriod = Time.hour();                                    // Sets the hour period for when the count starts (see #defines)
 80814ba:	f001 ffb9 	bl	8083430 <_ZN9TimeClass4hourEv>
 80814be:	4b5a      	ldr	r3, [pc, #360]	; (8081628 <setup+0x3cc>)
 80814c0:	7018      	strb	r0, [r3, #0]
  currentDailyPeriod = Time.day();                                      // And the day  (see #defines)
 80814c2:	f001 ffc9 	bl	8083458 <_ZN9TimeClass3dayEv>
 80814c6:	4b59      	ldr	r3, [pc, #356]	; (808162c <setup+0x3d0>)
 80814c8:	7018      	strb	r0, [r3, #0]
  // Deterimine when the last counts were taken check when starting test to determine if we reload values or start counts over
  time_t unixTime = FRAMread32(CURRENTCOUNTSTIME);                      // Need to reload program control since reset
 80814ca:	200e      	movs	r0, #14
 80814cc:	f7fe feee 	bl	80802ac <_Z10FRAMread32m>
 80814d0:	4604      	mov	r4, r0
  lastHour = Time.hour(unixTime);
 80814d2:	f001 ff37 	bl	8083344 <_ZN9TimeClass4hourEl>
 80814d6:	4b56      	ldr	r3, [pc, #344]	; (8081630 <setup+0x3d4>)
 80814d8:	7018      	strb	r0, [r3, #0]
  lastDate = Time.day(unixTime);
 80814da:	4620      	mov	r0, r4
 80814dc:	f001 ff3a 	bl	8083354 <_ZN9TimeClass3dayEl>
 80814e0:	4b54      	ldr	r3, [pc, #336]	; (8081634 <setup+0x3d8>)
 80814e2:	7018      	strb	r0, [r3, #0]
  dailyPersonCount = FRAMread16(CURRENTDAILYCOUNT);                     // Load Daily Count from memory
 80814e4:	200c      	movs	r0, #12
 80814e6:	f7fe fe85 	bl	80801f4 <_Z10FRAMread16j>
 80814ea:	4b1e      	ldr	r3, [pc, #120]	; (8081564 <setup+0x308>)
 80814ec:	6018      	str	r0, [r3, #0]
  hourlyPersonCount = FRAMread16(CURRENTHOURLYCOUNT);                   // Load Hourly Count from memory
 80814ee:	2008      	movs	r0, #8
 80814f0:	f7fe fe80 	bl	80801f4 <_Z10FRAMread16j>
 80814f4:	4b19      	ldr	r3, [pc, #100]	; (808155c <setup+0x300>)
 80814f6:	6018      	str	r0, [r3, #0]
  hourlyDurationSeconds = FRAMread16(CURRENTHOURLYDURATION);            // Load Hourly Duration Count from memory
 80814f8:	200a      	movs	r0, #10
 80814fa:	f7fe fe7b 	bl	80801f4 <_Z10FRAMread16j>
 80814fe:	4b4e      	ldr	r3, [pc, #312]	; (8081638 <setup+0x3dc>)
 8081500:	6018      	str	r0, [r3, #0]
  lastEvent = sessionStart = Time.now();
 8081502:	f001 ff8e 	bl	8083422 <_ZN9TimeClass3nowEv>
 8081506:	4b4d      	ldr	r3, [pc, #308]	; (808163c <setup+0x3e0>)
 8081508:	6018      	str	r0, [r3, #0]
 808150a:	4b4d      	ldr	r3, [pc, #308]	; (8081640 <setup+0x3e4>)
 808150c:	6018      	str	r0, [r3, #0]

  if(!digitalRead(userSwitch)) printFRAMContents();                     // Will go into memory dump mode - connect serial 9600
 808150e:	2005      	movs	r0, #5
 8081510:	f002 f9cc 	bl	80838ac <digitalRead>
 8081514:	b908      	cbnz	r0, 808151a <setup+0x2be>
 8081516:	f7ff f839 	bl	808058c <_Z17printFRAMContentsv>

  attachInterrupt(wakeUpPin, watchdogISR, RISING);                      // The watchdog timer will signal us and we have to respond
 808151a:	2400      	movs	r4, #0
 808151c:	9400      	str	r4, [sp, #0]
 808151e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8081522:	2201      	movs	r2, #1
 8081524:	4947      	ldr	r1, [pc, #284]	; (8081644 <setup+0x3e8>)
 8081526:	2011      	movs	r0, #17
 8081528:	f001 fa3c 	bl	80829a4 <_Z15attachInterrupttPFvvE13InterruptModeah>
  attachInterrupt(intPin,sensorISR,RISING);                             // Will know when the PIR sensor is triggered
 808152c:	2201      	movs	r2, #1
 808152e:	4946      	ldr	r1, [pc, #280]	; (8081648 <setup+0x3ec>)
 8081530:	9400      	str	r4, [sp, #0]
 8081532:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8081536:	2003      	movs	r0, #3
 8081538:	f001 fa34 	bl	80829a4 <_Z15attachInterrupttPFvvE13InterruptModeah>

  if (state != ERROR_STATE) state = IDLE_STATE;                         // IDLE unless error from above code
 808153c:	782b      	ldrb	r3, [r5, #0]
  pinMode(hardResetPin,OUTPUT);             // For a hard reset active HIGH

  petWatchdog();                            // Pet the watchdog

  char responseTopic[125];
  String deviceID = System.deviceID();                                // Multiple Electrons share the same hook - keeps things straight
 808153e:	a804      	add	r0, sp, #16
  if(!digitalRead(userSwitch)) printFRAMContents();                     // Will go into memory dump mode - connect serial 9600

  attachInterrupt(wakeUpPin, watchdogISR, RISING);                      // The watchdog timer will signal us and we have to respond
  attachInterrupt(intPin,sensorISR,RISING);                             // Will know when the PIR sensor is triggered

  if (state != ERROR_STATE) state = IDLE_STATE;                         // IDLE unless error from above code
 8081540:	2b01      	cmp	r3, #1
 8081542:	bf1e      	ittt	ne
 8081544:	4b31      	ldrne	r3, [pc, #196]	; (808160c <setup+0x3b0>)
 8081546:	2202      	movne	r2, #2
 8081548:	701a      	strbne	r2, [r3, #0]
  pinMode(hardResetPin,OUTPUT);             // For a hard reset active HIGH

  petWatchdog();                            // Pet the watchdog

  char responseTopic[125];
  String deviceID = System.deviceID();                                // Multiple Electrons share the same hook - keeps things straight
 808154a:	f001 fdb2 	bl	80830b2 <_ZN6StringD1Ev>

  attachInterrupt(wakeUpPin, watchdogISR, RISING);                      // The watchdog timer will signal us and we have to respond
  attachInterrupt(intPin,sensorISR,RISING);                             // Will know when the PIR sensor is triggered

  if (state != ERROR_STATE) state = IDLE_STATE;                         // IDLE unless error from above code
}
 808154e:	b029      	add	sp, #164	; 0xa4
 8081550:	bdf0      	pop	{r4, r5, r6, r7, pc}

  PMICreset();                                                          // Executes commands that set up the PMIC for Solar charging - once we know the Solar Mode

  takeMeasurements();                                                   // For the benefit of monitoring the device

  if (!lowPowerMode && (stateOfCharge >= lowBattLimit) && !(Time.hour() >= closeTime || Time.hour() < openTime)) connectToParticle();  // If not lowpower or sleeping, we can connect
 8081552:	f7fe ff87 	bl	8080464 <_Z17connectToParticlev>
 8081556:	e7b0      	b.n	80814ba <setup+0x25e>
 8081558:	08080de5 	.word	0x08080de5
 808155c:	20000528 	.word	0x20000528
 8081560:	08085a2a 	.word	0x08085a2a
 8081564:	200004ec 	.word	0x200004ec
 8081568:	08085a36 	.word	0x08085a36
 808156c:	200005b8 	.word	0x200005b8
 8081570:	08085a41 	.word	0x08085a41
 8081574:	2000056c 	.word	0x2000056c
 8081578:	08085a4d 	.word	0x08085a4d
 808157c:	20000534 	.word	0x20000534
 8081580:	08085a54 	.word	0x08085a54
 8081584:	20000404 	.word	0x20000404
 8081588:	08085a5f 	.word	0x08085a5f
 808158c:	2000052c 	.word	0x2000052c
 8081590:	08085a67 	.word	0x08085a67
 8081594:	20000556 	.word	0x20000556
 8081598:	08085a72 	.word	0x08085a72
 808159c:	200005b0 	.word	0x200005b0
 80815a0:	08085af5 	.word	0x08085af5
 80815a4:	20000558 	.word	0x20000558
 80815a8:	08085a7f 	.word	0x08085a7f
 80815ac:	080807bd 	.word	0x080807bd
 80815b0:	08085a89 	.word	0x08085a89
 80815b4:	08080241 	.word	0x08080241
 80815b8:	08085a94 	.word	0x08085a94
 80815bc:	080801a1 	.word	0x080801a1
 80815c0:	08085aa1 	.word	0x08085aa1
 80815c4:	08080e7d 	.word	0x08080e7d
 80815c8:	08085aac 	.word	0x08085aac
 80815cc:	08080185 	.word	0x08080185
 80815d0:	08085ab8 	.word	0x08085ab8
 80815d4:	08081195 	.word	0x08081195
 80815d8:	08085ac1 	.word	0x08085ac1
 80815dc:	08080eed 	.word	0x08080eed
 80815e0:	08085ace 	.word	0x08085ace
 80815e4:	08080f91 	.word	0x08080f91
 80815e8:	08085ad9 	.word	0x08085ad9
 80815ec:	0808102d 	.word	0x0808102d
 80815f0:	08085ae6 	.word	0x08085ae6
 80815f4:	080810d5 	.word	0x080810d5
 80815f8:	08085af2 	.word	0x08085af2
 80815fc:	08081135 	.word	0x08081135
 8081600:	08085afe 	.word	0x08085afe
 8081604:	20000538 	.word	0x20000538
 8081608:	200004f8 	.word	0x200004f8
 808160c:	20000520 	.word	0x20000520
 8081610:	200005ac 	.word	0x200005ac
 8081614:	c0a00000 	.word	0xc0a00000
 8081618:	200005be 	.word	0x200005be
 808161c:	200005bc 	.word	0x200005bc
 8081620:	2000055c 	.word	0x2000055c
 8081624:	200004f0 	.word	0x200004f0
 8081628:	20000548 	.word	0x20000548
 808162c:	20000523 	.word	0x20000523
 8081630:	20000522 	.word	0x20000522
 8081634:	20000530 	.word	0x20000530
 8081638:	200004fc 	.word	0x200004fc
 808163c:	200005b4 	.word	0x200005b4
 8081640:	20000518 	.word	0x20000518
 8081644:	0808015d 	.word	0x0808015d
 8081648:	08080169 	.word	0x08080169

0808164c <_GLOBAL__sub_I_fram>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 808164c:	4b1e      	ldr	r3, [pc, #120]	; (80816c8 <_GLOBAL__sub_I_fram+0x7c>)
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}
 808164e:	b570      	push	{r4, r5, r6, lr}
 8081650:	2400      	movs	r4, #0
 8081652:	601c      	str	r4, [r3, #0]
 8081654:	4b1d      	ldr	r3, [pc, #116]	; (80816cc <_GLOBAL__sub_I_fram+0x80>)
 8081656:	2501      	movs	r5, #1
 8081658:	701d      	strb	r5, [r3, #0]
 808165a:	f000 fa2b 	bl	8081ab4 <HAL_Pin_Map>
// FRAM Library Extensions Header File

Adafruit_FRAM_I2C fram = Adafruit_FRAM_I2C(); // Init the FRAM
 808165e:	481c      	ldr	r0, [pc, #112]	; (80816d0 <_GLOBAL__sub_I_fram+0x84>)
 8081660:	f7fe fd2b 	bl	80800ba <_ZN17Adafruit_FRAM_I2CC1Ev>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8081664:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8081668:	4b1a      	ldr	r3, [pc, #104]	; (80816d4 <_GLOBAL__sub_I_fram+0x88>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 808166a:	2002      	movs	r0, #2
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 808166c:	701c      	strb	r4, [r3, #0]
 808166e:	805c      	strh	r4, [r3, #2]
 8081670:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8081672:	f000 fb5f 	bl	8081d34 <set_system_mode>

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);          // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);               // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;             // Prototype for the fuel gauge (included in Particle core library)
 8081676:	4e18      	ldr	r6, [pc, #96]	; (80816d8 <_GLOBAL__sub_I_fram+0x8c>)
#include "ConnectionEvents.h"         // Stores information on last connection attemt in memory


// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);          // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);               // Means my code will not be held up by Particle processes.
 8081678:	4621      	mov	r1, r4
 808167a:	4628      	mov	r0, r5
 808167c:	f000 fb72 	bl	8081d64 <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
 8081680:	4629      	mov	r1, r5
 8081682:	2004      	movs	r0, #4
 8081684:	f000 f9d6 	bl	8081a34 <HAL_Feature_Set>
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;             // Prototype for the fuel gauge (included in Particle core library)
 8081688:	4d14      	ldr	r5, [pc, #80]	; (80816dc <_GLOBAL__sub_I_fram+0x90>)
 808168a:	4621      	mov	r1, r4
 808168c:	4630      	mov	r0, r6
 808168e:	f001 f8ab 	bl	80827e8 <_ZN9FuelGaugeC1Eb>
 8081692:	4630      	mov	r0, r6
PMIC power;                           //Initalize the PMIC class so you can call the Power Management functions below.
 8081694:	4e12      	ldr	r6, [pc, #72]	; (80816e0 <_GLOBAL__sub_I_fram+0x94>)

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);          // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);               // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;             // Prototype for the fuel gauge (included in Particle core library)
 8081696:	462a      	mov	r2, r5
 8081698:	4912      	ldr	r1, [pc, #72]	; (80816e4 <_GLOBAL__sub_I_fram+0x98>)
 808169a:	f002 f9b7 	bl	8083a0c <__aeabi_atexit>
PMIC power;                           //Initalize the PMIC class so you can call the Power Management functions below.
 808169e:	4621      	mov	r1, r4
 80816a0:	4630      	mov	r0, r6
ConnectionEvents connectionEvents("connEventStats");// Connection events object
 80816a2:	4c11      	ldr	r4, [pc, #68]	; (80816e8 <_GLOBAL__sub_I_fram+0x9c>)
// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);          // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);               // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;             // Prototype for the fuel gauge (included in Particle core library)
PMIC power;                           //Initalize the PMIC class so you can call the Power Management functions below.
 80816a4:	f001 fa91 	bl	8082bca <_ZN4PMICC1Eb>
 80816a8:	462a      	mov	r2, r5
 80816aa:	4910      	ldr	r1, [pc, #64]	; (80816ec <_GLOBAL__sub_I_fram+0xa0>)
 80816ac:	4630      	mov	r0, r6
 80816ae:	f002 f9ad 	bl	8083a0c <__aeabi_atexit>
ConnectionEvents connectionEvents("connEventStats");// Connection events object
 80816b2:	490f      	ldr	r1, [pc, #60]	; (80816f0 <_GLOBAL__sub_I_fram+0xa4>)
 80816b4:	4620      	mov	r0, r4
 80816b6:	f000 f87d 	bl	80817b4 <_ZN16ConnectionEventsC1EPKc>
 80816ba:	462a      	mov	r2, r5
 80816bc:	4620      	mov	r0, r4
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}
 80816be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
SYSTEM_MODE(SEMI_AUTOMATIC);          // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);               // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;             // Prototype for the fuel gauge (included in Particle core library)
PMIC power;                           //Initalize the PMIC class so you can call the Power Management functions below.
ConnectionEvents connectionEvents("connEventStats");// Connection events object
 80816c2:	490c      	ldr	r1, [pc, #48]	; (80816f4 <_GLOBAL__sub_I_fram+0xa8>)
 80816c4:	f002 b9a2 	b.w	8083a0c <__aeabi_atexit>
 80816c8:	2000054c 	.word	0x2000054c
 80816cc:	20000500 	.word	0x20000500
 80816d0:	200004f8 	.word	0x200004f8
 80816d4:	20000550 	.word	0x20000550
 80816d8:	2000050c 	.word	0x2000050c
 80816dc:	200004e8 	.word	0x200004e8
 80816e0:	20000521 	.word	0x20000521
 80816e4:	08082807 	.word	0x08082807
 80816e8:	20000538 	.word	0x20000538
 80816ec:	08082be9 	.word	0x08082be9
 80816f0:	08085b07 	.word	0x08085b07
 80816f4:	080817a5 	.word	0x080817a5

080816f8 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80816f8:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80816fa:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80816fc:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80816fe:	b113      	cbz	r3, 8081706 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081700:	2203      	movs	r2, #3
 8081702:	4601      	mov	r1, r0
 8081704:	4798      	blx	r3
    }
 8081706:	4620      	mov	r0, r4
 8081708:	bd10      	pop	{r4, pc}

0808170a <_GLOBAL__sub_I__ZN18AppWatchdogWrapperC2Em>:
 808170a:	f000 b9d3 	b.w	8081ab4 <HAL_Pin_Map>
	...

08081710 <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl>:
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_LOW_BATTERY_SLEEP, static_cast<int>(soc));

		System.sleep(SLEEP_MODE_DEEP, sleepTimeSecs);
	}

}
 8081710:	b570      	push	{r4, r5, r6, lr}
 8081712:	4b0e      	ldr	r3, [pc, #56]	; (808174c <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x3c>)
#include "BatteryCheck.h"

#include "ConnectionEvents.h"

static FuelGauge fuel;
 8081714:	4d0e      	ldr	r5, [pc, #56]	; (8081750 <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x40>)
 8081716:	2400      	movs	r4, #0
 8081718:	601c      	str	r4, [r3, #0]
 808171a:	4e0e      	ldr	r6, [pc, #56]	; (8081754 <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x44>)
 808171c:	f000 f9ca 	bl	8081ab4 <HAL_Pin_Map>
 8081720:	4621      	mov	r1, r4
 8081722:	4628      	mov	r0, r5
 8081724:	f001 f860 	bl	80827e8 <_ZN9FuelGaugeC1Eb>
 8081728:	4628      	mov	r0, r5
static PMIC pmic;
 808172a:	4d0b      	ldr	r5, [pc, #44]	; (8081758 <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x48>)
#include "BatteryCheck.h"

#include "ConnectionEvents.h"

static FuelGauge fuel;
 808172c:	4632      	mov	r2, r6
 808172e:	490b      	ldr	r1, [pc, #44]	; (808175c <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x4c>)
 8081730:	f002 f96c 	bl	8083a0c <__aeabi_atexit>
static PMIC pmic;
 8081734:	4621      	mov	r1, r4
 8081736:	4628      	mov	r0, r5
 8081738:	f001 fa47 	bl	8082bca <_ZN4PMICC1Eb>
 808173c:	4632      	mov	r2, r6
 808173e:	4628      	mov	r0, r5
		ConnectionEvents::addEvent(ConnectionEvents::CONNECTION_EVENT_LOW_BATTERY_SLEEP, static_cast<int>(soc));

		System.sleep(SLEEP_MODE_DEEP, sleepTimeSecs);
	}

}
 8081740:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
#include "BatteryCheck.h"

#include "ConnectionEvents.h"

static FuelGauge fuel;
static PMIC pmic;
 8081744:	4906      	ldr	r1, [pc, #24]	; (8081760 <_GLOBAL__sub_I__ZN12BatteryCheckC2Efl+0x50>)
 8081746:	f002 b961 	b.w	8083a0c <__aeabi_atexit>
 808174a:	bf00      	nop
 808174c:	200005c8 	.word	0x200005c8
 8081750:	200005c0 	.word	0x200005c0
 8081754:	200004e8 	.word	0x200004e8
 8081758:	200005cc 	.word	0x200005cc
 808175c:	08082807 	.word	0x08082807
 8081760:	08082be9 	.word	0x08082be9

08081764 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 8081764:	b40e      	push	{r1, r2, r3}
 8081766:	b500      	push	{lr}
 8081768:	b08c      	sub	sp, #48	; 0x30
 808176a:	aa0d      	add	r2, sp, #52	; 0x34
 808176c:	f852 1b04 	ldr.w	r1, [r2], #4
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 8081770:	2320      	movs	r3, #32
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8081772:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
 8081776:	9203      	str	r2, [sp, #12]
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 8081778:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 808177a:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 808177c:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 808177e:	aa04      	add	r2, sp, #16
 8081780:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8081782:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8081784:	f000 fac6 	bl	8081d14 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
 8081788:	b00c      	add	sp, #48	; 0x30
 808178a:	f85d eb04 	ldr.w	lr, [sp], #4
 808178e:	b003      	add	sp, #12
 8081790:	4770      	bx	lr
	...

08081794 <_GLOBAL__sub_I__ZN15ConnectionCheck8instanceE>:
 8081794:	4b02      	ldr	r3, [pc, #8]	; (80817a0 <_GLOBAL__sub_I__ZN15ConnectionCheck8instanceE+0xc>)
 8081796:	2200      	movs	r2, #0
 8081798:	601a      	str	r2, [r3, #0]
 808179a:	f000 b98b 	b.w	8081ab4 <HAL_Pin_Map>
 808179e:	bf00      	nop
 80817a0:	200005d0 	.word	0x200005d0

080817a4 <_ZN16ConnectionEventsD1Ev>:
	instance = this;
}

ConnectionEvents::~ConnectionEvents() {

}
 80817a4:	4770      	bx	lr

080817a6 <_ZN16ConnectionEventsD0Ev>:

ConnectionEvents::ConnectionEvents(const char *connectionEventName) : connectionEventName(connectionEventName) {
	instance = this;
}

ConnectionEvents::~ConnectionEvents() {
 80817a6:	b510      	push	{r4, lr}
 80817a8:	4604      	mov	r4, r0

}
 80817aa:	f7fe fc78 	bl	808009e <_ZdlPv>
 80817ae:	4620      	mov	r0, r4
 80817b0:	bd10      	pop	{r4, pc}
	...

080817b4 <_ZN16ConnectionEventsC1EPKc>:
retained ConnectionEventData ConnectionEvents::connectionEventData;

ConnectionEvents *ConnectionEvents::instance;


ConnectionEvents::ConnectionEvents(const char *connectionEventName) : connectionEventName(connectionEventName) {
 80817b4:	4a03      	ldr	r2, [pc, #12]	; (80817c4 <_ZN16ConnectionEventsC1EPKc+0x10>)
 80817b6:	6041      	str	r1, [r0, #4]
 80817b8:	6002      	str	r2, [r0, #0]
 80817ba:	2200      	movs	r2, #0
 80817bc:	6082      	str	r2, [r0, #8]
	instance = this;
 80817be:	4a02      	ldr	r2, [pc, #8]	; (80817c8 <_ZN16ConnectionEventsC1EPKc+0x14>)
 80817c0:	6010      	str	r0, [r2, #0]
}
 80817c2:	4770      	bx	lr
 80817c4:	08085c04 	.word	0x08085c04
 80817c8:	200005d8 	.word	0x200005d8

080817cc <_ZN16ConnectionEvents10canPublishEv>:

	Particle.publish(connectionEventName, buf, PRIVATE);
	completedPublish();
}

bool ConnectionEvents::canPublish() {
 80817cc:	b510      	push	{r4, lr}
 80817ce:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80817d0:	f000 fb2e 	bl	8081e30 <spark_cloud_flag_connected>
	if (!Particle.connected()) {
 80817d4:	b148      	cbz	r0, 80817ea <_ZN16ConnectionEvents10canPublishEv+0x1e>
 80817d6:	f000 f94d 	bl	8081a74 <HAL_Timer_Get_Milli_Seconds>
		// Not cloud connected, can't publish
		return false;
	}

	if (millis() - connectionEventLastSent < PUBLISH_MIN_PERIOD_MS) {
 80817da:	68a3      	ldr	r3, [r4, #8]
 80817dc:	1ac0      	subs	r0, r0, r3
 80817de:	f240 33f1 	movw	r3, #1009	; 0x3f1
 80817e2:	4298      	cmp	r0, r3
 80817e4:	bf94      	ite	ls
 80817e6:	2000      	movls	r0, #0
 80817e8:	2001      	movhi	r0, #1
		// Need to wait before sending again to avoid exceeding publish limits
		return false;
	}
	return true;
}
 80817ea:	bd10      	pop	{r4, pc}

080817ec <_ZN16ConnectionEvents16completedPublishEv>:

void ConnectionEvents::completedPublish() {
 80817ec:	b510      	push	{r4, lr}
 80817ee:	4604      	mov	r4, r0
 80817f0:	f000 f940 	bl	8081a74 <HAL_Timer_Get_Milli_Seconds>
	connectionEventLastSent = millis();
 80817f4:	60a0      	str	r0, [r4, #8]
 80817f6:	bd10      	pop	{r4, pc}

080817f8 <_ZN16ConnectionEvents4loopEv>:
	}
}

// This should be called from loop()
// If there are queued events and there is a cloud connection they're published, oldest first.
void ConnectionEvents::loop() {
 80817f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	if (connectionEventData.eventCount == 0) {
 80817fc:	4d34      	ldr	r5, [pc, #208]	; (80818d0 <_ZN16ConnectionEvents4loopEv+0xd8>)
	}
}

// This should be called from loop()
// If there are queued events and there is a cloud connection they're published, oldest first.
void ConnectionEvents::loop() {
 80817fe:	b0d5      	sub	sp, #340	; 0x154

	if (connectionEventData.eventCount == 0) {
 8081800:	686b      	ldr	r3, [r5, #4]
	}
}

// This should be called from loop()
// If there are queued events and there is a cloud connection they're published, oldest first.
void ConnectionEvents::loop() {
 8081802:	4607      	mov	r7, r0

	if (connectionEventData.eventCount == 0) {
 8081804:	2b00      	cmp	r3, #0
 8081806:	d05f      	beq.n	80818c8 <_ZN16ConnectionEvents4loopEv+0xd0>
		// No events to send
		return;
	}

	if (!canPublish()) {
 8081808:	f7ff ffe0 	bl	80817cc <_ZN16ConnectionEvents10canPublishEv>
 808180c:	2800      	cmp	r0, #0
 808180e:	d05b      	beq.n	80818c8 <_ZN16ConnectionEvents4loopEv+0xd0>
 8081810:	f04f 0800 	mov.w	r8, #0
 8081814:	462e      	mov	r6, r5
 8081816:	4644      	mov	r4, r8
	char buf[256]; // 255 data bytes, plus null-terminator
	size_t numHandled;
	size_t offset = 0;

	// Pack as many events as we have, up to what will fit in a 255 byte publish
	for(numHandled = 0; numHandled < connectionEventData.eventCount; numHandled++) {
 8081818:	686b      	ldr	r3, [r5, #4]
 808181a:	429c      	cmp	r4, r3
 808181c:	d21b      	bcs.n	8081856 <_ZN16ConnectionEvents4loopEv+0x5e>
		char entryBuf[64];

		ConnectionEventInfo *ev = &connectionEventData.events[numHandled];
		size_t len = snprintf(entryBuf, sizeof(entryBuf), "%lu,%lu,%d,%d;", ev->tsDate, ev->tsMillis, ev->eventCode, ev->data);
 808181e:	6973      	ldr	r3, [r6, #20]
 8081820:	4a2c      	ldr	r2, [pc, #176]	; (80818d4 <_ZN16ConnectionEvents4loopEv+0xdc>)
 8081822:	9302      	str	r3, [sp, #8]
 8081824:	6933      	ldr	r3, [r6, #16]
 8081826:	2140      	movs	r1, #64	; 0x40
 8081828:	9301      	str	r3, [sp, #4]
 808182a:	68f3      	ldr	r3, [r6, #12]
 808182c:	a804      	add	r0, sp, #16
 808182e:	9300      	str	r3, [sp, #0]
 8081830:	68b3      	ldr	r3, [r6, #8]
 8081832:	f000 fba5 	bl	8081f80 <snprintf>
		if ((offset + len) >= sizeof(buf)) {
 8081836:	eb00 0908 	add.w	r9, r0, r8
 808183a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 808183e:	f106 0610 	add.w	r6, r6, #16
 8081842:	d808      	bhi.n	8081856 <_ZN16ConnectionEvents4loopEv+0x5e>
			// Not enough buffer space to send in this publish; try again later
			break;
		}
		strcpy(&buf[offset], entryBuf);
 8081844:	ab14      	add	r3, sp, #80	; 0x50
 8081846:	eb03 0008 	add.w	r0, r3, r8
 808184a:	a904      	add	r1, sp, #16
 808184c:	f003 fb16 	bl	8084e7c <strcpy>
	char buf[256]; // 255 data bytes, plus null-terminator
	size_t numHandled;
	size_t offset = 0;

	// Pack as many events as we have, up to what will fit in a 255 byte publish
	for(numHandled = 0; numHandled < connectionEventData.eventCount; numHandled++) {
 8081850:	3401      	adds	r4, #1
 8081852:	46c8      	mov	r8, r9
 8081854:	e7e0      	b.n	8081818 <_ZN16ConnectionEvents4loopEv+0x20>
			break;
		}
		strcpy(&buf[offset], entryBuf);
		offset += len;
	}
	connectionEventData.eventCount -= numHandled;
 8081856:	686a      	ldr	r2, [r5, #4]
 8081858:	4e1d      	ldr	r6, [pc, #116]	; (80818d0 <_ZN16ConnectionEvents4loopEv+0xd8>)
 808185a:	1b12      	subs	r2, r2, r4
 808185c:	606a      	str	r2, [r5, #4]
	if (connectionEventData.eventCount > 0) {
 808185e:	b17a      	cbz	r2, 8081880 <_ZN16ConnectionEvents4loopEv+0x88>
		Log.info("couldn't send all events, saving %d for later", connectionEventData.eventCount);
 8081860:	491d      	ldr	r1, [pc, #116]	; (80818d8 <_ZN16ConnectionEvents4loopEv+0xe0>)
 8081862:	481e      	ldr	r0, [pc, #120]	; (80818dc <_ZN16ConnectionEvents4loopEv+0xe4>)
 8081864:	f7ff ff7e 	bl	8081764 <_ZNK5spark6Logger4infoEPKcz>
		memmove(&connectionEventData.events[0], &connectionEventData.events[numHandled], connectionEventData.eventCount * sizeof(ConnectionEventData));
 8081868:	6873      	ldr	r3, [r6, #4]
 808186a:	eb06 1104 	add.w	r1, r6, r4, lsl #4
 808186e:	f44f 7202 	mov.w	r2, #520	; 0x208
 8081872:	435a      	muls	r2, r3
 8081874:	3108      	adds	r1, #8
 8081876:	f106 0008 	add.w	r0, r6, #8
 808187a:	f003 faaa 	bl	8084dd2 <memmove>
 808187e:	e004      	b.n	808188a <_ZN16ConnectionEvents4loopEv+0x92>
	}
	else {
		Log.info("sent %d events", numHandled);
 8081880:	4622      	mov	r2, r4
 8081882:	4917      	ldr	r1, [pc, #92]	; (80818e0 <_ZN16ConnectionEvents4loopEv+0xe8>)
 8081884:	4815      	ldr	r0, [pc, #84]	; (80818dc <_ZN16ConnectionEvents4loopEv+0xe4>)
 8081886:	f7ff ff6d 	bl	8081764 <_ZNK5spark6Logger4infoEPKcz>
 808188a:	4b16      	ldr	r3, [pc, #88]	; (80818e4 <_ZN16ConnectionEvents4loopEv+0xec>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 808188c:	aa14      	add	r2, sp, #80	; 0x50
 808188e:	781b      	ldrb	r3, [r3, #0]
 8081890:	a804      	add	r0, sp, #16
 8081892:	f88d 3000 	strb.w	r3, [sp]
 8081896:	6879      	ldr	r1, [r7, #4]
 8081898:	233c      	movs	r3, #60	; 0x3c
 808189a:	f000 fe35 	bl	8082508 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 808189e:	9c05      	ldr	r4, [sp, #20]
 80818a0:	b17c      	cbz	r4, 80818c2 <_ZN16ConnectionEvents4loopEv+0xca>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80818a2:	6863      	ldr	r3, [r4, #4]
 80818a4:	3b01      	subs	r3, #1
 80818a6:	6063      	str	r3, [r4, #4]
 80818a8:	b95b      	cbnz	r3, 80818c2 <_ZN16ConnectionEvents4loopEv+0xca>
        {
          _M_dispose();
 80818aa:	6823      	ldr	r3, [r4, #0]
 80818ac:	4620      	mov	r0, r4
 80818ae:	689b      	ldr	r3, [r3, #8]
 80818b0:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80818b2:	68a3      	ldr	r3, [r4, #8]
 80818b4:	3b01      	subs	r3, #1
 80818b6:	60a3      	str	r3, [r4, #8]
 80818b8:	b91b      	cbnz	r3, 80818c2 <_ZN16ConnectionEvents4loopEv+0xca>
            _M_destroy();
 80818ba:	6823      	ldr	r3, [r4, #0]
 80818bc:	4620      	mov	r0, r4
 80818be:	68db      	ldr	r3, [r3, #12]
 80818c0:	4798      	blx	r3
	}

	Particle.publish(connectionEventName, buf, PRIVATE);
	completedPublish();
 80818c2:	4638      	mov	r0, r7
 80818c4:	f7ff ff92 	bl	80817ec <_ZN16ConnectionEvents16completedPublishEv>
}
 80818c8:	b055      	add	sp, #340	; 0x154
 80818ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80818ce:	bf00      	nop
 80818d0:	40024000 	.word	0x40024000
 80818d4:	08085b4a 	.word	0x08085b4a
 80818d8:	08085b59 	.word	0x08085b59
 80818dc:	20000700 	.word	0x20000700
 80818e0:	08085b87 	.word	0x08085b87
 80818e4:	200005d4 	.word	0x200005d4

080818e8 <_ZN16ConnectionEvents3addEii>:
}


// Add a new event. This should only be called from the main loop thread.
// Do not call from other threads like the system thread, software timer, or interrupt service routine.
void ConnectionEvents::add(int eventCode, int data /* = 0 */) {
 80818e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (connectionEventData.eventCount >= CONNECTION_EVENTS_MAX_EVENTS) {
 80818ec:	4c16      	ldr	r4, [pc, #88]	; (8081948 <_ZN16ConnectionEvents3addEii+0x60>)
}


// Add a new event. This should only be called from the main loop thread.
// Do not call from other threads like the system thread, software timer, or interrupt service routine.
void ConnectionEvents::add(int eventCode, int data /* = 0 */) {
 80818ee:	460f      	mov	r7, r1
	if (connectionEventData.eventCount >= CONNECTION_EVENTS_MAX_EVENTS) {
 80818f0:	6863      	ldr	r3, [r4, #4]
}


// Add a new event. This should only be called from the main loop thread.
// Do not call from other threads like the system thread, software timer, or interrupt service routine.
void ConnectionEvents::add(int eventCode, int data /* = 0 */) {
 80818f2:	4690      	mov	r8, r2
	if (connectionEventData.eventCount >= CONNECTION_EVENTS_MAX_EVENTS) {
 80818f4:	2b1f      	cmp	r3, #31
 80818f6:	d90f      	bls.n	8081918 <_ZN16ConnectionEvents3addEii+0x30>
		// Throw out oldest event
		Log.info("discarding old event");
 80818f8:	4914      	ldr	r1, [pc, #80]	; (808194c <_ZN16ConnectionEvents3addEii+0x64>)
 80818fa:	4815      	ldr	r0, [pc, #84]	; (8081950 <_ZN16ConnectionEvents3addEii+0x68>)
 80818fc:	f7ff ff32 	bl	8081764 <_ZNK5spark6Logger4infoEPKcz>
		connectionEventData.eventCount--;
 8081900:	6863      	ldr	r3, [r4, #4]
		memmove(&connectionEventData.events[0], &connectionEventData.events[1], connectionEventData.eventCount * sizeof(ConnectionEventData));
 8081902:	f44f 7202 	mov.w	r2, #520	; 0x208
// Do not call from other threads like the system thread, software timer, or interrupt service routine.
void ConnectionEvents::add(int eventCode, int data /* = 0 */) {
	if (connectionEventData.eventCount >= CONNECTION_EVENTS_MAX_EVENTS) {
		// Throw out oldest event
		Log.info("discarding old event");
		connectionEventData.eventCount--;
 8081906:	3b01      	subs	r3, #1
		memmove(&connectionEventData.events[0], &connectionEventData.events[1], connectionEventData.eventCount * sizeof(ConnectionEventData));
 8081908:	435a      	muls	r2, r3
 808190a:	f104 0118 	add.w	r1, r4, #24
 808190e:	f104 0008 	add.w	r0, r4, #8
// Do not call from other threads like the system thread, software timer, or interrupt service routine.
void ConnectionEvents::add(int eventCode, int data /* = 0 */) {
	if (connectionEventData.eventCount >= CONNECTION_EVENTS_MAX_EVENTS) {
		// Throw out oldest event
		Log.info("discarding old event");
		connectionEventData.eventCount--;
 8081912:	6063      	str	r3, [r4, #4]
		memmove(&connectionEventData.events[0], &connectionEventData.events[1], connectionEventData.eventCount * sizeof(ConnectionEventData));
 8081914:	f003 fa5d 	bl	8084dd2 <memmove>
	}

	// Add new event
	ConnectionEventInfo *ev = &connectionEventData.events[connectionEventData.eventCount++];
 8081918:	6866      	ldr	r6, [r4, #4]
 808191a:	1c75      	adds	r5, r6, #1
 808191c:	6065      	str	r5, [r4, #4]
	ev->tsDate = Time.now();
 808191e:	f001 fd80 	bl	8083422 <_ZN9TimeClass3nowEv>
 8081922:	eb04 1606 	add.w	r6, r4, r6, lsl #4
 8081926:	60b0      	str	r0, [r6, #8]
 8081928:	f000 f8a4 	bl	8081a74 <HAL_Timer_Get_Milli_Seconds>
	ev->tsMillis = millis();
	ev->eventCode = eventCode;
 808192c:	012d      	lsls	r5, r5, #4
 808192e:	1963      	adds	r3, r4, r5
	}

	// Add new event
	ConnectionEventInfo *ev = &connectionEventData.events[connectionEventData.eventCount++];
	ev->tsDate = Time.now();
	ev->tsMillis = millis();
 8081930:	60f0      	str	r0, [r6, #12]
	ev->eventCode = eventCode;
	ev->data = data;
 8081932:	f8c3 8004 	str.w	r8, [r3, #4]

	// Add new event
	ConnectionEventInfo *ev = &connectionEventData.events[connectionEventData.eventCount++];
	ev->tsDate = Time.now();
	ev->tsMillis = millis();
	ev->eventCode = eventCode;
 8081936:	5167      	str	r7, [r4, r5]
	ev->data = data;

	Log.info("connectionEvent event=%d data=%d", eventCode, data);
 8081938:	4643      	mov	r3, r8
 808193a:	463a      	mov	r2, r7
 808193c:	4905      	ldr	r1, [pc, #20]	; (8081954 <_ZN16ConnectionEvents3addEii+0x6c>)
 808193e:	4804      	ldr	r0, [pc, #16]	; (8081950 <_ZN16ConnectionEvents3addEii+0x68>)
 8081940:	f7ff ff10 	bl	8081764 <_ZNK5spark6Logger4infoEPKcz>
 8081944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081948:	40024000 	.word	0x40024000
 808194c:	08085b96 	.word	0x08085b96
 8081950:	20000700 	.word	0x20000700
 8081954:	08085bab 	.word	0x08085bab

08081958 <_ZN16ConnectionEvents5setupEv>:
}



// This should be called during setup()
void ConnectionEvents::setup() {
 8081958:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (connectionEventData.eventMagic != CONNECTION_EVENT_MAGIC ||
 808195a:	4c12      	ldr	r4, [pc, #72]	; (80819a4 <_ZN16ConnectionEvents5setupEv+0x4c>)
 808195c:	4b12      	ldr	r3, [pc, #72]	; (80819a8 <_ZN16ConnectionEvents5setupEv+0x50>)
 808195e:	6822      	ldr	r2, [r4, #0]
}



// This should be called during setup()
void ConnectionEvents::setup() {
 8081960:	4606      	mov	r6, r0
	if (connectionEventData.eventMagic != CONNECTION_EVENT_MAGIC ||
 8081962:	429a      	cmp	r2, r3
 8081964:	461d      	mov	r5, r3
 8081966:	d102      	bne.n	808196e <_ZN16ConnectionEvents5setupEv+0x16>
 8081968:	6863      	ldr	r3, [r4, #4]
 808196a:	2b20      	cmp	r3, #32
 808196c:	d906      	bls.n	808197c <_ZN16ConnectionEvents5setupEv+0x24>
		connectionEventData.eventCount > CONNECTION_EVENTS_MAX_EVENTS) {
		//
		Log.info("initializing connection event retained memory");
 808196e:	490f      	ldr	r1, [pc, #60]	; (80819ac <_ZN16ConnectionEvents5setupEv+0x54>)
 8081970:	480f      	ldr	r0, [pc, #60]	; (80819b0 <_ZN16ConnectionEvents5setupEv+0x58>)
 8081972:	f7ff fef7 	bl	8081764 <_ZNK5spark6Logger4infoEPKcz>
		connectionEventData.eventMagic = CONNECTION_EVENT_MAGIC;
		connectionEventData.eventCount = 0;
 8081976:	2300      	movs	r3, #0
void ConnectionEvents::setup() {
	if (connectionEventData.eventMagic != CONNECTION_EVENT_MAGIC ||
		connectionEventData.eventCount > CONNECTION_EVENTS_MAX_EVENTS) {
		//
		Log.info("initializing connection event retained memory");
		connectionEventData.eventMagic = CONNECTION_EVENT_MAGIC;
 8081978:	6025      	str	r5, [r4, #0]
		connectionEventData.eventCount = 0;
 808197a:	6063      	str	r3, [r4, #4]
	}
	add(CONNECTION_EVENT_SETUP_STARTED);
 808197c:	2200      	movs	r2, #0
 808197e:	4611      	mov	r1, r2
 8081980:	4630      	mov	r0, r6
 8081982:	f7ff ffb1 	bl	80818e8 <_ZN16ConnectionEvents3addEii>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 8081986:	2200      	movs	r2, #0
 8081988:	a802      	add	r0, sp, #8
 808198a:	f840 2d04 	str.w	r2, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 808198e:	4611      	mov	r1, r2
 8081990:	f000 f860 	bl	8081a54 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 8081994:	9a01      	ldr	r2, [sp, #4]

	int resetReason = System.resetReason();
	if (resetReason != RESET_REASON_NONE) {
 8081996:	b11a      	cbz	r2, 80819a0 <_ZN16ConnectionEvents5setupEv+0x48>
		add(CONNECTION_EVENT_RESET_REASON, resetReason);
 8081998:	2112      	movs	r1, #18
 808199a:	4630      	mov	r0, r6
 808199c:	f7ff ffa4 	bl	80818e8 <_ZN16ConnectionEvents3addEii>
	}
}
 80819a0:	b002      	add	sp, #8
 80819a2:	bd70      	pop	{r4, r5, r6, pc}
 80819a4:	40024000 	.word	0x40024000
 80819a8:	5c39d416 	.word	0x5c39d416
 80819ac:	08085bcc 	.word	0x08085bcc
 80819b0:	20000700 	.word	0x20000700

080819b4 <_GLOBAL__sub_I__ZN16ConnectionEvents19connectionEventDataE>:
 80819b4:	4b02      	ldr	r3, [pc, #8]	; (80819c0 <_GLOBAL__sub_I__ZN16ConnectionEvents19connectionEventDataE+0xc>)
 80819b6:	2201      	movs	r2, #1
 80819b8:	701a      	strb	r2, [r3, #0]
 80819ba:	f000 b87b 	b.w	8081ab4 <HAL_Pin_Map>
 80819be:	bf00      	nop
 80819c0:	200005d4 	.word	0x200005d4

080819c4 <_GLOBAL__sub_I__ZN12SessionCheck19sessionRetainedDataE>:
 80819c4:	4b02      	ldr	r3, [pc, #8]	; (80819d0 <_GLOBAL__sub_I__ZN12SessionCheck19sessionRetainedDataE+0xc>)
 80819c6:	2201      	movs	r2, #1
 80819c8:	701a      	strb	r2, [r3, #0]
 80819ca:	f000 b873 	b.w	8081ab4 <HAL_Pin_Map>
 80819ce:	bf00      	nop
 80819d0:	200005dc 	.word	0x200005dc

080819d4 <_GLOBAL__sub_I__ZN6TesterC2EPKci>:
 80819d4:	4b04      	ldr	r3, [pc, #16]	; (80819e8 <_GLOBAL__sub_I__ZN6TesterC2EPKci+0x14>)
 80819d6:	2200      	movs	r2, #0
 80819d8:	601a      	str	r2, [r3, #0]
 80819da:	4a04      	ldr	r2, [pc, #16]	; (80819ec <_GLOBAL__sub_I__ZN6TesterC2EPKci+0x18>)
 80819dc:	2301      	movs	r3, #1
 80819de:	6013      	str	r3, [r2, #0]
 80819e0:	4a03      	ldr	r2, [pc, #12]	; (80819f0 <_GLOBAL__sub_I__ZN6TesterC2EPKci+0x1c>)
 80819e2:	7013      	strb	r3, [r2, #0]
 80819e4:	f000 b866 	b.w	8081ab4 <HAL_Pin_Map>
 80819e8:	200005e0 	.word	0x200005e0
 80819ec:	200005e4 	.word	0x200005e4
 80819f0:	200005dd 	.word	0x200005dd

080819f4 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80819f4:	b508      	push	{r3, lr}
 80819f6:	4b02      	ldr	r3, [pc, #8]	; (8081a00 <inet_gethostbyname+0xc>)
 80819f8:	681b      	ldr	r3, [r3, #0]
 80819fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80819fc:	9301      	str	r3, [sp, #4]
 80819fe:	bd08      	pop	{r3, pc}
 8081a00:	08060020 	.word	0x08060020

08081a04 <cellular_signal>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
 8081a04:	b508      	push	{r3, lr}
 8081a06:	4b02      	ldr	r3, [pc, #8]	; (8081a10 <cellular_signal+0xc>)
 8081a08:	681b      	ldr	r3, [r3, #0]
 8081a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081a0c:	9301      	str	r3, [sp, #4]
 8081a0e:	bd08      	pop	{r3, pc}
 8081a10:	08060020 	.word	0x08060020

08081a14 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 8081a14:	b508      	push	{r3, lr}
 8081a16:	4b02      	ldr	r3, [pc, #8]	; (8081a20 <cellular_command+0xc>)
 8081a18:	681b      	ldr	r3, [r3, #0]
 8081a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8081a1c:	9301      	str	r3, [sp, #4]
 8081a1e:	bd08      	pop	{r3, pc}
 8081a20:	08060020 	.word	0x08060020

08081a24 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 8081a24:	b508      	push	{r3, lr}
 8081a26:	4b02      	ldr	r3, [pc, #8]	; (8081a30 <os_mutex_create+0xc>)
 8081a28:	681b      	ldr	r3, [r3, #0]
 8081a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081a2c:	9301      	str	r3, [sp, #4]
 8081a2e:	bd08      	pop	{r3, pc}
 8081a30:	080401d0 	.word	0x080401d0

08081a34 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 8081a34:	b508      	push	{r3, lr}
 8081a36:	4b02      	ldr	r3, [pc, #8]	; (8081a40 <HAL_Feature_Set+0xc>)
 8081a38:	681b      	ldr	r3, [r3, #0]
 8081a3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8081a3c:	9301      	str	r3, [sp, #4]
 8081a3e:	bd08      	pop	{r3, pc}
 8081a40:	080401b8 	.word	0x080401b8

08081a44 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 8081a44:	b508      	push	{r3, lr}
 8081a46:	4b02      	ldr	r3, [pc, #8]	; (8081a50 <HAL_Core_System_Reset_Ex+0xc>)
 8081a48:	681b      	ldr	r3, [r3, #0]
 8081a4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8081a4c:	9301      	str	r3, [sp, #4]
 8081a4e:	bd08      	pop	{r3, pc}
 8081a50:	080401b8 	.word	0x080401b8

08081a54 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 8081a54:	b508      	push	{r3, lr}
 8081a56:	4b02      	ldr	r3, [pc, #8]	; (8081a60 <HAL_Core_Get_Last_Reset_Info+0xc>)
 8081a58:	681b      	ldr	r3, [r3, #0]
 8081a5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8081a5c:	9301      	str	r3, [sp, #4]
 8081a5e:	bd08      	pop	{r3, pc}
 8081a60:	080401b8 	.word	0x080401b8

08081a64 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8081a64:	b508      	push	{r3, lr}
 8081a66:	4b02      	ldr	r3, [pc, #8]	; (8081a70 <HAL_RNG_GetRandomNumber+0xc>)
 8081a68:	681b      	ldr	r3, [r3, #0]
 8081a6a:	685b      	ldr	r3, [r3, #4]
 8081a6c:	9301      	str	r3, [sp, #4]
 8081a6e:	bd08      	pop	{r3, pc}
 8081a70:	0804019c 	.word	0x0804019c

08081a74 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8081a74:	b508      	push	{r3, lr}
 8081a76:	4b02      	ldr	r3, [pc, #8]	; (8081a80 <HAL_Timer_Get_Milli_Seconds+0xc>)
 8081a78:	681b      	ldr	r3, [r3, #0]
 8081a7a:	695b      	ldr	r3, [r3, #20]
 8081a7c:	9301      	str	r3, [sp, #4]
 8081a7e:	bd08      	pop	{r3, pc}
 8081a80:	0804019c 	.word	0x0804019c

08081a84 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 8081a84:	b508      	push	{r3, lr}
 8081a86:	4b02      	ldr	r3, [pc, #8]	; (8081a90 <HAL_RTC_Get_UnixTime+0xc>)
 8081a88:	681b      	ldr	r3, [r3, #0]
 8081a8a:	69db      	ldr	r3, [r3, #28]
 8081a8c:	9301      	str	r3, [sp, #4]
 8081a8e:	bd08      	pop	{r3, pc}
 8081a90:	0804019c 	.word	0x0804019c

08081a94 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 8081a94:	b508      	push	{r3, lr}
 8081a96:	4b02      	ldr	r3, [pc, #8]	; (8081aa0 <HAL_RTC_Time_Is_Valid+0xc>)
 8081a98:	681b      	ldr	r3, [r3, #0]
 8081a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8081a9c:	9301      	str	r3, [sp, #4]
 8081a9e:	bd08      	pop	{r3, pc}
 8081aa0:	0804019c 	.word	0x0804019c

08081aa4 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 8081aa4:	b508      	push	{r3, lr}
 8081aa6:	4b02      	ldr	r3, [pc, #8]	; (8081ab0 <hal_timer_millis+0xc>)
 8081aa8:	681b      	ldr	r3, [r3, #0]
 8081aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8081aac:	9301      	str	r3, [sp, #4]
 8081aae:	bd08      	pop	{r3, pc}
 8081ab0:	0804019c 	.word	0x0804019c

08081ab4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 8081ab4:	b508      	push	{r3, lr}
 8081ab6:	4b02      	ldr	r3, [pc, #8]	; (8081ac0 <HAL_Pin_Map+0xc>)
 8081ab8:	681b      	ldr	r3, [r3, #0]
 8081aba:	681b      	ldr	r3, [r3, #0]
 8081abc:	9301      	str	r3, [sp, #4]
 8081abe:	bd08      	pop	{r3, pc}
 8081ac0:	080401b0 	.word	0x080401b0

08081ac4 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 8081ac4:	b508      	push	{r3, lr}
 8081ac6:	4b02      	ldr	r3, [pc, #8]	; (8081ad0 <HAL_Validate_Pin_Function+0xc>)
 8081ac8:	681b      	ldr	r3, [r3, #0]
 8081aca:	685b      	ldr	r3, [r3, #4]
 8081acc:	9301      	str	r3, [sp, #4]
 8081ace:	bd08      	pop	{r3, pc}
 8081ad0:	080401b0 	.word	0x080401b0

08081ad4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8081ad4:	b508      	push	{r3, lr}
 8081ad6:	4b02      	ldr	r3, [pc, #8]	; (8081ae0 <HAL_Pin_Mode+0xc>)
 8081ad8:	681b      	ldr	r3, [r3, #0]
 8081ada:	689b      	ldr	r3, [r3, #8]
 8081adc:	9301      	str	r3, [sp, #4]
 8081ade:	bd08      	pop	{r3, pc}
 8081ae0:	080401b0 	.word	0x080401b0

08081ae4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8081ae4:	b508      	push	{r3, lr}
 8081ae6:	4b02      	ldr	r3, [pc, #8]	; (8081af0 <HAL_Get_Pin_Mode+0xc>)
 8081ae8:	681b      	ldr	r3, [r3, #0]
 8081aea:	68db      	ldr	r3, [r3, #12]
 8081aec:	9301      	str	r3, [sp, #4]
 8081aee:	bd08      	pop	{r3, pc}
 8081af0:	080401b0 	.word	0x080401b0

08081af4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8081af4:	b508      	push	{r3, lr}
 8081af6:	4b02      	ldr	r3, [pc, #8]	; (8081b00 <HAL_GPIO_Write+0xc>)
 8081af8:	681b      	ldr	r3, [r3, #0]
 8081afa:	691b      	ldr	r3, [r3, #16]
 8081afc:	9301      	str	r3, [sp, #4]
 8081afe:	bd08      	pop	{r3, pc}
 8081b00:	080401b0 	.word	0x080401b0

08081b04 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 8081b04:	b508      	push	{r3, lr}
 8081b06:	4b02      	ldr	r3, [pc, #8]	; (8081b10 <HAL_GPIO_Read+0xc>)
 8081b08:	681b      	ldr	r3, [r3, #0]
 8081b0a:	695b      	ldr	r3, [r3, #20]
 8081b0c:	9301      	str	r3, [sp, #4]
 8081b0e:	bd08      	pop	{r3, pc}
 8081b10:	080401b0 	.word	0x080401b0

08081b14 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 8081b14:	b508      	push	{r3, lr}
 8081b16:	4b02      	ldr	r3, [pc, #8]	; (8081b20 <HAL_Interrupts_Attach+0xc>)
 8081b18:	681b      	ldr	r3, [r3, #0]
 8081b1a:	699b      	ldr	r3, [r3, #24]
 8081b1c:	9301      	str	r3, [sp, #4]
 8081b1e:	bd08      	pop	{r3, pc}
 8081b20:	080401b0 	.word	0x080401b0

08081b24 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
 8081b24:	b508      	push	{r3, lr}
 8081b26:	4b02      	ldr	r3, [pc, #8]	; (8081b30 <HAL_Interrupts_Detach+0xc>)
 8081b28:	681b      	ldr	r3, [r3, #0]
 8081b2a:	69db      	ldr	r3, [r3, #28]
 8081b2c:	9301      	str	r3, [sp, #4]
 8081b2e:	bd08      	pop	{r3, pc}
 8081b30:	080401b0 	.word	0x080401b0

08081b34 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 8081b34:	b508      	push	{r3, lr}
 8081b36:	4b02      	ldr	r3, [pc, #8]	; (8081b40 <HAL_ADC_Read+0xc>)
 8081b38:	681b      	ldr	r3, [r3, #0]
 8081b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081b3c:	9301      	str	r3, [sp, #4]
 8081b3e:	bd08      	pop	{r3, pc}
 8081b40:	080401b0 	.word	0x080401b0

08081b44 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 8081b44:	b508      	push	{r3, lr}
 8081b46:	4b02      	ldr	r3, [pc, #8]	; (8081b50 <HAL_I2C_Begin+0xc>)
 8081b48:	681b      	ldr	r3, [r3, #0]
 8081b4a:	68db      	ldr	r3, [r3, #12]
 8081b4c:	9301      	str	r3, [sp, #4]
 8081b4e:	bd08      	pop	{r3, pc}
 8081b50:	080401ac 	.word	0x080401ac

08081b54 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 8081b54:	b508      	push	{r3, lr}
 8081b56:	4b02      	ldr	r3, [pc, #8]	; (8081b60 <HAL_I2C_Request_Data+0xc>)
 8081b58:	681b      	ldr	r3, [r3, #0]
 8081b5a:	695b      	ldr	r3, [r3, #20]
 8081b5c:	9301      	str	r3, [sp, #4]
 8081b5e:	bd08      	pop	{r3, pc}
 8081b60:	080401ac 	.word	0x080401ac

08081b64 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 8081b64:	b508      	push	{r3, lr}
 8081b66:	4b02      	ldr	r3, [pc, #8]	; (8081b70 <HAL_I2C_Begin_Transmission+0xc>)
 8081b68:	681b      	ldr	r3, [r3, #0]
 8081b6a:	699b      	ldr	r3, [r3, #24]
 8081b6c:	9301      	str	r3, [sp, #4]
 8081b6e:	bd08      	pop	{r3, pc}
 8081b70:	080401ac 	.word	0x080401ac

08081b74 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 8081b74:	b508      	push	{r3, lr}
 8081b76:	4b02      	ldr	r3, [pc, #8]	; (8081b80 <HAL_I2C_End_Transmission+0xc>)
 8081b78:	681b      	ldr	r3, [r3, #0]
 8081b7a:	69db      	ldr	r3, [r3, #28]
 8081b7c:	9301      	str	r3, [sp, #4]
 8081b7e:	bd08      	pop	{r3, pc}
 8081b80:	080401ac 	.word	0x080401ac

08081b84 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 8081b84:	b508      	push	{r3, lr}
 8081b86:	4b02      	ldr	r3, [pc, #8]	; (8081b90 <HAL_I2C_Write_Data+0xc>)
 8081b88:	681b      	ldr	r3, [r3, #0]
 8081b8a:	6a1b      	ldr	r3, [r3, #32]
 8081b8c:	9301      	str	r3, [sp, #4]
 8081b8e:	bd08      	pop	{r3, pc}
 8081b90:	080401ac 	.word	0x080401ac

08081b94 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 8081b94:	b508      	push	{r3, lr}
 8081b96:	4b02      	ldr	r3, [pc, #8]	; (8081ba0 <HAL_I2C_Available_Data+0xc>)
 8081b98:	681b      	ldr	r3, [r3, #0]
 8081b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081b9c:	9301      	str	r3, [sp, #4]
 8081b9e:	bd08      	pop	{r3, pc}
 8081ba0:	080401ac 	.word	0x080401ac

08081ba4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 8081ba4:	b508      	push	{r3, lr}
 8081ba6:	4b02      	ldr	r3, [pc, #8]	; (8081bb0 <HAL_I2C_Read_Data+0xc>)
 8081ba8:	681b      	ldr	r3, [r3, #0]
 8081baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8081bac:	9301      	str	r3, [sp, #4]
 8081bae:	bd08      	pop	{r3, pc}
 8081bb0:	080401ac 	.word	0x080401ac

08081bb4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 8081bb4:	b508      	push	{r3, lr}
 8081bb6:	4b02      	ldr	r3, [pc, #8]	; (8081bc0 <HAL_I2C_Peek_Data+0xc>)
 8081bb8:	681b      	ldr	r3, [r3, #0]
 8081bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081bbc:	9301      	str	r3, [sp, #4]
 8081bbe:	bd08      	pop	{r3, pc}
 8081bc0:	080401ac 	.word	0x080401ac

08081bc4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 8081bc4:	b508      	push	{r3, lr}
 8081bc6:	4b02      	ldr	r3, [pc, #8]	; (8081bd0 <HAL_I2C_Flush_Data+0xc>)
 8081bc8:	681b      	ldr	r3, [r3, #0]
 8081bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081bcc:	9301      	str	r3, [sp, #4]
 8081bce:	bd08      	pop	{r3, pc}
 8081bd0:	080401ac 	.word	0x080401ac

08081bd4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 8081bd4:	b508      	push	{r3, lr}
 8081bd6:	4b02      	ldr	r3, [pc, #8]	; (8081be0 <HAL_I2C_Is_Enabled+0xc>)
 8081bd8:	681b      	ldr	r3, [r3, #0]
 8081bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081bdc:	9301      	str	r3, [sp, #4]
 8081bde:	bd08      	pop	{r3, pc}
 8081be0:	080401ac 	.word	0x080401ac

08081be4 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 8081be4:	b508      	push	{r3, lr}
 8081be6:	4b02      	ldr	r3, [pc, #8]	; (8081bf0 <HAL_I2C_Init+0xc>)
 8081be8:	681b      	ldr	r3, [r3, #0]
 8081bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081bec:	9301      	str	r3, [sp, #4]
 8081bee:	bd08      	pop	{r3, pc}
 8081bf0:	080401ac 	.word	0x080401ac

08081bf4 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
 8081bf4:	b508      	push	{r3, lr}
 8081bf6:	4b02      	ldr	r3, [pc, #8]	; (8081c00 <HAL_I2C_Acquire+0xc>)
 8081bf8:	681b      	ldr	r3, [r3, #0]
 8081bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8081bfc:	9301      	str	r3, [sp, #4]
 8081bfe:	bd08      	pop	{r3, pc}
 8081c00:	080401ac 	.word	0x080401ac

08081c04 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
 8081c04:	b508      	push	{r3, lr}
 8081c06:	4b02      	ldr	r3, [pc, #8]	; (8081c10 <HAL_I2C_Release+0xc>)
 8081c08:	681b      	ldr	r3, [r3, #0]
 8081c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8081c0c:	9301      	str	r3, [sp, #4]
 8081c0e:	bd08      	pop	{r3, pc}
 8081c10:	080401ac 	.word	0x080401ac

08081c14 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 8081c14:	b508      	push	{r3, lr}
 8081c16:	4b02      	ldr	r3, [pc, #8]	; (8081c20 <HAL_SPI_Init+0xc>)
 8081c18:	681b      	ldr	r3, [r3, #0]
 8081c1a:	69db      	ldr	r3, [r3, #28]
 8081c1c:	9301      	str	r3, [sp, #4]
 8081c1e:	bd08      	pop	{r3, pc}
 8081c20:	080401b4 	.word	0x080401b4

08081c24 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 8081c24:	b508      	push	{r3, lr}
 8081c26:	4b02      	ldr	r3, [pc, #8]	; (8081c30 <HAL_SPI_Is_Enabled+0xc>)
 8081c28:	681b      	ldr	r3, [r3, #0]
 8081c2a:	6a1b      	ldr	r3, [r3, #32]
 8081c2c:	9301      	str	r3, [sp, #4]
 8081c2e:	bd08      	pop	{r3, pc}
 8081c30:	080401b4 	.word	0x080401b4

08081c34 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 8081c34:	b508      	push	{r3, lr}
 8081c36:	4b02      	ldr	r3, [pc, #8]	; (8081c40 <HAL_USART_Init+0xc>)
 8081c38:	681b      	ldr	r3, [r3, #0]
 8081c3a:	699b      	ldr	r3, [r3, #24]
 8081c3c:	9301      	str	r3, [sp, #4]
 8081c3e:	bd08      	pop	{r3, pc}
 8081c40:	080401c4 	.word	0x080401c4

08081c44 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 8081c44:	b508      	push	{r3, lr}
 8081c46:	4b02      	ldr	r3, [pc, #8]	; (8081c50 <HAL_USART_Write_Data+0xc>)
 8081c48:	681b      	ldr	r3, [r3, #0]
 8081c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081c4c:	9301      	str	r3, [sp, #4]
 8081c4e:	bd08      	pop	{r3, pc}
 8081c50:	080401c4 	.word	0x080401c4

08081c54 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 8081c54:	b508      	push	{r3, lr}
 8081c56:	4b02      	ldr	r3, [pc, #8]	; (8081c60 <HAL_USART_Available_Data+0xc>)
 8081c58:	681b      	ldr	r3, [r3, #0]
 8081c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8081c5c:	9301      	str	r3, [sp, #4]
 8081c5e:	bd08      	pop	{r3, pc}
 8081c60:	080401c4 	.word	0x080401c4

08081c64 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 8081c64:	b508      	push	{r3, lr}
 8081c66:	4b02      	ldr	r3, [pc, #8]	; (8081c70 <HAL_USART_Read_Data+0xc>)
 8081c68:	681b      	ldr	r3, [r3, #0]
 8081c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081c6c:	9301      	str	r3, [sp, #4]
 8081c6e:	bd08      	pop	{r3, pc}
 8081c70:	080401c4 	.word	0x080401c4

08081c74 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 8081c74:	b508      	push	{r3, lr}
 8081c76:	4b02      	ldr	r3, [pc, #8]	; (8081c80 <HAL_USART_Peek_Data+0xc>)
 8081c78:	681b      	ldr	r3, [r3, #0]
 8081c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081c7c:	9301      	str	r3, [sp, #4]
 8081c7e:	bd08      	pop	{r3, pc}
 8081c80:	080401c4 	.word	0x080401c4

08081c84 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 8081c84:	b508      	push	{r3, lr}
 8081c86:	4b02      	ldr	r3, [pc, #8]	; (8081c90 <HAL_USART_Flush_Data+0xc>)
 8081c88:	681b      	ldr	r3, [r3, #0]
 8081c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081c8c:	9301      	str	r3, [sp, #4]
 8081c8e:	bd08      	pop	{r3, pc}
 8081c90:	080401c4 	.word	0x080401c4

08081c94 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 8081c94:	b508      	push	{r3, lr}
 8081c96:	4b02      	ldr	r3, [pc, #8]	; (8081ca0 <HAL_USART_Is_Enabled+0xc>)
 8081c98:	681b      	ldr	r3, [r3, #0]
 8081c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8081c9c:	9301      	str	r3, [sp, #4]
 8081c9e:	bd08      	pop	{r3, pc}
 8081ca0:	080401c4 	.word	0x080401c4

08081ca4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 8081ca4:	b508      	push	{r3, lr}
 8081ca6:	4b02      	ldr	r3, [pc, #8]	; (8081cb0 <HAL_USART_Available_Data_For_Write+0xc>)
 8081ca8:	681b      	ldr	r3, [r3, #0]
 8081caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081cac:	9301      	str	r3, [sp, #4]
 8081cae:	bd08      	pop	{r3, pc}
 8081cb0:	080401c4 	.word	0x080401c4

08081cb4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8081cb4:	b508      	push	{r3, lr}
 8081cb6:	4b02      	ldr	r3, [pc, #8]	; (8081cc0 <HAL_USB_USART_Init+0xc>)
 8081cb8:	681b      	ldr	r3, [r3, #0]
 8081cba:	681b      	ldr	r3, [r3, #0]
 8081cbc:	9301      	str	r3, [sp, #4]
 8081cbe:	bd08      	pop	{r3, pc}
 8081cc0:	0806001c 	.word	0x0806001c

08081cc4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8081cc4:	b508      	push	{r3, lr}
 8081cc6:	4b02      	ldr	r3, [pc, #8]	; (8081cd0 <HAL_USB_USART_Available_Data+0xc>)
 8081cc8:	681b      	ldr	r3, [r3, #0]
 8081cca:	691b      	ldr	r3, [r3, #16]
 8081ccc:	9301      	str	r3, [sp, #4]
 8081cce:	bd08      	pop	{r3, pc}
 8081cd0:	0806001c 	.word	0x0806001c

08081cd4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8081cd4:	b508      	push	{r3, lr}
 8081cd6:	4b02      	ldr	r3, [pc, #8]	; (8081ce0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8081cd8:	681b      	ldr	r3, [r3, #0]
 8081cda:	695b      	ldr	r3, [r3, #20]
 8081cdc:	9301      	str	r3, [sp, #4]
 8081cde:	bd08      	pop	{r3, pc}
 8081ce0:	0806001c 	.word	0x0806001c

08081ce4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081ce4:	b508      	push	{r3, lr}
 8081ce6:	4b02      	ldr	r3, [pc, #8]	; (8081cf0 <HAL_USB_USART_Receive_Data+0xc>)
 8081ce8:	681b      	ldr	r3, [r3, #0]
 8081cea:	699b      	ldr	r3, [r3, #24]
 8081cec:	9301      	str	r3, [sp, #4]
 8081cee:	bd08      	pop	{r3, pc}
 8081cf0:	0806001c 	.word	0x0806001c

08081cf4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081cf4:	b508      	push	{r3, lr}
 8081cf6:	4b02      	ldr	r3, [pc, #8]	; (8081d00 <HAL_USB_USART_Send_Data+0xc>)
 8081cf8:	681b      	ldr	r3, [r3, #0]
 8081cfa:	69db      	ldr	r3, [r3, #28]
 8081cfc:	9301      	str	r3, [sp, #4]
 8081cfe:	bd08      	pop	{r3, pc}
 8081d00:	0806001c 	.word	0x0806001c

08081d04 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8081d04:	b508      	push	{r3, lr}
 8081d06:	4b02      	ldr	r3, [pc, #8]	; (8081d10 <HAL_USB_USART_Flush_Data+0xc>)
 8081d08:	681b      	ldr	r3, [r3, #0]
 8081d0a:	6a1b      	ldr	r3, [r3, #32]
 8081d0c:	9301      	str	r3, [sp, #4]
 8081d0e:	bd08      	pop	{r3, pc}
 8081d10:	0806001c 	.word	0x0806001c

08081d14 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 8081d14:	b508      	push	{r3, lr}
 8081d16:	4b02      	ldr	r3, [pc, #8]	; (8081d20 <log_message_v+0xc>)
 8081d18:	681b      	ldr	r3, [r3, #0]
 8081d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8081d1c:	9301      	str	r3, [sp, #4]
 8081d1e:	bd08      	pop	{r3, pc}
 8081d20:	080201a0 	.word	0x080201a0

08081d24 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 8081d24:	b508      	push	{r3, lr}
 8081d26:	4b02      	ldr	r3, [pc, #8]	; (8081d30 <system_mode+0xc>)
 8081d28:	681b      	ldr	r3, [r3, #0]
 8081d2a:	681b      	ldr	r3, [r3, #0]
 8081d2c:	9301      	str	r3, [sp, #4]
 8081d2e:	bd08      	pop	{r3, pc}
 8081d30:	080401a4 	.word	0x080401a4

08081d34 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8081d34:	b508      	push	{r3, lr}
 8081d36:	4b02      	ldr	r3, [pc, #8]	; (8081d40 <set_system_mode+0xc>)
 8081d38:	681b      	ldr	r3, [r3, #0]
 8081d3a:	685b      	ldr	r3, [r3, #4]
 8081d3c:	9301      	str	r3, [sp, #4]
 8081d3e:	bd08      	pop	{r3, pc}
 8081d40:	080401a4 	.word	0x080401a4

08081d44 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8081d44:	b508      	push	{r3, lr}
 8081d46:	4b02      	ldr	r3, [pc, #8]	; (8081d50 <system_delay_ms+0xc>)
 8081d48:	681b      	ldr	r3, [r3, #0]
 8081d4a:	695b      	ldr	r3, [r3, #20]
 8081d4c:	9301      	str	r3, [sp, #4]
 8081d4e:	bd08      	pop	{r3, pc}
 8081d50:	080401a4 	.word	0x080401a4

08081d54 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
 8081d54:	b508      	push	{r3, lr}
 8081d56:	4b02      	ldr	r3, [pc, #8]	; (8081d60 <system_sleep+0xc>)
 8081d58:	681b      	ldr	r3, [r3, #0]
 8081d5a:	699b      	ldr	r3, [r3, #24]
 8081d5c:	9301      	str	r3, [sp, #4]
 8081d5e:	bd08      	pop	{r3, pc}
 8081d60:	080401a4 	.word	0x080401a4

08081d64 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 8081d64:	b508      	push	{r3, lr}
 8081d66:	4b02      	ldr	r3, [pc, #8]	; (8081d70 <system_thread_set_state+0xc>)
 8081d68:	681b      	ldr	r3, [r3, #0]
 8081d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081d6c:	9301      	str	r3, [sp, #4]
 8081d6e:	bd08      	pop	{r3, pc}
 8081d70:	080401a4 	.word	0x080401a4

08081d74 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8081d74:	b508      	push	{r3, lr}
 8081d76:	4b02      	ldr	r3, [pc, #8]	; (8081d80 <application_thread_current+0xc>)
 8081d78:	681b      	ldr	r3, [r3, #0]
 8081d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8081d7c:	9301      	str	r3, [sp, #4]
 8081d7e:	bd08      	pop	{r3, pc}
 8081d80:	080401a4 	.word	0x080401a4

08081d84 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8081d84:	b508      	push	{r3, lr}
 8081d86:	4b02      	ldr	r3, [pc, #8]	; (8081d90 <application_thread_invoke+0xc>)
 8081d88:	681b      	ldr	r3, [r3, #0]
 8081d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8081d8c:	9301      	str	r3, [sp, #4]
 8081d8e:	bd08      	pop	{r3, pc}
 8081d90:	080401a4 	.word	0x080401a4

08081d94 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8081d94:	b508      	push	{r3, lr}
 8081d96:	4b02      	ldr	r3, [pc, #8]	; (8081da0 <system_thread_get_state+0xc>)
 8081d98:	681b      	ldr	r3, [r3, #0]
 8081d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8081d9c:	9301      	str	r3, [sp, #4]
 8081d9e:	bd08      	pop	{r3, pc}
 8081da0:	080401a4 	.word	0x080401a4

08081da4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8081da4:	b508      	push	{r3, lr}
 8081da6:	4b03      	ldr	r3, [pc, #12]	; (8081db4 <system_ctrl_set_app_request_handler+0x10>)
 8081da8:	681b      	ldr	r3, [r3, #0]
 8081daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8081dae:	9301      	str	r3, [sp, #4]
 8081db0:	bd08      	pop	{r3, pc}
 8081db2:	0000      	.short	0x0000
 8081db4:	080401a4 	.word	0x080401a4

08081db8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8081db8:	b508      	push	{r3, lr}
 8081dba:	4b03      	ldr	r3, [pc, #12]	; (8081dc8 <system_ctrl_set_result+0x10>)
 8081dbc:	681b      	ldr	r3, [r3, #0]
 8081dbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8081dc2:	9301      	str	r3, [sp, #4]
 8081dc4:	bd08      	pop	{r3, pc}
 8081dc6:	0000      	.short	0x0000
 8081dc8:	080401a4 	.word	0x080401a4

08081dcc <system_sleep_pins>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
 8081dcc:	b508      	push	{r3, lr}
 8081dce:	4b03      	ldr	r3, [pc, #12]	; (8081ddc <system_sleep_pins+0x10>)
 8081dd0:	681b      	ldr	r3, [r3, #0]
 8081dd2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8081dd6:	9301      	str	r3, [sp, #4]
 8081dd8:	bd08      	pop	{r3, pc}
 8081dda:	0000      	.short	0x0000
 8081ddc:	080401a4 	.word	0x080401a4

08081de0 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 8081de0:	b508      	push	{r3, lr}
 8081de2:	4b02      	ldr	r3, [pc, #8]	; (8081dec <spark_variable+0xc>)
 8081de4:	681b      	ldr	r3, [r3, #0]
 8081de6:	681b      	ldr	r3, [r3, #0]
 8081de8:	9301      	str	r3, [sp, #4]
 8081dea:	bd08      	pop	{r3, pc}
 8081dec:	080401cc 	.word	0x080401cc

08081df0 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 8081df0:	b508      	push	{r3, lr}
 8081df2:	4b02      	ldr	r3, [pc, #8]	; (8081dfc <spark_function+0xc>)
 8081df4:	681b      	ldr	r3, [r3, #0]
 8081df6:	685b      	ldr	r3, [r3, #4]
 8081df8:	9301      	str	r3, [sp, #4]
 8081dfa:	bd08      	pop	{r3, pc}
 8081dfc:	080401cc 	.word	0x080401cc

08081e00 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8081e00:	b508      	push	{r3, lr}
 8081e02:	4b02      	ldr	r3, [pc, #8]	; (8081e0c <spark_process+0xc>)
 8081e04:	681b      	ldr	r3, [r3, #0]
 8081e06:	689b      	ldr	r3, [r3, #8]
 8081e08:	9301      	str	r3, [sp, #4]
 8081e0a:	bd08      	pop	{r3, pc}
 8081e0c:	080401cc 	.word	0x080401cc

08081e10 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 8081e10:	b508      	push	{r3, lr}
 8081e12:	4b02      	ldr	r3, [pc, #8]	; (8081e1c <spark_cloud_flag_connect+0xc>)
 8081e14:	681b      	ldr	r3, [r3, #0]
 8081e16:	68db      	ldr	r3, [r3, #12]
 8081e18:	9301      	str	r3, [sp, #4]
 8081e1a:	bd08      	pop	{r3, pc}
 8081e1c:	080401cc 	.word	0x080401cc

08081e20 <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
 8081e20:	b508      	push	{r3, lr}
 8081e22:	4b02      	ldr	r3, [pc, #8]	; (8081e2c <spark_cloud_flag_disconnect+0xc>)
 8081e24:	681b      	ldr	r3, [r3, #0]
 8081e26:	691b      	ldr	r3, [r3, #16]
 8081e28:	9301      	str	r3, [sp, #4]
 8081e2a:	bd08      	pop	{r3, pc}
 8081e2c:	080401cc 	.word	0x080401cc

08081e30 <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8081e30:	b508      	push	{r3, lr}
 8081e32:	4b02      	ldr	r3, [pc, #8]	; (8081e3c <spark_cloud_flag_connected+0xc>)
 8081e34:	681b      	ldr	r3, [r3, #0]
 8081e36:	695b      	ldr	r3, [r3, #20]
 8081e38:	9301      	str	r3, [sp, #4]
 8081e3a:	bd08      	pop	{r3, pc}
 8081e3c:	080401cc 	.word	0x080401cc

08081e40 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 8081e40:	b508      	push	{r3, lr}
 8081e42:	4b02      	ldr	r3, [pc, #8]	; (8081e4c <spark_deviceID+0xc>)
 8081e44:	681b      	ldr	r3, [r3, #0]
 8081e46:	69db      	ldr	r3, [r3, #28]
 8081e48:	9301      	str	r3, [sp, #4]
 8081e4a:	bd08      	pop	{r3, pc}
 8081e4c:	080401cc 	.word	0x080401cc

08081e50 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8081e50:	b508      	push	{r3, lr}
 8081e52:	4b02      	ldr	r3, [pc, #8]	; (8081e5c <spark_send_event+0xc>)
 8081e54:	681b      	ldr	r3, [r3, #0]
 8081e56:	6a1b      	ldr	r3, [r3, #32]
 8081e58:	9301      	str	r3, [sp, #4]
 8081e5a:	bd08      	pop	{r3, pc}
 8081e5c:	080401cc 	.word	0x080401cc

08081e60 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 8081e60:	b508      	push	{r3, lr}
 8081e62:	4b02      	ldr	r3, [pc, #8]	; (8081e6c <spark_subscribe+0xc>)
 8081e64:	681b      	ldr	r3, [r3, #0]
 8081e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081e68:	9301      	str	r3, [sp, #4]
 8081e6a:	bd08      	pop	{r3, pc}
 8081e6c:	080401cc 	.word	0x080401cc

08081e70 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8081e70:	b508      	push	{r3, lr}
 8081e72:	4b02      	ldr	r3, [pc, #8]	; (8081e7c <spark_sync_time_pending+0xc>)
 8081e74:	681b      	ldr	r3, [r3, #0]
 8081e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081e78:	9301      	str	r3, [sp, #4]
 8081e7a:	bd08      	pop	{r3, pc}
 8081e7c:	080401cc 	.word	0x080401cc

08081e80 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8081e80:	b508      	push	{r3, lr}
 8081e82:	4b02      	ldr	r3, [pc, #8]	; (8081e8c <spark_set_random_seed_from_cloud_handler+0xc>)
 8081e84:	681b      	ldr	r3, [r3, #0]
 8081e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8081e88:	9301      	str	r3, [sp, #4]
 8081e8a:	bd08      	pop	{r3, pc}
 8081e8c:	080401cc 	.word	0x080401cc

08081e90 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8081e90:	b508      	push	{r3, lr}
 8081e92:	4b02      	ldr	r3, [pc, #8]	; (8081e9c <network_connect+0xc>)
 8081e94:	681b      	ldr	r3, [r3, #0]
 8081e96:	685b      	ldr	r3, [r3, #4]
 8081e98:	9301      	str	r3, [sp, #4]
 8081e9a:	bd08      	pop	{r3, pc}
 8081e9c:	080401c8 	.word	0x080401c8

08081ea0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8081ea0:	b508      	push	{r3, lr}
 8081ea2:	4b02      	ldr	r3, [pc, #8]	; (8081eac <network_connecting+0xc>)
 8081ea4:	681b      	ldr	r3, [r3, #0]
 8081ea6:	689b      	ldr	r3, [r3, #8]
 8081ea8:	9301      	str	r3, [sp, #4]
 8081eaa:	bd08      	pop	{r3, pc}
 8081eac:	080401c8 	.word	0x080401c8

08081eb0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8081eb0:	b508      	push	{r3, lr}
 8081eb2:	4b02      	ldr	r3, [pc, #8]	; (8081ebc <network_disconnect+0xc>)
 8081eb4:	681b      	ldr	r3, [r3, #0]
 8081eb6:	68db      	ldr	r3, [r3, #12]
 8081eb8:	9301      	str	r3, [sp, #4]
 8081eba:	bd08      	pop	{r3, pc}
 8081ebc:	080401c8 	.word	0x080401c8

08081ec0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8081ec0:	b508      	push	{r3, lr}
 8081ec2:	4b02      	ldr	r3, [pc, #8]	; (8081ecc <network_ready+0xc>)
 8081ec4:	681b      	ldr	r3, [r3, #0]
 8081ec6:	691b      	ldr	r3, [r3, #16]
 8081ec8:	9301      	str	r3, [sp, #4]
 8081eca:	bd08      	pop	{r3, pc}
 8081ecc:	080401c8 	.word	0x080401c8

08081ed0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8081ed0:	b508      	push	{r3, lr}
 8081ed2:	4b02      	ldr	r3, [pc, #8]	; (8081edc <network_on+0xc>)
 8081ed4:	681b      	ldr	r3, [r3, #0]
 8081ed6:	695b      	ldr	r3, [r3, #20]
 8081ed8:	9301      	str	r3, [sp, #4]
 8081eda:	bd08      	pop	{r3, pc}
 8081edc:	080401c8 	.word	0x080401c8

08081ee0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8081ee0:	b508      	push	{r3, lr}
 8081ee2:	4b02      	ldr	r3, [pc, #8]	; (8081eec <network_off+0xc>)
 8081ee4:	681b      	ldr	r3, [r3, #0]
 8081ee6:	699b      	ldr	r3, [r3, #24]
 8081ee8:	9301      	str	r3, [sp, #4]
 8081eea:	bd08      	pop	{r3, pc}
 8081eec:	080401c8 	.word	0x080401c8

08081ef0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8081ef0:	b508      	push	{r3, lr}
 8081ef2:	4b02      	ldr	r3, [pc, #8]	; (8081efc <network_listen+0xc>)
 8081ef4:	681b      	ldr	r3, [r3, #0]
 8081ef6:	69db      	ldr	r3, [r3, #28]
 8081ef8:	9301      	str	r3, [sp, #4]
 8081efa:	bd08      	pop	{r3, pc}
 8081efc:	080401c8 	.word	0x080401c8

08081f00 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 8081f00:	b508      	push	{r3, lr}
 8081f02:	4b02      	ldr	r3, [pc, #8]	; (8081f0c <network_listening+0xc>)
 8081f04:	681b      	ldr	r3, [r3, #0]
 8081f06:	6a1b      	ldr	r3, [r3, #32]
 8081f08:	9301      	str	r3, [sp, #4]
 8081f0a:	bd08      	pop	{r3, pc}
 8081f0c:	080401c8 	.word	0x080401c8

08081f10 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8081f10:	b508      	push	{r3, lr}
 8081f12:	4b02      	ldr	r3, [pc, #8]	; (8081f1c <network_set_listen_timeout+0xc>)
 8081f14:	681b      	ldr	r3, [r3, #0]
 8081f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081f18:	9301      	str	r3, [sp, #4]
 8081f1a:	bd08      	pop	{r3, pc}
 8081f1c:	080401c8 	.word	0x080401c8

08081f20 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8081f20:	b508      	push	{r3, lr}
 8081f22:	4b02      	ldr	r3, [pc, #8]	; (8081f2c <network_get_listen_timeout+0xc>)
 8081f24:	681b      	ldr	r3, [r3, #0]
 8081f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081f28:	9301      	str	r3, [sp, #4]
 8081f2a:	bd08      	pop	{r3, pc}
 8081f2c:	080401c8 	.word	0x080401c8

08081f30 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8081f30:	b508      	push	{r3, lr}
 8081f32:	4b02      	ldr	r3, [pc, #8]	; (8081f3c <malloc+0xc>)
 8081f34:	681b      	ldr	r3, [r3, #0]
 8081f36:	681b      	ldr	r3, [r3, #0]
 8081f38:	9301      	str	r3, [sp, #4]
 8081f3a:	bd08      	pop	{r3, pc}
 8081f3c:	080401a0 	.word	0x080401a0

08081f40 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8081f40:	b508      	push	{r3, lr}
 8081f42:	4b02      	ldr	r3, [pc, #8]	; (8081f4c <free+0xc>)
 8081f44:	681b      	ldr	r3, [r3, #0]
 8081f46:	685b      	ldr	r3, [r3, #4]
 8081f48:	9301      	str	r3, [sp, #4]
 8081f4a:	bd08      	pop	{r3, pc}
 8081f4c:	080401a0 	.word	0x080401a0

08081f50 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8081f50:	b508      	push	{r3, lr}
 8081f52:	4b02      	ldr	r3, [pc, #8]	; (8081f5c <realloc+0xc>)
 8081f54:	681b      	ldr	r3, [r3, #0]
 8081f56:	689b      	ldr	r3, [r3, #8]
 8081f58:	9301      	str	r3, [sp, #4]
 8081f5a:	bd08      	pop	{r3, pc}
 8081f5c:	080401a0 	.word	0x080401a0

08081f60 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 8081f60:	b508      	push	{r3, lr}
 8081f62:	4b02      	ldr	r3, [pc, #8]	; (8081f6c <siprintf+0xc>)
 8081f64:	681b      	ldr	r3, [r3, #0]
 8081f66:	691b      	ldr	r3, [r3, #16]
 8081f68:	9301      	str	r3, [sp, #4]
 8081f6a:	bd08      	pop	{r3, pc}
 8081f6c:	080401a0 	.word	0x080401a0

08081f70 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 8081f70:	b508      	push	{r3, lr}
 8081f72:	4b02      	ldr	r3, [pc, #8]	; (8081f7c <siscanf+0xc>)
 8081f74:	681b      	ldr	r3, [r3, #0]
 8081f76:	699b      	ldr	r3, [r3, #24]
 8081f78:	9301      	str	r3, [sp, #4]
 8081f7a:	bd08      	pop	{r3, pc}
 8081f7c:	080401a0 	.word	0x080401a0

08081f80 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 8081f80:	b508      	push	{r3, lr}
 8081f82:	4b02      	ldr	r3, [pc, #8]	; (8081f8c <snprintf+0xc>)
 8081f84:	681b      	ldr	r3, [r3, #0]
 8081f86:	69db      	ldr	r3, [r3, #28]
 8081f88:	9301      	str	r3, [sp, #4]
 8081f8a:	bd08      	pop	{r3, pc}
 8081f8c:	080401a0 	.word	0x080401a0

08081f90 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8081f90:	b508      	push	{r3, lr}
 8081f92:	4b02      	ldr	r3, [pc, #8]	; (8081f9c <abort+0xc>)
 8081f94:	681b      	ldr	r3, [r3, #0]
 8081f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081f98:	9301      	str	r3, [sp, #4]
 8081f9a:	bd08      	pop	{r3, pc}
 8081f9c:	080401a0 	.word	0x080401a0

08081fa0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8081fa0:	b508      	push	{r3, lr}
 8081fa2:	4b02      	ldr	r3, [pc, #8]	; (8081fac <_malloc_r+0xc>)
 8081fa4:	681b      	ldr	r3, [r3, #0]
 8081fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081fa8:	9301      	str	r3, [sp, #4]
 8081faa:	bd08      	pop	{r3, pc}
 8081fac:	080401a0 	.word	0x080401a0

08081fb0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8081fb0:	2100      	movs	r1, #0
 8081fb2:	f7ff bec7 	b.w	8081d44 <system_delay_ms>

08081fb6 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8081fb6:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081fb8:	6883      	ldr	r3, [r0, #8]
 8081fba:	4604      	mov	r4, r0
 8081fbc:	b90b      	cbnz	r3, 8081fc2 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8081fbe:	f001 fd2a 	bl	8083a16 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081fc2:	68c3      	ldr	r3, [r0, #12]
 8081fc4:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8081fc6:	68a3      	ldr	r3, [r4, #8]
 8081fc8:	b11b      	cbz	r3, 8081fd2 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081fca:	2203      	movs	r2, #3
 8081fcc:	4621      	mov	r1, r4
 8081fce:	4620      	mov	r0, r4
 8081fd0:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8081fd2:	4620      	mov	r0, r4
}
 8081fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8081fd8:	f7fe b861 	b.w	808009e <_ZdlPv>

08081fdc <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8081fdc:	2200      	movs	r2, #0
 8081fde:	4611      	mov	r1, r2
 8081fe0:	6840      	ldr	r0, [r0, #4]
 8081fe2:	f7ff bf6d 	b.w	8081ec0 <network_ready>

08081fe6 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8081fe6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 8081fea:	2600      	movs	r6, #0
 8081fec:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8081fee:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8081ff0:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8081ff2:	4688      	mov	r8, r1
 8081ff4:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 8081ff6:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8081ffa:	f002 ff62 	bl	8084ec2 <strlen>
 8081ffe:	9600      	str	r6, [sp, #0]
 8082000:	b281      	uxth	r1, r0
 8082002:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8082006:	4622      	mov	r2, r4
 8082008:	4638      	mov	r0, r7
 808200a:	f7ff fcf3 	bl	80819f4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808200e:	b120      	cbz	r0, 808201a <_ZN5spark13CellularClass7resolveEPKc+0x34>
 8082010:	4631      	mov	r1, r6
 8082012:	4628      	mov	r0, r5
 8082014:	f000 fd38 	bl	8082a88 <_ZN9IPAddressC1Em>
 8082018:	e003      	b.n	8082022 <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 808201a:	4621      	mov	r1, r4
 808201c:	4628      	mov	r0, r5
 808201e:	f000 fd2b 	bl	8082a78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 8082022:	4628      	mov	r0, r5
 8082024:	b004      	add	sp, #16
 8082026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808202a <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 808202a:	2200      	movs	r2, #0
 808202c:	4611      	mov	r1, r2
 808202e:	6840      	ldr	r0, [r0, #4]
 8082030:	f7ff bf66 	b.w	8081f00 <network_listening>

08082034 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 8082034:	2200      	movs	r2, #0
 8082036:	4611      	mov	r1, r2
 8082038:	6840      	ldr	r0, [r0, #4]
 808203a:	f7ff bf71 	b.w	8081f20 <network_get_listen_timeout>

0808203e <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 808203e:	2200      	movs	r2, #0
 8082040:	6840      	ldr	r0, [r0, #4]
 8082042:	f7ff bf65 	b.w	8081f10 <network_set_listen_timeout>

08082046 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 8082046:	2200      	movs	r2, #0
 8082048:	f081 0101 	eor.w	r1, r1, #1
 808204c:	6840      	ldr	r0, [r0, #4]
 808204e:	f7ff bf4f 	b.w	8081ef0 <network_listen>

08082052 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8082052:	2300      	movs	r3, #0
 8082054:	461a      	mov	r2, r3
 8082056:	4619      	mov	r1, r3
 8082058:	6840      	ldr	r0, [r0, #4]
 808205a:	f7ff bf41 	b.w	8081ee0 <network_off>

0808205e <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 808205e:	2300      	movs	r3, #0
 8082060:	461a      	mov	r2, r3
 8082062:	4619      	mov	r1, r3
 8082064:	6840      	ldr	r0, [r0, #4]
 8082066:	f7ff bf33 	b.w	8081ed0 <network_on>

0808206a <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 808206a:	2200      	movs	r2, #0
 808206c:	4611      	mov	r1, r2
 808206e:	6840      	ldr	r0, [r0, #4]
 8082070:	f7ff bf16 	b.w	8081ea0 <network_connecting>

08082074 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8082074:	2200      	movs	r2, #0
 8082076:	2102      	movs	r1, #2
 8082078:	6840      	ldr	r0, [r0, #4]
 808207a:	f7ff bf19 	b.w	8081eb0 <network_disconnect>

0808207e <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 808207e:	2300      	movs	r3, #0
 8082080:	461a      	mov	r2, r3
 8082082:	6840      	ldr	r0, [r0, #4]
 8082084:	f7ff bf04 	b.w	8081e90 <network_connect>

08082088 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
 8082088:	b5f0      	push	{r4, r5, r6, r7, lr}
 808208a:	460f      	mov	r7, r1
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
 808208c:	4b1a      	ldr	r3, [pc, #104]	; (80820f8 <_ZN5spark13CellularClass4RSSIEv+0x70>)
 808208e:	2500      	movs	r5, #0
 8082090:	6003      	str	r3, [r0, #0]
 8082092:	2618      	movs	r6, #24
 8082094:	3328      	adds	r3, #40	; 0x28
 8082096:	b089      	sub	sp, #36	; 0x24
 8082098:	6043      	str	r3, [r0, #4]
 808209a:	6085      	str	r5, [r0, #8]
 808209c:	60c5      	str	r5, [r0, #12]
 808209e:	4632      	mov	r2, r6
 80820a0:	4629      	mov	r1, r5
 80820a2:	4604      	mov	r4, r0
 80820a4:	3010      	adds	r0, #16
 80820a6:	f002 feaf 	bl	8084e08 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 80820aa:	462a      	mov	r2, r5
 80820ac:	4629      	mov	r1, r5
 80820ae:	6878      	ldr	r0, [r7, #4]
 80820b0:	f7ff ff06 	bl	8081ec0 <network_ready>
 80820b4:	b908      	cbnz	r0, 80820ba <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
 80820b6:	60a0      	str	r0, [r4, #8]
            return sig;
 80820b8:	e01b      	b.n	80820f2 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
 80820ba:	4629      	mov	r1, r5
 80820bc:	4632      	mov	r2, r6
 80820be:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
 80820c0:	9500      	str	r5, [sp, #0]
 80820c2:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
 80820c4:	f002 fea0 	bl	8084e08 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 80820c8:	a902      	add	r1, sp, #8
 80820ca:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
 80820cc:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 80820d0:	f7ff fc98 	bl	8081a04 <cellular_signal>
 80820d4:	b110      	cbz	r0, 80820dc <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
 80820d6:	2301      	movs	r3, #1
 80820d8:	60a3      	str	r3, [r4, #8]
            return sig;
 80820da:	e00a      	b.n	80820f2 <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
 80820dc:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
 80820de:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
 80820e0:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
 80820e2:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
 80820e4:	b90b      	cbnz	r3, 80820ea <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
 80820e6:	2302      	movs	r3, #2
 80820e8:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
 80820ea:	a902      	add	r1, sp, #8
 80820ec:	4620      	mov	r0, r4
 80820ee:	f000 f89d 	bl	808222c <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
 80820f2:	4620      	mov	r0, r4
 80820f4:	b009      	add	sp, #36	; 0x24
 80820f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80820f8:	08085c48 	.word	0x08085c48

080820fc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 80820fc:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 80820fe:	4c0c      	ldr	r4, [pc, #48]	; (8082130 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
 8082100:	2528      	movs	r5, #40	; 0x28
 8082102:	462a      	mov	r2, r5
 8082104:	2100      	movs	r1, #0
 8082106:	4620      	mov	r0, r4
 8082108:	f002 fe7e 	bl	8084e08 <memset>
        cid = -1;
 808210c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8082110:	6063      	str	r3, [r4, #4]
        size = sizeof(*this);
 8082112:	8025      	strh	r5, [r4, #0]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8082114:	4c07      	ldr	r4, [pc, #28]	; (8082134 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
 8082116:	2304      	movs	r3, #4
{
    CellularDevice device;

public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8082118:	4620      	mov	r0, r4
 808211a:	6063      	str	r3, [r4, #4]
 808211c:	4b06      	ldr	r3, [pc, #24]	; (8082138 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x3c>)
    char imei[16];
    int dev;

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
 808211e:	252c      	movs	r5, #44	; 0x2c
 8082120:	f840 3b08 	str.w	r3, [r0], #8
 8082124:	462a      	mov	r2, r5
 8082126:	2100      	movs	r1, #0
 8082128:	f002 fe6e 	bl	8084e08 <memset>
        size = sizeof(*this);
 808212c:	8125      	strh	r5, [r4, #8]
 808212e:	bd38      	pop	{r3, r4, r5, pc}
 8082130:	2000061c 	.word	0x2000061c
 8082134:	200005e8 	.word	0x200005e8
 8082138:	08085c14 	.word	0x08085c14

0808213c <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 808213c:	4770      	bx	lr

0808213e <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
 808213e:	7d00      	ldrb	r0, [r0, #20]
 8082140:	4770      	bx	lr
	...

08082144 <_ZNK14CellularSignal16getStrengthValueEv>:

    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
 8082144:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
 8082146:	7d03      	ldrb	r3, [r0, #20]
 8082148:	b11b      	cbz	r3, 8082152 <_ZNK14CellularSignal16getStrengthValueEv+0xe>
 808214a:	6980      	ldr	r0, [r0, #24]
 808214c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8082150:	d101      	bne.n	8082156 <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
 8082152:	2000      	movs	r0, #0
 8082154:	bd08      	pop	{r3, pc}
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
 8082156:	f002 faa5 	bl	80846a4 <__aeabi_i2f>
 808215a:	4902      	ldr	r1, [pc, #8]	; (8082164 <_ZNK14CellularSignal16getStrengthValueEv+0x20>)
 808215c:	f002 fbaa 	bl	80848b4 <__aeabi_fdiv>
    }

    return 0.0f;
}
 8082160:	bd08      	pop	{r3, pc}
 8082162:	bf00      	nop
 8082164:	42c80000 	.word	0x42c80000

08082168 <_ZNK14CellularSignal15getQualityValueEv>:

    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
 8082168:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
 808216a:	7d03      	ldrb	r3, [r0, #20]
 808216c:	b11b      	cbz	r3, 8082176 <_ZNK14CellularSignal15getQualityValueEv+0xe>
 808216e:	6a00      	ldr	r0, [r0, #32]
 8082170:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8082174:	d101      	bne.n	808217a <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
 8082176:	2000      	movs	r0, #0
 8082178:	bd08      	pop	{r3, pc}
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
 808217a:	f002 fa93 	bl	80846a4 <__aeabi_i2f>
 808217e:	4902      	ldr	r1, [pc, #8]	; (8082188 <_ZNK14CellularSignal15getQualityValueEv+0x20>)
 8082180:	f002 fb98 	bl	80848b4 <__aeabi_fdiv>
    }

    return 0.0f;
}
 8082184:	bd08      	pop	{r3, pc}
 8082186:	bf00      	nop
 8082188:	42c80000 	.word	0x42c80000

0808218c <_ZNK14CellularSignal7printToER5Print>:

size_t CellularSignal::printTo(Print& p) const
{
 808218c:	b570      	push	{r4, r5, r6, lr}
 808218e:	460d      	mov	r5, r1
 8082190:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 8082192:	220a      	movs	r2, #10
 8082194:	6881      	ldr	r1, [r0, #8]
 8082196:	4628      	mov	r0, r5
 8082198:	f000 ff55 	bl	8083046 <_ZN5Print5printEii>
    n += p.print(',');
 808219c:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 808219e:	4604      	mov	r4, r0
    n += p.print(',');
 80821a0:	4628      	mov	r0, r5
 80821a2:	f000 fee9 	bl	8082f78 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
 80821a6:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
 80821a8:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
 80821aa:	68f1      	ldr	r1, [r6, #12]
 80821ac:	4628      	mov	r0, r5
 80821ae:	f000 ff4a 	bl	8083046 <_ZN5Print5printEii>
    return n;
}
 80821b2:	4420      	add	r0, r4
 80821b4:	bd70      	pop	{r4, r5, r6, pc}

080821b6 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
 80821b6:	f1a0 0004 	sub.w	r0, r0, #4
 80821ba:	f7ff bfe7 	b.w	808218c <_ZNK14CellularSignal7printToER5Print>

080821be <_ZN14CellularSignalD0Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 80821be:	b510      	push	{r4, lr}
 80821c0:	4604      	mov	r4, r0
 80821c2:	f7fd ff6c 	bl	808009e <_ZdlPv>
 80821c6:	4620      	mov	r0, r4
 80821c8:	bd10      	pop	{r4, pc}
	...

080821cc <_ZNK14CellularSignal10getQualityEv>:

    return 0.0f;
}

float CellularSignal::getQuality() const
{
 80821cc:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
 80821ce:	7d03      	ldrb	r3, [r0, #20]
 80821d0:	b15b      	cbz	r3, 80821ea <_ZNK14CellularSignal10getQualityEv+0x1e>
 80821d2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80821d4:	2800      	cmp	r0, #0
 80821d6:	db08      	blt.n	80821ea <_ZNK14CellularSignal10getQualityEv+0x1e>
        return (float)sig_.quality / 65535.0f * 100.0f;
 80821d8:	f002 fa64 	bl	80846a4 <__aeabi_i2f>
 80821dc:	4904      	ldr	r1, [pc, #16]	; (80821f0 <_ZNK14CellularSignal10getQualityEv+0x24>)
 80821de:	f002 fb69 	bl	80848b4 <__aeabi_fdiv>
 80821e2:	4904      	ldr	r1, [pc, #16]	; (80821f4 <_ZNK14CellularSignal10getQualityEv+0x28>)
 80821e4:	f002 fab2 	bl	808474c <__aeabi_fmul>
 80821e8:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 80821ea:	4803      	ldr	r0, [pc, #12]	; (80821f8 <_ZNK14CellularSignal10getQualityEv+0x2c>)
}
 80821ec:	bd08      	pop	{r3, pc}
 80821ee:	bf00      	nop
 80821f0:	477fff00 	.word	0x477fff00
 80821f4:	42c80000 	.word	0x42c80000
 80821f8:	bf800000 	.word	0xbf800000

080821fc <_ZNK14CellularSignal11getStrengthEv>:
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
 80821fc:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
 80821fe:	7d03      	ldrb	r3, [r0, #20]
 8082200:	b15b      	cbz	r3, 808221a <_ZNK14CellularSignal11getStrengthEv+0x1e>
 8082202:	69c0      	ldr	r0, [r0, #28]
 8082204:	2800      	cmp	r0, #0
 8082206:	db08      	blt.n	808221a <_ZNK14CellularSignal11getStrengthEv+0x1e>
        return (float)sig_.strength / 65535.0f * 100.0f;
 8082208:	f002 fa4c 	bl	80846a4 <__aeabi_i2f>
 808220c:	4904      	ldr	r1, [pc, #16]	; (8082220 <_ZNK14CellularSignal11getStrengthEv+0x24>)
 808220e:	f002 fb51 	bl	80848b4 <__aeabi_fdiv>
 8082212:	4904      	ldr	r1, [pc, #16]	; (8082224 <_ZNK14CellularSignal11getStrengthEv+0x28>)
 8082214:	f002 fa9a 	bl	808474c <__aeabi_fmul>
 8082218:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 808221a:	4803      	ldr	r0, [pc, #12]	; (8082228 <_ZNK14CellularSignal11getStrengthEv+0x2c>)
}
 808221c:	bd08      	pop	{r3, pc}
 808221e:	bf00      	nop
 8082220:	477fff00 	.word	0x477fff00
 8082224:	42c80000 	.word	0x42c80000
 8082228:	bf800000 	.word	0xbf800000

0808222c <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
 808222c:	b530      	push	{r4, r5, lr}
    sig_ = sig;
 808222e:	460d      	mov	r5, r1
 8082230:	f100 0410 	add.w	r4, r0, #16
 8082234:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8082236:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8082238:	e895 0003 	ldmia.w	r5, {r0, r1}
 808223c:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
 8082240:	2001      	movs	r0, #1
 8082242:	bd30      	pop	{r4, r5, pc}

08082244 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8082244:	4770      	bx	lr

08082246 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 8082246:	2000      	movs	r0, #0
 8082248:	4770      	bx	lr

0808224a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808224a:	b510      	push	{r4, lr}
 808224c:	4604      	mov	r4, r0
 808224e:	f7fd ff26 	bl	808009e <_ZdlPv>
 8082252:	4620      	mov	r0, r4
 8082254:	bd10      	pop	{r4, pc}

08082256 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 8082256:	b508      	push	{r3, lr}
      { delete this; }
 8082258:	b108      	cbz	r0, 808225e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 808225a:	f7ff fff6 	bl	808224a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 808225e:	bd08      	pop	{r3, pc}

08082260 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 8082260:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8082262:	68c4      	ldr	r4, [r0, #12]
 8082264:	b1d4      	cbz	r4, 808229c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 8082266:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8082268:	2b02      	cmp	r3, #2
 808226a:	d102      	bne.n	8082272 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 808226c:	68e0      	ldr	r0, [r4, #12]
 808226e:	f7ff fe67 	bl	8081f40 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 8082272:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 8082274:	b12d      	cbz	r5, 8082282 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082276:	4628      	mov	r0, r5
 8082278:	f7ff fa3e 	bl	80816f8 <_ZNSt14_Function_baseD1Ev>
 808227c:	4628      	mov	r0, r5
 808227e:	f7fd ff0e 	bl	808009e <_ZdlPv>
 8082282:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8082284:	b12d      	cbz	r5, 8082292 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
 8082286:	4628      	mov	r0, r5
 8082288:	f7ff fa36 	bl	80816f8 <_ZNSt14_Function_baseD1Ev>
 808228c:	4628      	mov	r0, r5
 808228e:	f7fd ff06 	bl	808009e <_ZdlPv>
 8082292:	4620      	mov	r0, r4
 8082294:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8082298:	f7fd bf01 	b.w	808009e <_ZdlPv>
 808229c:	bd38      	pop	{r3, r4, r5, pc}

0808229e <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}
#endif
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 808229e:	b510      	push	{r4, lr}
 80822a0:	b088      	sub	sp, #32
 80822a2:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80822a4:	4668      	mov	r0, sp
 80822a6:	f000 ff4b 	bl	8083140 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80822aa:	4669      	mov	r1, sp
 80822ac:	a804      	add	r0, sp, #16
 80822ae:	f000 ff69 	bl	8083184 <_ZN6StringC1ERKS_>
 80822b2:	a804      	add	r0, sp, #16
 80822b4:	47a0      	blx	r4
 80822b6:	4604      	mov	r4, r0
 80822b8:	a804      	add	r0, sp, #16
 80822ba:	f000 fefa 	bl	80830b2 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80822be:	4668      	mov	r0, sp
 80822c0:	f000 fef7 	bl	80830b2 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80822c4:	4620      	mov	r0, r4
 80822c6:	b008      	add	sp, #32
 80822c8:	bd10      	pop	{r4, pc}

080822ca <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80822ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80822cc:	4607      	mov	r7, r0
 80822ce:	460e      	mov	r6, r1
 80822d0:	4615      	mov	r5, r2
 80822d2:	b085      	sub	sp, #20
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
 80822d4:	2410      	movs	r4, #16
 80822d6:	4622      	mov	r2, r4
 80822d8:	2100      	movs	r1, #0
 80822da:	4668      	mov	r0, sp
 80822dc:	f002 fd94 	bl	8084e08 <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80822e0:	2200      	movs	r2, #0
 80822e2:	4669      	mov	r1, sp
 80822e4:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
 80822e6:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
 80822ea:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80822ec:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80822ee:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80822f0:	f7ff fd7e 	bl	8081df0 <spark_function>
}
 80822f4:	b005      	add	sp, #20
 80822f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080822f8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80822f8:	b513      	push	{r0, r1, r4, lr}
 80822fa:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80822fc:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 8082300:	2300      	movs	r3, #0
 8082302:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8082304:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8082306:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 8082308:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808230a:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 808230c:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 808230e:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8082310:	f7fe f9ec 	bl	80806ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8082314:	4620      	mov	r0, r4
 8082316:	b002      	add	sp, #8
 8082318:	bd10      	pop	{r4, pc}

0808231a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 808231a:	680b      	ldr	r3, [r1, #0]
 808231c:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 808231e:	b113      	cbz	r3, 8082326 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8082320:	685a      	ldr	r2, [r3, #4]
 8082322:	3201      	adds	r2, #1
 8082324:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 8082326:	4770      	bx	lr

08082328 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8082328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 808232a:	460c      	mov	r4, r1
 808232c:	4606      	mov	r6, r0
 808232e:	460f      	mov	r7, r1
 8082330:	f854 3b04 	ldr.w	r3, [r4], #4
 8082334:	ad02      	add	r5, sp, #8
 8082336:	f845 3d08 	str.w	r3, [r5, #-8]!
 808233a:	4621      	mov	r1, r4
 808233c:	a801      	add	r0, sp, #4
 808233e:	f7ff ffec 	bl	808231a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 8082342:	4629      	mov	r1, r5
 8082344:	4630      	mov	r0, r6
 8082346:	f7ff ffd7 	bl	80822f8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808234a:	a801      	add	r0, sp, #4
 808234c:	f7fe f9ce 	bl	80806ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8082350:	4620      	mov	r0, r4
 8082352:	f7fe f9cb 	bl	80806ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 8082356:	4638      	mov	r0, r7
 8082358:	f7fd fea1 	bl	808009e <_ZdlPv>
        return p;
    }
 808235c:	4630      	mov	r0, r6
 808235e:	b003      	add	sp, #12
 8082360:	bdf0      	pop	{r4, r5, r6, r7, pc}

08082362 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 8082362:	b513      	push	{r0, r1, r4, lr}
 8082364:	460b      	mov	r3, r1
 8082366:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082368:	c803      	ldmia	r0, {r0, r1}
 808236a:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 808236e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8082372:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8082376:	e89d 0003 	ldmia.w	sp, {r0, r1}
 808237a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 808237e:	b002      	add	sp, #8
 8082380:	bd10      	pop	{r4, pc}

08082382 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082382:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8082384:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082386:	b90a      	cbnz	r2, 808238c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8082388:	f001 fb45 	bl	8083a16 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808238c:	68c3      	ldr	r3, [r0, #12]
    }
 808238e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082392:	4718      	bx	r3

08082394 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8082394:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8082396:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8082398:	f100 0110 	add.w	r1, r0, #16
 808239c:	f7ff fff1 	bl	8082382 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80823a0:	bd08      	pop	{r3, pc}

080823a2 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80823a2:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80823a4:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80823a6:	b90a      	cbnz	r2, 80823ac <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80823a8:	f001 fb35 	bl	8083a16 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80823ac:	68c3      	ldr	r3, [r0, #12]
    }
 80823ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80823b2:	4718      	bx	r3

080823b4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80823b4:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80823b6:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80823b8:	f100 0110 	add.w	r1, r0, #16
 80823bc:	f7ff fff1 	bl	80823a2 <_ZNKSt8functionIFvRKbEEclES1_>
 80823c0:	bd08      	pop	{r3, pc}

080823c2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80823c2:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80823c4:	2300      	movs	r3, #0
 80823c6:	6083      	str	r3, [r0, #8]
 80823c8:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80823ca:	4604      	mov	r4, r0
 80823cc:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80823ce:	b12b      	cbz	r3, 80823dc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80823d0:	2202      	movs	r2, #2
 80823d2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80823d4:	68eb      	ldr	r3, [r5, #12]
 80823d6:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80823d8:	68ab      	ldr	r3, [r5, #8]
 80823da:	60a3      	str	r3, [r4, #8]
	}
    }
 80823dc:	4620      	mov	r0, r4
 80823de:	bd38      	pop	{r3, r4, r5, pc}

080823e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80823e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 80823e4:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80823e8:	6804      	ldr	r4, [r0, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80823ea:	f04f 0002 	mov.w	r0, #2
 80823ee:	b086      	sub	sp, #24
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80823f0:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80823f4:	808b      	strh	r3, [r1, #4]
 80823f6:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80823f8:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80823fa:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
 80823fe:	600b      	str	r3, [r1, #0]
 8082400:	e8d4 1f4f 	ldrexb	r1, [r4]
 8082404:	4299      	cmp	r1, r3
 8082406:	d103      	bne.n	8082410 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
 8082408:	e8c4 0f45 	strexb	r5, r0, [r4]
 808240c:	2d00      	cmp	r5, #0
 808240e:	d1f7      	bne.n	8082400 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 8082410:	d002      	beq.n	8082418 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
 8082412:	f88d 1000 	strb.w	r1, [sp]
 8082416:	e06b      	b.n	80824f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 8082418:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808241c:	bf1c      	itt	ne
 808241e:	60e7      	strne	r7, [r4, #12]
 8082420:	8222      	strhne	r2, [r4, #16]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8082422:	f3bf 8f5f 	dmb	sy
      __b = _GLIBCXX_MOVE(__tmp);
 8082426:	bf18      	it	ne
 8082428:	461f      	movne	r7, r3
 808242a:	2301      	movs	r3, #1
 808242c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 808242e:	f3bf 8f5f 	dmb	sy
 8082432:	f104 0308 	add.w	r3, r4, #8
 8082436:	2000      	movs	r0, #0
 8082438:	e853 6f00 	ldrex	r6, [r3]
 808243c:	e843 0200 	strex	r2, r0, [r3]
 8082440:	2a00      	cmp	r2, #0
 8082442:	d1f9      	bne.n	8082438 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 8082444:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8082448:	2e00      	cmp	r6, #0
 808244a:	d051      	beq.n	80824f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 808244c:	f7ff fc92 	bl	8081d74 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8082450:	b120      	cbz	r0, 808245c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7c>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8082452:	4629      	mov	r1, r5
 8082454:	4630      	mov	r0, r6
 8082456:	f7ff ff94 	bl	8082382 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 808245a:	e043      	b.n	80824e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 808245c:	4631      	mov	r1, r6
 808245e:	4668      	mov	r0, sp
 8082460:	f7ff ffaf 	bl	80823c2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8082464:	68e0      	ldr	r0, [r4, #12]
 8082466:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 808246a:	b108      	cbz	r0, 8082470 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x90>
 808246c:	f002 fd0e 	bl	8084e8c <strdup>
 8082470:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8082472:	2010      	movs	r0, #16
 8082474:	f8ad 5014 	strh.w	r5, [sp, #20]
 8082478:	f7fd fe0f 	bl	808009a <_Znwj>
 808247c:	4605      	mov	r5, r0
 808247e:	b330      	cbz	r0, 80824ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xee>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082480:	f04f 0800 	mov.w	r8, #0
 8082484:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082488:	2018      	movs	r0, #24
 808248a:	f7fd fe06 	bl	808009a <_Znwj>
 808248e:	4604      	mov	r4, r0
 8082490:	b1c0      	cbz	r0, 80824c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe4>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082492:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8082496:	4601      	mov	r1, r0
 8082498:	4668      	mov	r0, sp
 808249a:	f7ff ff62 	bl	8082362 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808249e:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 80824a0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80824a2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80824a4:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80824a6:	9202      	str	r2, [sp, #8]
 80824a8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80824aa:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80824ac:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80824b0:	9203      	str	r2, [sp, #12]
 80824b2:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 80824b4:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80824b8:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80824bc:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80824be:	f8cd 8010 	str.w	r8, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80824c2:	6123      	str	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80824c4:	4b0d      	ldr	r3, [pc, #52]	; (80824fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80824c6:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80824c8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80824ca:	4b0d      	ldr	r3, [pc, #52]	; (8082500 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
 80824cc:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80824ce:	9804      	ldr	r0, [sp, #16]
 80824d0:	f7ff fd36 	bl	8081f40 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80824d4:	4668      	mov	r0, sp
 80824d6:	f7ff f90f 	bl	80816f8 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80824da:	2200      	movs	r2, #0
 80824dc:	4629      	mov	r1, r5
 80824de:	4809      	ldr	r0, [pc, #36]	; (8082504 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
 80824e0:	f7ff fc50 	bl	8081d84 <application_thread_invoke>
 80824e4:	4630      	mov	r0, r6
 80824e6:	f7ff f907 	bl	80816f8 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80824ea:	4630      	mov	r0, r6
 80824ec:	f7fd fdd7 	bl	808009e <_ZdlPv>
 80824f0:	4638      	mov	r0, r7
 80824f2:	f7ff fd25 	bl	8081f40 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
 80824f6:	b006      	add	sp, #24
 80824f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80824fc:	08082395 	.word	0x08082395
 8082500:	080825f1 	.word	0x080825f1
 8082504:	08081fb7 	.word	0x08081fb7

08082508 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8082508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808250c:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 808250e:	ad07      	add	r5, sp, #28
 8082510:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8082514:	4606      	mov	r6, r0
 8082516:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8082518:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 808251a:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 808251c:	460f      	mov	r7, r1
 808251e:	4690      	mov	r8, r2
 8082520:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8082524:	f8c5 b004 	str.w	fp, [r5, #4]
 8082528:	f8c5 b008 	str.w	fp, [r5, #8]
 808252c:	9307      	str	r3, [sp, #28]
 808252e:	f7fd fdb4 	bl	808009a <_Znwj>
 8082532:	4604      	mov	r4, r0
 8082534:	b138      	cbz	r0, 8082546 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8082536:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808253a:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808253e:	f8c0 b004 	str.w	fp, [r0, #4]
 8082542:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8082546:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8082548:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 808254a:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 808254c:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808254e:	f7fd fda4 	bl	808009a <_Znwj>
 8082552:	b128      	cbz	r0, 8082560 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 8082554:	2301      	movs	r3, #1
 8082556:	6043      	str	r3, [r0, #4]
 8082558:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 808255a:	4b23      	ldr	r3, [pc, #140]	; (80825e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
 808255c:	60c4      	str	r4, [r0, #12]
 808255e:	6003      	str	r3, [r0, #0]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 8082560:	4b22      	ldr	r3, [pc, #136]	; (80825ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8082562:	9004      	str	r0, [sp, #16]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8082564:	2008      	movs	r0, #8
 8082566:	9308      	str	r3, [sp, #32]
 8082568:	f7fd fd97 	bl	808009a <_Znwj>
 808256c:	4604      	mov	r4, r0
 808256e:	b128      	cbz	r0, 808257c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8082570:	9b03      	ldr	r3, [sp, #12]
 8082572:	a904      	add	r1, sp, #16
 8082574:	f840 3b04 	str.w	r3, [r0], #4
 8082578:	f7ff fecf 	bl	808231a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808257c:	9500      	str	r5, [sp, #0]
 808257e:	fa5f f38a 	uxtb.w	r3, sl
 8082582:	464a      	mov	r2, r9
 8082584:	4641      	mov	r1, r8
 8082586:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 8082588:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808258a:	f7ff fc61 	bl	8081e50 <spark_send_event>
 808258e:	b9b8      	cbnz	r0, 80825c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8082590:	9b03      	ldr	r3, [sp, #12]
 8082592:	785b      	ldrb	r3, [r3, #1]
 8082594:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8082598:	b993      	cbnz	r3, 80825c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 808259a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 808259e:	a905      	add	r1, sp, #20
 80825a0:	a803      	add	r0, sp, #12
 80825a2:	9205      	str	r2, [sp, #20]
 80825a4:	f8ad 3018 	strh.w	r3, [sp, #24]
 80825a8:	f7ff ff1a 	bl	80823e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80825ac:	9805      	ldr	r0, [sp, #20]
 80825ae:	f7ff fcc7 	bl	8081f40 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80825b2:	a805      	add	r0, sp, #20
 80825b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80825b6:	f7ff feb7 	bl	8082328 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80825ba:	a806      	add	r0, sp, #24
 80825bc:	f7fe f896 	bl	80806ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80825c0:	9b03      	ldr	r3, [sp, #12]
 80825c2:	a904      	add	r1, sp, #16
 80825c4:	a806      	add	r0, sp, #24
 80825c6:	9305      	str	r3, [sp, #20]
 80825c8:	f7ff fea7 	bl	808231a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80825cc:	a905      	add	r1, sp, #20
 80825ce:	4630      	mov	r0, r6
 80825d0:	f7ff fe92 	bl	80822f8 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80825d4:	a806      	add	r0, sp, #24
 80825d6:	f7fe f889 	bl	80806ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80825da:	a804      	add	r0, sp, #16
 80825dc:	f7fe f886 	bl	80806ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80825e0:	4630      	mov	r0, r6
 80825e2:	b00b      	add	sp, #44	; 0x2c
 80825e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80825e8:	08085c7c 	.word	0x08085c7c
 80825ec:	08082759 	.word	0x08082759

080825f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80825f0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80825f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80825f4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80825f6:	d006      	beq.n	8082606 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80825f8:	2a03      	cmp	r2, #3
 80825fa:	d017      	beq.n	808262c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80825fc:	2a01      	cmp	r2, #1
 80825fe:	d120      	bne.n	8082642 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8082600:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8082602:	6003      	str	r3, [r0, #0]
	      break;
 8082604:	e01d      	b.n	8082642 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8082606:	2018      	movs	r0, #24
 8082608:	680e      	ldr	r6, [r1, #0]
 808260a:	f7fd fd46 	bl	808009a <_Znwj>
 808260e:	4605      	mov	r5, r0
 8082610:	b150      	cbz	r0, 8082628 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8082612:	4631      	mov	r1, r6
 8082614:	f7ff fed5 	bl	80823c2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8082618:	6930      	ldr	r0, [r6, #16]
 808261a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 808261e:	b108      	cbz	r0, 8082624 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 8082620:	f002 fc34 	bl	8084e8c <strdup>
 8082624:	6128      	str	r0, [r5, #16]
 8082626:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8082628:	6025      	str	r5, [r4, #0]
 808262a:	e00a      	b.n	8082642 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808262c:	6804      	ldr	r4, [r0, #0]
 808262e:	b144      	cbz	r4, 8082642 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8082630:	6920      	ldr	r0, [r4, #16]
 8082632:	f7ff fc85 	bl	8081f40 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082636:	4620      	mov	r0, r4
 8082638:	f7ff f85e 	bl	80816f8 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808263c:	4620      	mov	r0, r4
 808263e:	f7fd fd2e 	bl	808009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8082642:	2000      	movs	r0, #0
 8082644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082646 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8082646:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082648:	2300      	movs	r3, #0
 808264a:	6083      	str	r3, [r0, #8]
 808264c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808264e:	4604      	mov	r4, r0
 8082650:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8082652:	b12b      	cbz	r3, 8082660 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8082654:	2202      	movs	r2, #2
 8082656:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8082658:	68eb      	ldr	r3, [r5, #12]
 808265a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 808265c:	68ab      	ldr	r3, [r5, #8]
 808265e:	60a3      	str	r3, [r4, #8]
	}
    }
 8082660:	4620      	mov	r0, r4
 8082662:	bd38      	pop	{r3, r4, r5, pc}

08082664 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8082664:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8082666:	b570      	push	{r4, r5, r6, lr}
 8082668:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 808266a:	d006      	beq.n	808267a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 808266c:	2a03      	cmp	r2, #3
 808266e:	d011      	beq.n	8082694 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 8082670:	2a01      	cmp	r2, #1
 8082672:	d117      	bne.n	80826a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8082674:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8082676:	6003      	str	r3, [r0, #0]
	      break;
 8082678:	e014      	b.n	80826a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 808267a:	2014      	movs	r0, #20
 808267c:	680e      	ldr	r6, [r1, #0]
 808267e:	f7fd fd0c 	bl	808009a <_Znwj>
 8082682:	4605      	mov	r5, r0
 8082684:	b120      	cbz	r0, 8082690 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8082686:	4631      	mov	r1, r6
 8082688:	f7ff ffdd 	bl	8082646 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 808268c:	7c33      	ldrb	r3, [r6, #16]
 808268e:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8082690:	6025      	str	r5, [r4, #0]
 8082692:	e007      	b.n	80826a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8082694:	6804      	ldr	r4, [r0, #0]
 8082696:	b12c      	cbz	r4, 80826a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082698:	4620      	mov	r0, r4
 808269a:	f7ff f82d 	bl	80816f8 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808269e:	4620      	mov	r0, r4
 80826a0:	f7fd fcfd 	bl	808009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80826a4:	2000      	movs	r0, #0
 80826a6:	bd70      	pop	{r4, r5, r6, pc}

080826a8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80826a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80826aa:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80826ac:	f3bf 8f5f 	dmb	sy
 80826b0:	b087      	sub	sp, #28
 80826b2:	2300      	movs	r3, #0
 80826b4:	e850 6f00 	ldrex	r6, [r0]
 80826b8:	e840 3200 	strex	r2, r3, [r0]
 80826bc:	2a00      	cmp	r2, #0
 80826be:	d1f9      	bne.n	80826b4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80826c0:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80826c4:	2e00      	cmp	r6, #0
 80826c6:	d03e      	beq.n	8082746 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80826c8:	4618      	mov	r0, r3
 80826ca:	f7ff fb53 	bl	8081d74 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80826ce:	4607      	mov	r7, r0
 80826d0:	b120      	cbz	r0, 80826dc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80826d2:	4621      	mov	r1, r4
 80826d4:	4630      	mov	r0, r6
 80826d6:	f7ff fe64 	bl	80823a2 <_ZNKSt8functionIFvRKbEEclES1_>
 80826da:	e02e      	b.n	808273a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80826dc:	4631      	mov	r1, r6
 80826de:	a801      	add	r0, sp, #4
 80826e0:	f7ff ffb1 	bl	8082646 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80826e4:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80826e6:	2010      	movs	r0, #16
 80826e8:	f88d 3014 	strb.w	r3, [sp, #20]
 80826ec:	f7fd fcd5 	bl	808009a <_Znwj>
 80826f0:	4605      	mov	r5, r0
 80826f2:	b1d0      	cbz	r0, 808272a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80826f4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80826f6:	2014      	movs	r0, #20
 80826f8:	f7fd fccf 	bl	808009a <_Znwj>
 80826fc:	4604      	mov	r4, r0
 80826fe:	b178      	cbz	r0, 8082720 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082700:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8082702:	4601      	mov	r1, r0
 8082704:	a801      	add	r0, sp, #4
 8082706:	f7ff fe2c 	bl	8082362 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808270a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 808270c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808270e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082710:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8082712:	9203      	str	r2, [sp, #12]
 8082714:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8082716:	60e3      	str	r3, [r4, #12]
 8082718:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808271c:	9204      	str	r2, [sp, #16]
 808271e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082720:	4b0a      	ldr	r3, [pc, #40]	; (808274c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082722:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082724:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8082726:	4b0a      	ldr	r3, [pc, #40]	; (8082750 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 8082728:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808272a:	a801      	add	r0, sp, #4
 808272c:	f7fe ffe4 	bl	80816f8 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8082730:	2200      	movs	r2, #0
 8082732:	4629      	mov	r1, r5
 8082734:	4807      	ldr	r0, [pc, #28]	; (8082754 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 8082736:	f7ff fb25 	bl	8081d84 <application_thread_invoke>
 808273a:	4630      	mov	r0, r6
 808273c:	f7fe ffdc 	bl	80816f8 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8082740:	4630      	mov	r0, r6
 8082742:	f7fd fcac 	bl	808009e <_ZdlPv>
        }
    }
 8082746:	b007      	add	sp, #28
 8082748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808274a:	bf00      	nop
 808274c:	080823b5 	.word	0x080823b5
 8082750:	08082665 	.word	0x08082665
 8082754:	08081fb7 	.word	0x08081fb7

08082758 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8082758:	b530      	push	{r4, r5, lr}
 808275a:	4604      	mov	r4, r0
 808275c:	b085      	sub	sp, #20
 808275e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8082760:	4668      	mov	r0, sp
 8082762:	4611      	mov	r1, r2
 8082764:	f7ff fde0 	bl	8082328 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8082768:	b17c      	cbz	r4, 808278a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 808276a:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 808276c:	4628      	mov	r0, r5
 808276e:	b10d      	cbz	r5, 8082774 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 8082770:	f002 fb8c 	bl	8084e8c <strdup>
 8082774:	9002      	str	r0, [sp, #8]
 8082776:	a902      	add	r1, sp, #8
 8082778:	4668      	mov	r0, sp
 808277a:	f8ad 400c 	strh.w	r4, [sp, #12]
 808277e:	f7ff fe2f 	bl	80823e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8082782:	9802      	ldr	r0, [sp, #8]
 8082784:	f7ff fbdc 	bl	8081f40 <free>
 8082788:	e01d      	b.n	80827c6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 808278a:	f04f 0201 	mov.w	r2, #1
 808278e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8082790:	f88d 4008 	strb.w	r4, [sp, #8]
 8082794:	e8d0 3f4f 	ldrexb	r3, [r0]
 8082798:	42a3      	cmp	r3, r4
 808279a:	d103      	bne.n	80827a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 808279c:	e8c0 2f41 	strexb	r1, r2, [r0]
 80827a0:	2900      	cmp	r1, #0
 80827a2:	d1f7      	bne.n	8082794 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80827a4:	d002      	beq.n	80827ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80827a6:	f88d 3008 	strb.w	r3, [sp, #8]
 80827aa:	e00c      	b.n	80827c6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80827ac:	f110 010c 	adds.w	r1, r0, #12
 80827b0:	f04f 0301 	mov.w	r3, #1
 80827b4:	bf18      	it	ne
 80827b6:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80827b8:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80827bc:	3004      	adds	r0, #4
 80827be:	f800 3c03 	strb.w	r3, [r0, #-3]
 80827c2:	f7ff ff71 	bl	80826a8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80827c6:	a801      	add	r0, sp, #4
 80827c8:	f7fd ff90 	bl	80806ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80827cc:	b005      	add	sp, #20
 80827ce:	bd30      	pop	{r4, r5, pc}

080827d0 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
 80827d0:	6800      	ldr	r0, [r0, #0]
 80827d2:	f000 b8d4 	b.w	808297e <_ZN7TwoWire4lockEv>

080827d6 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 80827d6:	b510      	push	{r4, lr}
 80827d8:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
 80827da:	6001      	str	r1, [r0, #0]
 80827dc:	7102      	strb	r2, [r0, #4]

    if (lock_) {
 80827de:	b10a      	cbz	r2, 80827e4 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 80827e0:	f7ff fff6 	bl	80827d0 <_ZN9FuelGauge4lockEv>
    }
}
 80827e4:	4620      	mov	r0, r4
 80827e6:	bd10      	pop	{r4, pc}

080827e8 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
 80827e8:	b538      	push	{r3, r4, r5, lr}
 80827ea:	4604      	mov	r4, r0
 80827ec:	460d      	mov	r5, r1
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80827ee:	f001 f8a7 	bl	8083940 <_Z20__fetch_global_Wire3v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
 80827f2:	462a      	mov	r2, r5
 80827f4:	4601      	mov	r1, r0
 80827f6:	4620      	mov	r0, r4
 80827f8:	f7ff ffed 	bl	80827d6 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
 80827fc:	4620      	mov	r0, r4
 80827fe:	bd38      	pop	{r3, r4, r5, pc}

08082800 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
 8082800:	6800      	ldr	r0, [r0, #0]
 8082802:	f000 b8c5 	b.w	8082990 <_ZN7TwoWire6unlockEv>

08082806 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 8082806:	b510      	push	{r4, lr}
{
    if (lock_) {
 8082808:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 808280a:	4604      	mov	r4, r0
{
    if (lock_) {
 808280c:	b10b      	cbz	r3, 8082812 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 808280e:	f7ff fff7 	bl	8082800 <_ZN9FuelGauge6unlockEv>
    }
}
 8082812:	4620      	mov	r0, r4
 8082814:	bd10      	pop	{r4, pc}

08082816 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 8082816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082818:	4604      	mov	r4, r0
 808281a:	460f      	mov	r7, r1
 808281c:	4616      	mov	r6, r2
 808281e:	461d      	mov	r5, r3
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
 8082820:	f7ff ffd6 	bl	80827d0 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
 8082824:	6820      	ldr	r0, [r4, #0]
 8082826:	2136      	movs	r1, #54	; 0x36
 8082828:	f000 f89b 	bl	8082962 <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
 808282c:	6820      	ldr	r0, [r4, #0]
 808282e:	4639      	mov	r1, r7
 8082830:	6803      	ldr	r3, [r0, #0]
 8082832:	689b      	ldr	r3, [r3, #8]
 8082834:	4798      	blx	r3
    i2c_.endTransmission(true);
 8082836:	2101      	movs	r1, #1
 8082838:	6820      	ldr	r0, [r4, #0]
 808283a:	f000 f895 	bl	8082968 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
 808283e:	2202      	movs	r2, #2
 8082840:	2136      	movs	r1, #54	; 0x36
 8082842:	2301      	movs	r3, #1
 8082844:	6820      	ldr	r0, [r4, #0]
 8082846:	f000 f883 	bl	8082950 <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
 808284a:	6820      	ldr	r0, [r4, #0]
 808284c:	6803      	ldr	r3, [r0, #0]
 808284e:	695b      	ldr	r3, [r3, #20]
 8082850:	4798      	blx	r3
 8082852:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
 8082854:	6820      	ldr	r0, [r4, #0]
 8082856:	6803      	ldr	r3, [r0, #0]
 8082858:	695b      	ldr	r3, [r3, #20]
 808285a:	4798      	blx	r3
 808285c:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 808285e:	4620      	mov	r0, r4
}
 8082860:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8082864:	f7ff bfcc 	b.w	8082800 <_ZN9FuelGauge6unlockEv>

08082868 <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
 8082868:	b513      	push	{r0, r1, r4, lr}

	byte MSB = 0;
 808286a:	2200      	movs	r2, #0
	byte LSB = 0;
 808286c:	ab02      	add	r3, sp, #8
 808286e:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
 8082872:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
 8082876:	2104      	movs	r1, #4
 8082878:	f10d 0206 	add.w	r2, sp, #6
 808287c:	f7ff ffcb 	bl	8082816 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
 8082880:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8082884:	f001 fb64 	bl	8083f50 <__aeabi_i2d>
 8082888:	2200      	movs	r2, #0
 808288a:	4b08      	ldr	r3, [pc, #32]	; (80828ac <_ZN9FuelGauge6getSoCEv+0x44>)
 808288c:	f001 fbc6 	bl	808401c <__aeabi_dmul>
 8082890:	f001 fdfe 	bl	8084490 <__aeabi_d2f>
 8082894:	4604      	mov	r4, r0
 8082896:	f89d 0006 	ldrb.w	r0, [sp, #6]
 808289a:	f001 ff03 	bl	80846a4 <__aeabi_i2f>
 808289e:	4601      	mov	r1, r0
 80828a0:	4620      	mov	r0, r4
 80828a2:	f001 fe4b 	bl	808453c <__addsf3>
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
 80828a6:	b002      	add	sp, #8
 80828a8:	bd10      	pop	{r4, pc}
 80828aa:	bf00      	nop
 80828ac:	3f700000 	.word	0x3f700000

080828b0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80828b0:	4770      	bx	lr

080828b2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80828b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80828b4:	4606      	mov	r6, r0
 80828b6:	4615      	mov	r5, r2
 80828b8:	460c      	mov	r4, r1
 80828ba:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80828bc:	42bc      	cmp	r4, r7
 80828be:	d006      	beq.n	80828ce <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80828c0:	6833      	ldr	r3, [r6, #0]
 80828c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80828c6:	689b      	ldr	r3, [r3, #8]
 80828c8:	4630      	mov	r0, r6
 80828ca:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80828cc:	e7f6      	b.n	80828bc <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80828ce:	4628      	mov	r0, r5
 80828d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080828d2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80828d2:	2200      	movs	r2, #0
 80828d4:	7c00      	ldrb	r0, [r0, #16]
 80828d6:	f7ff b955 	b.w	8081b84 <HAL_I2C_Write_Data>

080828da <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80828da:	2100      	movs	r1, #0
 80828dc:	7c00      	ldrb	r0, [r0, #16]
 80828de:	f7ff b959 	b.w	8081b94 <HAL_I2C_Available_Data>

080828e2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80828e2:	2100      	movs	r1, #0
 80828e4:	7c00      	ldrb	r0, [r0, #16]
 80828e6:	f7ff b95d 	b.w	8081ba4 <HAL_I2C_Read_Data>

080828ea <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80828ea:	2100      	movs	r1, #0
 80828ec:	7c00      	ldrb	r0, [r0, #16]
 80828ee:	f7ff b961 	b.w	8081bb4 <HAL_I2C_Peek_Data>

080828f2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80828f2:	2100      	movs	r1, #0
 80828f4:	7c00      	ldrb	r0, [r0, #16]
 80828f6:	f7ff b965 	b.w	8081bc4 <HAL_I2C_Flush_Data>

080828fa <_ZN7TwoWireD0Ev>:
 80828fa:	b510      	push	{r4, lr}
 80828fc:	4604      	mov	r4, r0
 80828fe:	f7fd fbce 	bl	808009e <_ZdlPv>
 8082902:	4620      	mov	r0, r4
 8082904:	bd10      	pop	{r4, pc}
	...

08082908 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8082908:	b510      	push	{r4, lr}
 808290a:	4604      	mov	r4, r0
 808290c:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 808290e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8082912:	60a3      	str	r3, [r4, #8]
 8082914:	4b04      	ldr	r3, [pc, #16]	; (8082928 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8082916:	2100      	movs	r1, #0
{
  _i2c = i2c;
 8082918:	7420      	strb	r0, [r4, #16]
 808291a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 808291c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 808291e:	f7ff f961 	bl	8081be4 <HAL_I2C_Init>

}
 8082922:	4620      	mov	r0, r4
 8082924:	bd10      	pop	{r4, pc}
 8082926:	bf00      	nop
 8082928:	08085c98 	.word	0x08085c98

0808292c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 808292c:	2300      	movs	r3, #0
 808292e:	461a      	mov	r2, r3
 8082930:	4619      	mov	r1, r3
 8082932:	7c00      	ldrb	r0, [r0, #16]
 8082934:	f7ff b906 	b.w	8081b44 <HAL_I2C_Begin>

08082938 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 8082938:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 808293a:	2400      	movs	r4, #0
 808293c:	7c00      	ldrb	r0, [r0, #16]
 808293e:	9400      	str	r4, [sp, #0]
 8082940:	f7ff f908 	bl	8081b54 <HAL_I2C_Request_Data>
  return result;
}
 8082944:	b2c0      	uxtb	r0, r0
 8082946:	b002      	add	sp, #8
 8082948:	bd10      	pop	{r4, pc}

0808294a <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 808294a:	2301      	movs	r3, #1
 808294c:	f7ff bff4 	b.w	8082938 <_ZN7TwoWire11requestFromEhhh>

08082950 <_ZN7TwoWire11requestFromEiii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
 8082950:	b2db      	uxtb	r3, r3
 8082952:	b2d2      	uxtb	r2, r2
 8082954:	b2c9      	uxtb	r1, r1
 8082956:	f7ff bfef 	b.w	8082938 <_ZN7TwoWire11requestFromEhhh>

0808295a <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 808295a:	2200      	movs	r2, #0
 808295c:	7c00      	ldrb	r0, [r0, #16]
 808295e:	f7ff b901 	b.w	8081b64 <HAL_I2C_Begin_Transmission>

08082962 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 8082962:	b2c9      	uxtb	r1, r1
 8082964:	f7ff bff9 	b.w	808295a <_ZN7TwoWire17beginTransmissionEh>

08082968 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 8082968:	2200      	movs	r2, #0
 808296a:	7c00      	ldrb	r0, [r0, #16]
 808296c:	f7ff b902 	b.w	8081b74 <HAL_I2C_End_Transmission>

08082970 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 8082970:	2101      	movs	r1, #1
 8082972:	f7ff bff9 	b.w	8082968 <_ZN7TwoWire15endTransmissionEh>

08082976 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 8082976:	2100      	movs	r1, #0
 8082978:	7c00      	ldrb	r0, [r0, #16]
 808297a:	f7ff b92b 	b.w	8081bd4 <HAL_I2C_Is_Enabled>

0808297e <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 808297e:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
 8082980:	2100      	movs	r1, #0
 8082982:	7c00      	ldrb	r0, [r0, #16]
 8082984:	f7ff f936 	bl	8081bf4 <HAL_I2C_Acquire>
}
 8082988:	fab0 f080 	clz	r0, r0
 808298c:	0940      	lsrs	r0, r0, #5
 808298e:	bd08      	pop	{r3, pc}

08082990 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 8082990:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
 8082992:	2100      	movs	r1, #0
 8082994:	7c00      	ldrb	r0, [r0, #16]
 8082996:	f7ff f935 	bl	8081c04 <HAL_I2C_Release>
}
 808299a:	fab0 f080 	clz	r0, r0
 808299e:	0940      	lsrs	r0, r0, #5
 80829a0:	bd08      	pop	{r3, pc}

080829a2 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 80829a2:	4700      	bx	r0

080829a4 <_Z15attachInterrupttPFvvE13InterruptModeah>:
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
 80829a4:	2807      	cmp	r0, #7
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80829a6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80829aa:	4605      	mov	r5, r0
 80829ac:	460f      	mov	r7, r1
 80829ae:	4690      	mov	r8, r2
 80829b0:	461e      	mov	r6, r3
 80829b2:	f04f 0400 	mov.w	r4, #0
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
 80829b6:	d019      	beq.n	80829ec <_Z15attachInterrupttPFvvE13InterruptModeah+0x48>
#endif
    HAL_Interrupts_Detach(pin);
 80829b8:	f7ff f8b4 	bl	8081b24 <HAL_Interrupts_Detach>
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 80829bc:	42a6      	cmp	r6, r4
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80829be:	f04f 0304 	mov.w	r3, #4
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 80829c2:	9403      	str	r4, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80829c4:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80829c8:	bfa2      	ittt	ge
 80829ca:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
    return &extra;
 80829ce:	ac03      	addge	r4, sp, #12
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80829d0:	f88d 300e 	strbge.w	r3, [sp, #14]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80829d4:	4628      	mov	r0, r5
 80829d6:	9400      	str	r4, [sp, #0]
 80829d8:	4643      	mov	r3, r8
 80829da:	463a      	mov	r2, r7
 80829dc:	4905      	ldr	r1, [pc, #20]	; (80829f4 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80829de:	bfa8      	it	ge
 80829e0:	f88d 600d 	strbge.w	r6, [sp, #13]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 80829e4:	f7ff f896 	bl	8081b14 <HAL_Interrupts_Attach>
    return true;
 80829e8:	2001      	movs	r0, #1
 80829ea:	e000      	b.n	80829ee <_Z15attachInterrupttPFvvE13InterruptModeah+0x4a>
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
 80829ec:	4620      	mov	r0, r4
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
    return true;
}
 80829ee:	b004      	add	sp, #16
 80829f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80829f4:	080829a3 	.word	0x080829a3

080829f8 <_Z15detachInterruptt>:
void detachInterrupt(uint16_t pin)
{
#if Wiring_Cellular == 1
    /* safety check that prevents users from detaching an interrupt from
     * BATT_INT_PC13 for power management which is shared with D7 */
    if (pin == D7) return;
 80829f8:	2807      	cmp	r0, #7
 * Input          : pin number to which the interrupt was attached
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void detachInterrupt(uint16_t pin)
{
 80829fa:	b570      	push	{r4, r5, r6, lr}
 80829fc:	4605      	mov	r5, r0
#if Wiring_Cellular == 1
    /* safety check that prevents users from detaching an interrupt from
     * BATT_INT_PC13 for power management which is shared with D7 */
    if (pin == D7) return;
 80829fe:	d00f      	beq.n	8082a20 <_Z15detachInterruptt+0x28>
#endif
    HAL_Interrupts_Detach(pin);
 8082a00:	f7ff f890 	bl	8081b24 <HAL_Interrupts_Detach>
    delete handlers[pin];
 8082a04:	4b07      	ldr	r3, [pc, #28]	; (8082a24 <_Z15detachInterruptt+0x2c>)
 8082a06:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8082a0a:	461c      	mov	r4, r3
 8082a0c:	b12e      	cbz	r6, 8082a1a <_Z15detachInterruptt+0x22>
 8082a0e:	4630      	mov	r0, r6
 8082a10:	f7fe fe72 	bl	80816f8 <_ZNSt14_Function_baseD1Ev>
 8082a14:	4630      	mov	r0, r6
 8082a16:	f7fd fb42 	bl	808009e <_ZdlPv>
    handlers[pin] = NULL;
 8082a1a:	2300      	movs	r3, #0
 8082a1c:	f844 3025 	str.w	r3, [r4, r5, lsl #2]
 8082a20:	bd70      	pop	{r4, r5, r6, pc}
 8082a22:	bf00      	nop
 8082a24:	20000644 	.word	0x20000644

08082a28 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8082a28:	4770      	bx	lr

08082a2a <_ZN9IPAddressD0Ev>:
 8082a2a:	b510      	push	{r4, lr}
 8082a2c:	4604      	mov	r4, r0
 8082a2e:	f7fd fb36 	bl	808009e <_ZdlPv>
 8082a32:	4620      	mov	r0, r4
 8082a34:	bd10      	pop	{r4, pc}

08082a36 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8082a36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082a38:	460f      	mov	r7, r1
 8082a3a:	f100 0608 	add.w	r6, r0, #8
 8082a3e:	1d05      	adds	r5, r0, #4
 8082a40:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8082a42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8082a46:	220a      	movs	r2, #10
 8082a48:	4638      	mov	r0, r7
 8082a4a:	f000 fad8 	bl	8082ffe <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8082a4e:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8082a50:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8082a52:	d007      	beq.n	8082a64 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 8082a54:	2c00      	cmp	r4, #0
 8082a56:	d0f4      	beq.n	8082a42 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8082a58:	212e      	movs	r1, #46	; 0x2e
 8082a5a:	4638      	mov	r0, r7
 8082a5c:	f000 fa8c 	bl	8082f78 <_ZN5Print5printEc>
 8082a60:	4404      	add	r4, r0
 8082a62:	e7ee      	b.n	8082a42 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 8082a64:	4620      	mov	r0, r4
 8082a66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082a68 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 8082a68:	4a02      	ldr	r2, [pc, #8]	; (8082a74 <_ZN9IPAddressC1Ev+0xc>)
 8082a6a:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8082a6c:	2200      	movs	r2, #0
 8082a6e:	6042      	str	r2, [r0, #4]
{
    clear();
}
 8082a70:	4770      	bx	lr
 8082a72:	bf00      	nop
 8082a74:	08085cc0 	.word	0x08085cc0

08082a78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 8082a78:	4a02      	ldr	r2, [pc, #8]	; (8082a84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8082a7a:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 8082a7c:	680a      	ldr	r2, [r1, #0]
 8082a7e:	6042      	str	r2, [r0, #4]
}
 8082a80:	4770      	bx	lr
 8082a82:	bf00      	nop
 8082a84:	08085cc0 	.word	0x08085cc0

08082a88 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8082a88:	4a01      	ldr	r2, [pc, #4]	; (8082a90 <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 8082a8a:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8082a8c:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 8082a8e:	4770      	bx	lr
 8082a90:	08085cc0 	.word	0x08085cc0

08082a94 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 8082a94:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8082a96:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8082a9a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8082a9e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8082aa2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8082aa6:	6041      	str	r1, [r0, #4]
 8082aa8:	bd10      	pop	{r4, pc}
	...

08082aac <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8082aac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082aae:	4d04      	ldr	r5, [pc, #16]	; (8082ac0 <_ZN9IPAddressC1Ehhhh+0x14>)
 8082ab0:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8082ab2:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8082ab6:	9500      	str	r5, [sp, #0]
 8082ab8:	f7ff ffec 	bl	8082a94 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8082abc:	b003      	add	sp, #12
 8082abe:	bd30      	pop	{r4, r5, pc}
 8082ac0:	08085cc0 	.word	0x08085cc0

08082ac4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8082ac4:	4a01      	ldr	r2, [pc, #4]	; (8082acc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8082ac6:	4b02      	ldr	r3, [pc, #8]	; (8082ad0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8082ac8:	601a      	str	r2, [r3, #0]
 8082aca:	4770      	bx	lr
 8082acc:	08085d7e 	.word	0x08085d7e
 8082ad0:	20000700 	.word	0x20000700

08082ad4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8082ad4:	2300      	movs	r3, #0
 8082ad6:	461a      	mov	r2, r3
 8082ad8:	6840      	ldr	r0, [r0, #4]
 8082ada:	f7ff b9d9 	b.w	8081e90 <network_connect>

08082ade <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8082ade:	2200      	movs	r2, #0
 8082ae0:	2102      	movs	r1, #2
 8082ae2:	6840      	ldr	r0, [r0, #4]
 8082ae4:	f7ff b9e4 	b.w	8081eb0 <network_disconnect>

08082ae8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8082ae8:	2200      	movs	r2, #0
 8082aea:	4611      	mov	r1, r2
 8082aec:	6840      	ldr	r0, [r0, #4]
 8082aee:	f7ff b9d7 	b.w	8081ea0 <network_connecting>

08082af2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 8082af2:	2200      	movs	r2, #0
 8082af4:	4611      	mov	r1, r2
 8082af6:	6840      	ldr	r0, [r0, #4]
 8082af8:	f7ff b9e2 	b.w	8081ec0 <network_ready>

08082afc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8082afc:	2300      	movs	r3, #0
 8082afe:	461a      	mov	r2, r3
 8082b00:	4619      	mov	r1, r3
 8082b02:	6840      	ldr	r0, [r0, #4]
 8082b04:	f7ff b9e4 	b.w	8081ed0 <network_on>

08082b08 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8082b08:	2300      	movs	r3, #0
 8082b0a:	461a      	mov	r2, r3
 8082b0c:	4619      	mov	r1, r3
 8082b0e:	6840      	ldr	r0, [r0, #4]
 8082b10:	f7ff b9e6 	b.w	8081ee0 <network_off>

08082b14 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 8082b14:	2200      	movs	r2, #0
 8082b16:	f081 0101 	eor.w	r1, r1, #1
 8082b1a:	6840      	ldr	r0, [r0, #4]
 8082b1c:	f7ff b9e8 	b.w	8081ef0 <network_listen>

08082b20 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8082b20:	2200      	movs	r2, #0
 8082b22:	6840      	ldr	r0, [r0, #4]
 8082b24:	f7ff b9f4 	b.w	8081f10 <network_set_listen_timeout>

08082b28 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8082b28:	2200      	movs	r2, #0
 8082b2a:	4611      	mov	r1, r2
 8082b2c:	6840      	ldr	r0, [r0, #4]
 8082b2e:	f7ff b9f7 	b.w	8081f20 <network_get_listen_timeout>

08082b32 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 8082b32:	2200      	movs	r2, #0
 8082b34:	4611      	mov	r1, r2
 8082b36:	6840      	ldr	r0, [r0, #4]
 8082b38:	f7ff b9e2 	b.w	8081f00 <network_listening>

08082b3c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8082b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082b3e:	4617      	mov	r7, r2
 8082b40:	b087      	sub	sp, #28
 8082b42:	4605      	mov	r5, r0
    IPAddress addr;
 8082b44:	a804      	add	r0, sp, #16
 8082b46:	f7ff ff8f 	bl	8082a68 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8082b4a:	2600      	movs	r6, #0
 8082b4c:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082b4e:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8082b50:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082b54:	f002 f9b5 	bl	8084ec2 <strlen>
 8082b58:	4b0a      	ldr	r3, [pc, #40]	; (8082b84 <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 8082b5a:	9600      	str	r6, [sp, #0]
 8082b5c:	b281      	uxth	r1, r0
 8082b5e:	685b      	ldr	r3, [r3, #4]
 8082b60:	4622      	mov	r2, r4
 8082b62:	4638      	mov	r0, r7
 8082b64:	f7fe ff46 	bl	80819f4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8082b68:	b120      	cbz	r0, 8082b74 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8082b6a:	4631      	mov	r1, r6
 8082b6c:	4628      	mov	r0, r5
 8082b6e:	f7ff ff8b 	bl	8082a88 <_ZN9IPAddressC1Em>
 8082b72:	e003      	b.n	8082b7c <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 8082b74:	4621      	mov	r1, r4
 8082b76:	4628      	mov	r0, r5
 8082b78:	f7ff ff7e 	bl	8082a78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 8082b7c:	4628      	mov	r0, r5
 8082b7e:	b007      	add	sp, #28
 8082b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082b82:	bf00      	nop
 8082b84:	200005e8 	.word	0x200005e8

08082b88 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8082b88:	4b02      	ldr	r3, [pc, #8]	; (8082b94 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 8082b8a:	4a03      	ldr	r2, [pc, #12]	; (8082b98 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8082b8c:	601a      	str	r2, [r3, #0]
 8082b8e:	2200      	movs	r2, #0
 8082b90:	605a      	str	r2, [r3, #4]
 8082b92:	4770      	bx	lr
 8082b94:	20000704 	.word	0x20000704
 8082b98:	08085db0 	.word	0x08085db0

08082b9c <_ZN4PMIC5beginEv>:
 * Description    : Initializes the I2C for the PMIC module
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
 8082b9c:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082b9e:	f000 fecf 	bl	8083940 <_Z20__fetch_global_Wire3v>
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
 8082ba2:	f7ff fee8 	bl	8082976 <_ZN7TwoWire9isEnabledEv>
 8082ba6:	b918      	cbnz	r0, 8082bb0 <_ZN4PMIC5beginEv+0x14>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082ba8:	f000 feca 	bl	8083940 <_Z20__fetch_global_Wire3v>
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
 8082bac:	f7ff febe 	bl	808292c <_ZN7TwoWire5beginEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082bb0:	f000 fec6 	bl	8083940 <_Z20__fetch_global_Wire3v>
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
}
 8082bb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
 8082bb8:	f7ff bedd 	b.w	8082976 <_ZN7TwoWire9isEnabledEv>

08082bbc <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 8082bbc:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082bbe:	f000 febf 	bl	8083940 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
 8082bc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
 8082bc6:	f7ff beda 	b.w	808297e <_ZN7TwoWire4lockEv>

08082bca <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
 8082bca:	b510      	push	{r4, lr}
 8082bcc:	4604      	mov	r4, r0
    lock_(_lock)
 8082bce:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
 8082bd0:	b109      	cbz	r1, 8082bd6 <_ZN4PMICC1Eb+0xc>
        lock();
 8082bd2:	f7ff fff3 	bl	8082bbc <_ZN4PMIC4lockEv>
    }
}
 8082bd6:	4620      	mov	r0, r4
 8082bd8:	bd10      	pop	{r4, pc}

08082bda <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
 8082bda:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082bdc:	f000 feb0 	bl	8083940 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
 8082be0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
 8082be4:	f7ff bed4 	b.w	8082990 <_ZN7TwoWire6unlockEv>

08082be8 <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 8082be8:	b510      	push	{r4, lr}
{
    if (lock_) {
 8082bea:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 8082bec:	4604      	mov	r4, r0
{
    if (lock_) {
 8082bee:	b10b      	cbz	r3, 8082bf4 <_ZN4PMICD1Ev+0xc>
        unlock();
 8082bf0:	f7ff fff3 	bl	8082bda <_ZN4PMIC6unlockEv>
    }
}
 8082bf4:	4620      	mov	r0, r4
 8082bf6:	bd10      	pop	{r4, pc}

08082bf8 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 8082bf8:	b510      	push	{r4, lr}
 8082bfa:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 8082bfc:	6800      	ldr	r0, [r0, #0]
 8082bfe:	f7ff ffec 	bl	8082bda <_ZN4PMIC6unlockEv>
 8082c02:	4620      	mov	r0, r4
 8082c04:	bd10      	pop	{r4, pc}

08082c06 <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
 8082c06:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8082c08:	ac02      	add	r4, sp, #8
 8082c0a:	460d      	mov	r5, r1
 8082c0c:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 8082c10:	f7ff ffd4 	bl	8082bbc <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082c14:	f000 fe94 	bl	8083940 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 8082c18:	216b      	movs	r1, #107	; 0x6b
 8082c1a:	f7ff fea2 	bl	8082962 <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082c1e:	f000 fe8f 	bl	8083940 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
 8082c22:	6803      	ldr	r3, [r0, #0]
 8082c24:	4629      	mov	r1, r5
 8082c26:	689b      	ldr	r3, [r3, #8]
 8082c28:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082c2a:	f000 fe89 	bl	8083940 <_Z20__fetch_global_Wire3v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
 8082c2e:	2101      	movs	r1, #1
 8082c30:	f7ff fe9a 	bl	8082968 <_ZN7TwoWire15endTransmissionEh>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082c34:	f000 fe84 	bl	8083940 <_Z20__fetch_global_Wire3v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
 8082c38:	2301      	movs	r3, #1
 8082c3a:	461a      	mov	r2, r3
 8082c3c:	216b      	movs	r1, #107	; 0x6b
 8082c3e:	f7ff fe87 	bl	8082950 <_ZN7TwoWire11requestFromEiii>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082c42:	f000 fe7d 	bl	8083940 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
 8082c46:	6803      	ldr	r3, [r0, #0]
 8082c48:	695b      	ldr	r3, [r3, #20]
 8082c4a:	4798      	blx	r3
 8082c4c:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
 8082c4e:	4620      	mov	r0, r4
 8082c50:	f7ff ffd2 	bl	8082bf8 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
 8082c54:	b2e8      	uxtb	r0, r5
 8082c56:	b003      	add	sp, #12
 8082c58:	bd30      	pop	{r4, r5, pc}

08082c5a <_ZN4PMIC13writeRegisterEhh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
 8082c5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8082c5c:	ac02      	add	r4, sp, #8
 8082c5e:	4615      	mov	r5, r2
 8082c60:	460e      	mov	r6, r1
 8082c62:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 8082c66:	f7ff ffa9 	bl	8082bbc <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082c6a:	f000 fe69 	bl	8083940 <_Z20__fetch_global_Wire3v>
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 8082c6e:	216b      	movs	r1, #107	; 0x6b
 8082c70:	f7ff fe77 	bl	8082962 <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082c74:	f000 fe64 	bl	8083940 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
 8082c78:	6803      	ldr	r3, [r0, #0]
 8082c7a:	4631      	mov	r1, r6
 8082c7c:	689b      	ldr	r3, [r3, #8]
 8082c7e:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082c80:	f000 fe5e 	bl	8083940 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
 8082c84:	6803      	ldr	r3, [r0, #0]
 8082c86:	4629      	mov	r1, r5
 8082c88:	689b      	ldr	r3, [r3, #8]
 8082c8a:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082c8c:	f000 fe58 	bl	8083940 <_Z20__fetch_global_Wire3v>
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
 8082c90:	2101      	movs	r1, #1
 8082c92:	f7ff fe69 	bl	8082968 <_ZN7TwoWire15endTransmissionEh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
 8082c96:	4620      	mov	r0, r4
 8082c98:	f7ff ffae 	bl	8082bf8 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}
 8082c9c:	b002      	add	sp, #8
 8082c9e:	bd70      	pop	{r4, r5, r6, pc}

08082ca0 <_ZN4PMIC20setInputVoltageLimitEt>:
                    5000
                    5080
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
 8082ca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082ca2:	4604      	mov	r4, r0
 8082ca4:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8082ca6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8082ca8:	f7ff ff88 	bl	8082bbc <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
 8082cac:	2100      	movs	r1, #0
 8082cae:	4620      	mov	r0, r4
 8082cb0:	f7ff ffa9 	bl	8082c06 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 8082cb4:	f241 1358 	movw	r3, #4440	; 0x1158
 8082cb8:	429d      	cmp	r5, r3
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;
 8082cba:	f000 0287 	and.w	r2, r0, #135	; 0x87

    switch(voltage) {
 8082cbe:	d05b      	beq.n	8082d78 <_ZN4PMIC20setInputVoltageLimitEt+0xd8>
 8082cc0:	d820      	bhi.n	8082d04 <_ZN4PMIC20setInputVoltageLimitEt+0x64>
 8082cc2:	f241 0318 	movw	r3, #4120	; 0x1018
 8082cc6:	429d      	cmp	r5, r3
 8082cc8:	d04d      	beq.n	8082d66 <_ZN4PMIC20setInputVoltageLimitEt+0xc6>
 8082cca:	d80c      	bhi.n	8082ce6 <_ZN4PMIC20setInputVoltageLimitEt+0x46>
 8082ccc:	f640 7378 	movw	r3, #3960	; 0xf78
 8082cd0:	429d      	cmp	r5, r3
 8082cd2:	d042      	beq.n	8082d5a <_ZN4PMIC20setInputVoltageLimitEt+0xba>
 8082cd4:	f640 73c8 	movw	r3, #4040	; 0xfc8
 8082cd8:	429d      	cmp	r5, r3
 8082cda:	d041      	beq.n	8082d60 <_ZN4PMIC20setInputVoltageLimitEt+0xc0>
 8082cdc:	f640 7328 	movw	r3, #3880	; 0xf28
 8082ce0:	429d      	cmp	r5, r3
 8082ce2:	d160      	bne.n	8082da6 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
 8082ce4:	e059      	b.n	8082d9a <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
 8082ce6:	f241 03b8 	movw	r3, #4280	; 0x10b8
 8082cea:	429d      	cmp	r5, r3
 8082cec:	d03e      	beq.n	8082d6c <_ZN4PMIC20setInputVoltageLimitEt+0xcc>
 8082cee:	f241 1308 	movw	r3, #4360	; 0x1108
 8082cf2:	429d      	cmp	r5, r3
 8082cf4:	d03d      	beq.n	8082d72 <_ZN4PMIC20setInputVoltageLimitEt+0xd2>
 8082cf6:	f241 0368 	movw	r3, #4200	; 0x1068
 8082cfa:	429d      	cmp	r5, r3
 8082cfc:	d153      	bne.n	8082da6 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4120:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00011000));
        break;

        case 4200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00100000));
 8082cfe:	f042 0220 	orr.w	r2, r2, #32
 8082d02:	e04a      	b.n	8082d9a <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 8082d04:	f241 2398 	movw	r3, #4760	; 0x1298
 8082d08:	429d      	cmp	r5, r3
 8082d0a:	d03e      	beq.n	8082d8a <_ZN4PMIC20setInputVoltageLimitEt+0xea>
 8082d0c:	d80e      	bhi.n	8082d2c <_ZN4PMIC20setInputVoltageLimitEt+0x8c>
 8082d0e:	f241 13f8 	movw	r3, #4600	; 0x11f8
 8082d12:	429d      	cmp	r5, r3
 8082d14:	d033      	beq.n	8082d7e <_ZN4PMIC20setInputVoltageLimitEt+0xde>
 8082d16:	f241 2348 	movw	r3, #4680	; 0x1248
 8082d1a:	429d      	cmp	r5, r3
 8082d1c:	d032      	beq.n	8082d84 <_ZN4PMIC20setInputVoltageLimitEt+0xe4>
 8082d1e:	f241 13a8 	movw	r3, #4520	; 0x11a8
 8082d22:	429d      	cmp	r5, r3
 8082d24:	d13f      	bne.n	8082da6 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4440:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00111000));
        break;

        case 4520:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01000000));
 8082d26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8082d2a:	e036      	b.n	8082d9a <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 8082d2c:	f241 3338 	movw	r3, #4920	; 0x1338
 8082d30:	429d      	cmp	r5, r3
 8082d32:	d02d      	beq.n	8082d90 <_ZN4PMIC20setInputVoltageLimitEt+0xf0>
 8082d34:	d806      	bhi.n	8082d44 <_ZN4PMIC20setInputVoltageLimitEt+0xa4>
 8082d36:	f241 23e8 	movw	r3, #4840	; 0x12e8
 8082d3a:	429d      	cmp	r5, r3
 8082d3c:	d133      	bne.n	8082da6 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4760:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01011000));
        break;

        case 4840:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01100000));
 8082d3e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8082d42:	e02a      	b.n	8082d9a <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 8082d44:	f241 3388 	movw	r3, #5000	; 0x1388
 8082d48:	429d      	cmp	r5, r3
 8082d4a:	d024      	beq.n	8082d96 <_ZN4PMIC20setInputVoltageLimitEt+0xf6>
 8082d4c:	f241 33d8 	movw	r3, #5080	; 0x13d8
 8082d50:	429d      	cmp	r5, r3
 8082d52:	d128      	bne.n	8082da6 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
        break;

        case 5080:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01111000));
 8082d54:	f042 0278 	orr.w	r2, r2, #120	; 0x78
 8082d58:	e01f      	b.n	8082d9a <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 3880:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000000));
        break;

        case 3960:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00001000));
 8082d5a:	f042 0208 	orr.w	r2, r2, #8
 8082d5e:	e01c      	b.n	8082d9a <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4040:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00010000));
 8082d60:	f042 0210 	orr.w	r2, r2, #16
 8082d64:	e019      	b.n	8082d9a <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4120:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00011000));
 8082d66:	f042 0218 	orr.w	r2, r2, #24
 8082d6a:	e016      	b.n	8082d9a <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00100000));
        break;

        case 4280:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00101000));
 8082d6c:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8082d70:	e013      	b.n	8082d9a <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4360:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00110000));
 8082d72:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8082d76:	e010      	b.n	8082d9a <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4440:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00111000));
 8082d78:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8082d7c:	e00d      	b.n	8082d9a <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4520:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01000000));
        break;

        case 4600:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01001000));
 8082d7e:	f042 0248 	orr.w	r2, r2, #72	; 0x48
 8082d82:	e00a      	b.n	8082d9a <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4680:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01010000));
 8082d84:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8082d88:	e007      	b.n	8082d9a <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4760:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01011000));
 8082d8a:	f042 0258 	orr.w	r2, r2, #88	; 0x58
 8082d8e:	e004      	b.n	8082d9a <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4840:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01100000));
        break;

        case 4920:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01101000));
 8082d90:	f042 0268 	orr.w	r2, r2, #104	; 0x68
 8082d94:	e001      	b.n	8082d9a <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
 8082d96:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8082d9a:	4620      	mov	r0, r4
 8082d9c:	2100      	movs	r1, #0
 8082d9e:	f7ff ff5c 	bl	8082c5a <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 8082da2:	2401      	movs	r4, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01101000));
        break;

        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
        break;
 8082da4:	e000      	b.n	8082da8 <_ZN4PMIC20setInputVoltageLimitEt+0x108>
        case 5080:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01111000));
        break;

        default:
        return 0; // return error since the value passed didn't match
 8082da6:	2400      	movs	r4, #0
                    5080
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
 8082da8:	a801      	add	r0, sp, #4
 8082daa:	f7ff ff25 	bl	8082bf8 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 8082dae:	4620      	mov	r0, r4
 8082db0:	b003      	add	sp, #12
 8082db2:	bd30      	pop	{r4, r5, pc}

08082db4 <_ZN4PMIC20setInputCurrentLimitEt>:
 * Function Name  : setInputCurrentLimit
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
 8082db4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082db6:	4604      	mov	r4, r0
 8082db8:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8082dba:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8082dbc:	f7ff fefe 	bl	8082bbc <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
 8082dc0:	2100      	movs	r1, #0
 8082dc2:	4620      	mov	r0, r4
 8082dc4:	f7ff ff1f 	bl	8082c06 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b11111000;

    switch (current) {
 8082dc8:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;
 8082dcc:	f000 02f8 	and.w	r2, r0, #248	; 0xf8

    switch (current) {
 8082dd0:	d023      	beq.n	8082e1a <_ZN4PMIC20setInputCurrentLimitEt+0x66>
 8082dd2:	d807      	bhi.n	8082de4 <_ZN4PMIC20setInputCurrentLimitEt+0x30>
 8082dd4:	2d96      	cmp	r5, #150	; 0x96
 8082dd6:	d01a      	beq.n	8082e0e <_ZN4PMIC20setInputCurrentLimitEt+0x5a>
 8082dd8:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 8082ddc:	d01a      	beq.n	8082e14 <_ZN4PMIC20setInputCurrentLimitEt+0x60>
 8082dde:	2d64      	cmp	r5, #100	; 0x64
 8082de0:	d129      	bne.n	8082e36 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
 8082de2:	e022      	b.n	8082e2a <_ZN4PMIC20setInputCurrentLimitEt+0x76>
 8082de4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8082de8:	429d      	cmp	r5, r3
 8082dea:	d019      	beq.n	8082e20 <_ZN4PMIC20setInputCurrentLimitEt+0x6c>
 8082dec:	d805      	bhi.n	8082dfa <_ZN4PMIC20setInputCurrentLimitEt+0x46>
 8082dee:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 8082df2:	d120      	bne.n	8082e36 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
        break;

        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
 8082df4:	f042 0204 	orr.w	r2, r2, #4
 8082df8:	e017      	b.n	8082e2a <_ZN4PMIC20setInputCurrentLimitEt+0x76>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;

    switch (current) {
 8082dfa:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8082dfe:	d012      	beq.n	8082e26 <_ZN4PMIC20setInputCurrentLimitEt+0x72>
 8082e00:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8082e04:	429d      	cmp	r5, r3
 8082e06:	d116      	bne.n	8082e36 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;

        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
 8082e08:	f042 0207 	orr.w	r2, r2, #7
 8082e0c:	e00d      	b.n	8082e2a <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 100:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000000));
        break;

        case 150:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000001));
 8082e0e:	f042 0201 	orr.w	r2, r2, #1
 8082e12:	e00a      	b.n	8082e2a <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000010));
 8082e14:	f042 0202 	orr.w	r2, r2, #2
 8082e18:	e007      	b.n	8082e2a <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
 8082e1a:	f042 0203 	orr.w	r2, r2, #3
 8082e1e:	e004      	b.n	8082e2a <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
        break;

        case 1500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
 8082e20:	f042 0205 	orr.w	r2, r2, #5
 8082e24:	e001      	b.n	8082e2a <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
 8082e26:	f042 0206 	orr.w	r2, r2, #6
 8082e2a:	4620      	mov	r0, r4
 8082e2c:	2100      	movs	r1, #0
 8082e2e:	f7ff ff14 	bl	8082c5a <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 8082e32:	2401      	movs	r4, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;
 8082e34:	e000      	b.n	8082e38 <_ZN4PMIC20setInputCurrentLimitEt+0x84>
        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
        break;

        default:
        return 0; // return error since the value passed didn't match
 8082e36:	2400      	movs	r4, #0
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);
 8082e38:	a801      	add	r0, sp, #4
 8082e3a:	f7ff fedd 	bl	8082bf8 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 8082e3e:	4620      	mov	r0, r4
 8082e40:	b003      	add	sp, #12
 8082e42:	bd30      	pop	{r4, r5, pc}

08082e44 <_ZN4PMIC16setChargeCurrentEbbbbbb>:
                    For example,
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
 8082e44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8082e46:	460c      	mov	r4, r1
 8082e48:	4617      	mov	r7, r2
 8082e4a:	4605      	mov	r5, r0
 8082e4c:	461e      	mov	r6, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8082e4e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8082e50:	f7ff feb4 	bl	8082bbc <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte current = 0;
    if (bit7) current = current | 0b10000000;
 8082e54:	2c00      	cmp	r4, #0
 8082e56:	bf0c      	ite	eq
 8082e58:	2400      	moveq	r4, #0
 8082e5a:	2480      	movne	r4, #128	; 0x80
    if (bit6) current = current | 0b01000000;
 8082e5c:	b117      	cbz	r7, 8082e64 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x20>
 8082e5e:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8082e62:	b2e4      	uxtb	r4, r4
    if (bit5) current = current | 0b00100000;
 8082e64:	b10e      	cbz	r6, 8082e6a <_ZN4PMIC16setChargeCurrentEbbbbbb+0x26>
 8082e66:	f044 0420 	orr.w	r4, r4, #32
    if (bit4) current = current | 0b00010000;
 8082e6a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8082e6e:	b10b      	cbz	r3, 8082e74 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x30>
 8082e70:	f044 0410 	orr.w	r4, r4, #16
    if (bit3) current = current | 0b00001000;
 8082e74:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8082e78:	b10b      	cbz	r3, 8082e7e <_ZN4PMIC16setChargeCurrentEbbbbbb+0x3a>
 8082e7a:	f044 0408 	orr.w	r4, r4, #8
    if (bit2) current = current | 0b00000100;
 8082e7e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8082e82:	b10b      	cbz	r3, 8082e88 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x44>
 8082e84:	f044 0404 	orr.w	r4, r4, #4

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 8082e88:	2102      	movs	r1, #2
 8082e8a:	4628      	mov	r0, r5
 8082e8c:	f7ff febb 	bl	8082c06 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
 8082e90:	f000 0201 	and.w	r2, r0, #1
 8082e94:	4322      	orrs	r2, r4
 8082e96:	2102      	movs	r1, #2
 8082e98:	4628      	mov	r0, r5
 8082e9a:	f7ff fede 	bl	8082c5a <_ZN4PMIC13writeRegisterEhh>
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
    std::lock_guard<PMIC> l(*this);
 8082e9e:	a801      	add	r0, sp, #4
 8082ea0:	f7ff feaa 	bl	8082bf8 <_ZNSt10lock_guardI4PMICED1Ev>

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
    return 1;
}
 8082ea4:	2001      	movs	r0, #1
 8082ea6:	b003      	add	sp, #12
 8082ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08082eaa <_ZN4PMIC16setChargeVoltageEt>:
                    4208 is the default
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
 8082eaa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082eac:	4604      	mov	r4, r0
 8082eae:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8082eb0:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8082eb2:	f7ff fe83 	bl	8082bbc <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
 8082eb6:	2104      	movs	r1, #4
 8082eb8:	4620      	mov	r0, r4
 8082eba:	f7ff fea4 	bl	8082c06 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b000000011;

    switch (voltage) {
 8082ebe:	f241 0310 	movw	r3, #4112	; 0x1010
 8082ec2:	429d      	cmp	r5, r3
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
    byte mask = DATA & 0b000000011;
 8082ec4:	f000 0203 	and.w	r2, r0, #3

    switch (voltage) {
 8082ec8:	d006      	beq.n	8082ed8 <_ZN4PMIC16setChargeVoltageEt+0x2e>
 8082eca:	f241 0370 	movw	r3, #4208	; 0x1070
 8082ece:	429d      	cmp	r5, r3
 8082ed0:	d10a      	bne.n	8082ee8 <_ZN4PMIC16setChargeVoltageEt+0x3e>
        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
 8082ed2:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
 8082ed6:	e001      	b.n	8082edc <_ZN4PMIC16setChargeVoltageEt+0x32>
    byte mask = DATA & 0b000000011;

    switch (voltage) {

        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
 8082ed8:	f042 0298 	orr.w	r2, r2, #152	; 0x98
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
 8082edc:	4620      	mov	r0, r4
 8082ede:	2104      	movs	r1, #4
 8082ee0:	f7ff febb 	bl	8082c5a <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 8082ee4:	2401      	movs	r4, #1
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
        break;
 8082ee6:	e000      	b.n	8082eea <_ZN4PMIC16setChargeVoltageEt+0x40>

        default:
        return 0; // return error since the value passed didn't match
 8082ee8:	2400      	movs	r4, #0
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
 8082eea:	a801      	add	r0, sp, #4
 8082eec:	f7ff fe84 	bl	8082bf8 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 8082ef0:	4620      	mov	r0, r4
 8082ef2:	b003      	add	sp, #12
 8082ef4:	bd30      	pop	{r4, r5, pc}

08082ef6 <_ZN4PMIC15disableWatchdogEv>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
bool PMIC::disableWatchdog(void) {
 8082ef6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082ef8:	4605      	mov	r5, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8082efa:	ac02      	add	r4, sp, #8
 8082efc:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 8082f00:	f7ff fe5c 	bl	8082bbc <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_TIMER_CONTROL_REGISTER);
 8082f04:	2105      	movs	r1, #5
 8082f06:	4628      	mov	r0, r5
 8082f08:	f7ff fe7d 	bl	8082c06 <_ZN4PMIC12readRegisterEh>
    writeRegister(CHARGE_TIMER_CONTROL_REGISTER, (DATA & 0b11001110));
 8082f0c:	2105      	movs	r1, #5
 8082f0e:	f000 02ce 	and.w	r2, r0, #206	; 0xce
 8082f12:	4628      	mov	r0, r5
 8082f14:	f7ff fea1 	bl	8082c5a <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
bool PMIC::disableWatchdog(void) {
    std::lock_guard<PMIC> l(*this);
 8082f18:	4620      	mov	r0, r4
 8082f1a:	f7ff fe6d 	bl	8082bf8 <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(CHARGE_TIMER_CONTROL_REGISTER);
    writeRegister(CHARGE_TIMER_CONTROL_REGISTER, (DATA & 0b11001110));
    return 1;
}
 8082f1e:	2001      	movs	r0, #1
 8082f20:	b003      	add	sp, #12
 8082f22:	bd30      	pop	{r4, r5, pc}

08082f24 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8082f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082f26:	4606      	mov	r6, r0
 8082f28:	460d      	mov	r5, r1
 8082f2a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 8082f2c:	2400      	movs	r4, #0
  while (size--) {
 8082f2e:	42bd      	cmp	r5, r7
 8082f30:	d00c      	beq.n	8082f4c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8082f32:	6833      	ldr	r3, [r6, #0]
 8082f34:	f815 1b01 	ldrb.w	r1, [r5], #1
 8082f38:	689b      	ldr	r3, [r3, #8]
 8082f3a:	4630      	mov	r0, r6
 8082f3c:	4798      	blx	r3
     if (chunk>=0)
 8082f3e:	2800      	cmp	r0, #0
 8082f40:	db01      	blt.n	8082f46 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8082f42:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 8082f44:	e7f3      	b.n	8082f2e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8082f46:	2c00      	cmp	r4, #0
 8082f48:	bf08      	it	eq
 8082f4a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 8082f4c:	4620      	mov	r0, r4
 8082f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082f50 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8082f50:	b570      	push	{r4, r5, r6, lr}
 8082f52:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8082f54:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8082f56:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8082f58:	b149      	cbz	r1, 8082f6e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8082f5a:	f001 ffb2 	bl	8084ec2 <strlen>
 8082f5e:	682b      	ldr	r3, [r5, #0]
 8082f60:	4602      	mov	r2, r0
 8082f62:	4621      	mov	r1, r4
 8082f64:	4628      	mov	r0, r5
    }
 8082f66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 8082f6a:	68db      	ldr	r3, [r3, #12]
 8082f6c:	4718      	bx	r3
    }
 8082f6e:	bd70      	pop	{r4, r5, r6, pc}

08082f70 <_ZN5Print5printEPKc>:
 8082f70:	b508      	push	{r3, lr}
 8082f72:	f7ff ffed 	bl	8082f50 <_ZN5Print5writeEPKc>
 8082f76:	bd08      	pop	{r3, pc}

08082f78 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8082f78:	6803      	ldr	r3, [r0, #0]
 8082f7a:	689b      	ldr	r3, [r3, #8]
 8082f7c:	4718      	bx	r3

08082f7e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8082f7e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8082f80:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8082f82:	4605      	mov	r5, r0
  size_t n = print('\r');
 8082f84:	f7ff fff8 	bl	8082f78 <_ZN5Print5printEc>
  n += print('\n');
 8082f88:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 8082f8a:	4604      	mov	r4, r0
  n += print('\n');
 8082f8c:	4628      	mov	r0, r5
 8082f8e:	f7ff fff3 	bl	8082f78 <_ZN5Print5printEc>
  return n;
}
 8082f92:	4420      	add	r0, r4
 8082f94:	bd38      	pop	{r3, r4, r5, pc}

08082f96 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8082f96:	b538      	push	{r3, r4, r5, lr}
 8082f98:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8082f9a:	f7ff ffd9 	bl	8082f50 <_ZN5Print5writeEPKc>
 8082f9e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 8082fa0:	4628      	mov	r0, r5
 8082fa2:	f7ff ffec 	bl	8082f7e <_ZN5Print7printlnEv>
  return n;
}
 8082fa6:	4420      	add	r0, r4
 8082fa8:	bd38      	pop	{r3, r4, r5, pc}

08082faa <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8082faa:	2a01      	cmp	r2, #1
 8082fac:	bf98      	it	ls
 8082fae:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8082fb0:	b530      	push	{r4, r5, lr}
 8082fb2:	460b      	mov	r3, r1
 8082fb4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8082fb6:	2100      	movs	r1, #0
 8082fb8:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8082fbc:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 8082fc0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 8082fc4:	fb05 3312 	mls	r3, r5, r2, r3
 8082fc8:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8082fca:	2b09      	cmp	r3, #9
 8082fcc:	bf94      	ite	ls
 8082fce:	3330      	addls	r3, #48	; 0x30
 8082fd0:	3337      	addhi	r3, #55	; 0x37
 8082fd2:	b2db      	uxtb	r3, r3
 8082fd4:	4621      	mov	r1, r4
 8082fd6:	f804 3901 	strb.w	r3, [r4], #-1
 8082fda:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 8082fdc:	2d00      	cmp	r5, #0
 8082fde:	d1ef      	bne.n	8082fc0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8082fe0:	f7ff ffb6 	bl	8082f50 <_ZN5Print5writeEPKc>
}
 8082fe4:	b00b      	add	sp, #44	; 0x2c
 8082fe6:	bd30      	pop	{r4, r5, pc}

08082fe8 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 8082fe8:	b410      	push	{r4}
  if (base == 0) return write(n);
 8082fea:	b922      	cbnz	r2, 8082ff6 <_ZN5Print5printEmi+0xe>
 8082fec:	6803      	ldr	r3, [r0, #0]
 8082fee:	b2c9      	uxtb	r1, r1
 8082ff0:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 8082ff2:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 8082ff4:	4718      	bx	r3
  else return printNumber(n, base);
 8082ff6:	b2d2      	uxtb	r2, r2
}
 8082ff8:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8082ffa:	f7ff bfd6 	b.w	8082faa <_ZN5Print11printNumberEmh>

08082ffe <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 8082ffe:	f7ff bff3 	b.w	8082fe8 <_ZN5Print5printEmi>

08083002 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 8083002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8083006:	4607      	mov	r7, r0
 8083008:	460e      	mov	r6, r1
  if (base == 0) {
 808300a:	4615      	mov	r5, r2
 808300c:	b92a      	cbnz	r2, 808301a <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 808300e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 8083012:	6803      	ldr	r3, [r0, #0]
 8083014:	b2c9      	uxtb	r1, r1
 8083016:	689b      	ldr	r3, [r3, #8]
 8083018:	4718      	bx	r3
  } else if (base == 10) {
 808301a:	2a0a      	cmp	r2, #10
 808301c:	d102      	bne.n	8083024 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 808301e:	2900      	cmp	r1, #0
 8083020:	da01      	bge.n	8083026 <_ZN5Print5printEli+0x24>
 8083022:	e004      	b.n	808302e <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 8083024:	b2d2      	uxtb	r2, r2
  }
}
 8083026:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 808302a:	f7ff bfbe 	b.w	8082faa <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 808302e:	212d      	movs	r1, #45	; 0x2d
 8083030:	f7ff ffa2 	bl	8082f78 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 8083034:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 8083036:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 8083038:	4271      	negs	r1, r6
 808303a:	4638      	mov	r0, r7
 808303c:	f7ff ffb5 	bl	8082faa <_ZN5Print11printNumberEmh>
 8083040:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8083042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08083046 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 8083046:	f7ff bfdc 	b.w	8083002 <_ZN5Print5printEli>

0808304a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 808304a:	b510      	push	{r4, lr}
 808304c:	4604      	mov	r4, r0
 808304e:	f7fe fb53 	bl	80816f8 <_ZNSt14_Function_baseD1Ev>
 8083052:	4620      	mov	r0, r4
 8083054:	bd10      	pop	{r4, pc}
	...

08083058 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8083058:	4803      	ldr	r0, [pc, #12]	; (8083068 <_GLOBAL__sub_I_RGB+0x10>)
 808305a:	2300      	movs	r3, #0
 808305c:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 808305e:	4a03      	ldr	r2, [pc, #12]	; (808306c <_GLOBAL__sub_I_RGB+0x14>)
 8083060:	4903      	ldr	r1, [pc, #12]	; (8083070 <_GLOBAL__sub_I_RGB+0x18>)
 8083062:	f000 bcd3 	b.w	8083a0c <__aeabi_atexit>
 8083066:	bf00      	nop
 8083068:	2000070c 	.word	0x2000070c
 808306c:	200004e8 	.word	0x200004e8
 8083070:	0808304b 	.word	0x0808304b

08083074 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 8083074:	4770      	bx	lr

08083076 <_ZN8SPIClassD0Ev>:
 8083076:	b510      	push	{r4, lr}
 8083078:	4604      	mov	r4, r0
 808307a:	f7fd f810 	bl	808009e <_ZdlPv>
 808307e:	4620      	mov	r0, r4
 8083080:	bd10      	pop	{r4, pc}
	...

08083084 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8083084:	b570      	push	{r4, r5, r6, lr}
 8083086:	4604      	mov	r4, r0
 8083088:	460e      	mov	r6, r1
 808308a:	4b07      	ldr	r3, [pc, #28]	; (80830a8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 808308c:	2500      	movs	r5, #0
 808308e:	6003      	str	r3, [r0, #0]
 8083090:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 8083094:	f7fe fcc6 	bl	8081a24 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 8083098:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 808309a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 808309c:	f7fe fdba 	bl	8081c14 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80830a0:	60a5      	str	r5, [r4, #8]
}
 80830a2:	4620      	mov	r0, r4
 80830a4:	bd70      	pop	{r4, r5, r6, pc}
 80830a6:	bf00      	nop
 80830a8:	08085de4 	.word	0x08085de4

080830ac <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80830ac:	7900      	ldrb	r0, [r0, #4]
 80830ae:	f7fe bdb9 	b.w	8081c24 <HAL_SPI_Is_Enabled>

080830b2 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80830b2:	b510      	push	{r4, lr}
 80830b4:	4604      	mov	r4, r0
{
	free(buffer);
 80830b6:	6800      	ldr	r0, [r0, #0]
 80830b8:	f7fe ff42 	bl	8081f40 <free>
}
 80830bc:	4620      	mov	r0, r4
 80830be:	bd10      	pop	{r4, pc}

080830c0 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80830c0:	b510      	push	{r4, lr}
 80830c2:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80830c4:	6800      	ldr	r0, [r0, #0]
 80830c6:	b108      	cbz	r0, 80830cc <_ZN6String10invalidateEv+0xc>
 80830c8:	f7fe ff3a 	bl	8081f40 <free>
	buffer = NULL;
 80830cc:	2300      	movs	r3, #0
 80830ce:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80830d0:	60a3      	str	r3, [r4, #8]
 80830d2:	6063      	str	r3, [r4, #4]
 80830d4:	bd10      	pop	{r4, pc}

080830d6 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80830d6:	b538      	push	{r3, r4, r5, lr}
 80830d8:	4604      	mov	r4, r0
 80830da:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80830dc:	6800      	ldr	r0, [r0, #0]
 80830de:	3101      	adds	r1, #1
 80830e0:	f7fe ff36 	bl	8081f50 <realloc>
	if (newbuffer) {
 80830e4:	b110      	cbz	r0, 80830ec <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80830e6:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80830ea:	2001      	movs	r0, #1
	}
	return 0;
}
 80830ec:	bd38      	pop	{r3, r4, r5, pc}

080830ee <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80830ee:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80830f0:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80830f2:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80830f4:	b113      	cbz	r3, 80830fc <_ZN6String7reserveEj+0xe>
 80830f6:	6843      	ldr	r3, [r0, #4]
 80830f8:	428b      	cmp	r3, r1
 80830fa:	d207      	bcs.n	808310c <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80830fc:	4620      	mov	r0, r4
 80830fe:	f7ff ffea 	bl	80830d6 <_ZN6String12changeBufferEj>
 8083102:	b120      	cbz	r0, 808310e <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 8083104:	68a3      	ldr	r3, [r4, #8]
 8083106:	b90b      	cbnz	r3, 808310c <_ZN6String7reserveEj+0x1e>
 8083108:	6822      	ldr	r2, [r4, #0]
 808310a:	7013      	strb	r3, [r2, #0]
 808310c:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 808310e:	bd10      	pop	{r4, pc}

08083110 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8083110:	b570      	push	{r4, r5, r6, lr}
 8083112:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8083114:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8083116:	4604      	mov	r4, r0
 8083118:	4615      	mov	r5, r2
	if (!reserve(length)) {
 808311a:	f7ff ffe8 	bl	80830ee <_ZN6String7reserveEj>
 808311e:	b918      	cbnz	r0, 8083128 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 8083120:	4620      	mov	r0, r4
 8083122:	f7ff ffcd 	bl	80830c0 <_ZN6String10invalidateEv>
		return *this;
 8083126:	e009      	b.n	808313c <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 8083128:	462a      	mov	r2, r5
 808312a:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 808312c:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 808312e:	6820      	ldr	r0, [r4, #0]
 8083130:	f001 fe44 	bl	8084dbc <memcpy>
	buffer[len] = 0;
 8083134:	6822      	ldr	r2, [r4, #0]
 8083136:	68a3      	ldr	r3, [r4, #8]
 8083138:	2100      	movs	r1, #0
 808313a:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 808313c:	4620      	mov	r0, r4
 808313e:	bd70      	pop	{r4, r5, r6, pc}

08083140 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8083140:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8083142:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8083144:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8083146:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8083148:	6043      	str	r3, [r0, #4]
	len = 0;
 808314a:	6083      	str	r3, [r0, #8]
	flags = 0;
 808314c:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 808314e:	460d      	mov	r5, r1
 8083150:	b139      	cbz	r1, 8083162 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 8083152:	4608      	mov	r0, r1
 8083154:	f001 feb5 	bl	8084ec2 <strlen>
 8083158:	4629      	mov	r1, r5
 808315a:	4602      	mov	r2, r0
 808315c:	4620      	mov	r0, r4
 808315e:	f7ff ffd7 	bl	8083110 <_ZN6String4copyEPKcj>
}
 8083162:	4620      	mov	r0, r4
 8083164:	bd38      	pop	{r3, r4, r5, pc}

08083166 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8083166:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 8083168:	b510      	push	{r4, lr}
 808316a:	460b      	mov	r3, r1
 808316c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 808316e:	d007      	beq.n	8083180 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8083170:	6809      	ldr	r1, [r1, #0]
 8083172:	b119      	cbz	r1, 808317c <_ZN6StringaSERKS_+0x16>
 8083174:	689a      	ldr	r2, [r3, #8]
 8083176:	f7ff ffcb 	bl	8083110 <_ZN6String4copyEPKcj>
 808317a:	e001      	b.n	8083180 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 808317c:	f7ff ffa0 	bl	80830c0 <_ZN6String10invalidateEv>

	return *this;
}
 8083180:	4620      	mov	r0, r4
 8083182:	bd10      	pop	{r4, pc}

08083184 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 8083184:	b510      	push	{r4, lr}
 8083186:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8083188:	2300      	movs	r3, #0
 808318a:	6003      	str	r3, [r0, #0]
	capacity = 0;
 808318c:	6043      	str	r3, [r0, #4]
	len = 0;
 808318e:	6083      	str	r3, [r0, #8]
	flags = 0;
 8083190:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 8083192:	f7ff ffe8 	bl	8083166 <_ZN6StringaSERKS_>
}
 8083196:	4620      	mov	r0, r4
 8083198:	bd10      	pop	{r4, pc}

0808319a <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 808319a:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 808319c:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 808319e:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80831a0:	b912      	cbnz	r2, 80831a8 <_ZNK6String6equalsEPKc+0xe>
 80831a2:	b919      	cbnz	r1, 80831ac <_ZNK6String6equalsEPKc+0x12>
 80831a4:	2001      	movs	r0, #1
 80831a6:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80831a8:	b911      	cbnz	r1, 80831b0 <_ZNK6String6equalsEPKc+0x16>
 80831aa:	6803      	ldr	r3, [r0, #0]
 80831ac:	7818      	ldrb	r0, [r3, #0]
 80831ae:	e002      	b.n	80831b6 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80831b0:	6800      	ldr	r0, [r0, #0]
 80831b2:	f001 fe59 	bl	8084e68 <strcmp>
 80831b6:	fab0 f080 	clz	r0, r0
 80831ba:	0940      	lsrs	r0, r0, #5
}
 80831bc:	bd08      	pop	{r3, pc}

080831be <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
 80831be:	b570      	push	{r4, r5, r6, lr}
 80831c0:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
 80831c2:	b19a      	cbz	r2, 80831ec <_ZNK6String8getBytesEPhjj+0x2e>
 80831c4:	b191      	cbz	r1, 80831ec <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
 80831c6:	6885      	ldr	r5, [r0, #8]
 80831c8:	429d      	cmp	r5, r3
 80831ca:	d802      	bhi.n	80831d2 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
 80831cc:	2300      	movs	r3, #0
 80831ce:	700b      	strb	r3, [r1, #0]
		return;
 80831d0:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
 80831d2:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
 80831d4:	1aed      	subs	r5, r5, r3
 80831d6:	42ac      	cmp	r4, r5
 80831d8:	bf28      	it	cs
 80831da:	462c      	movcs	r4, r5
	strncpy((char *)buf, buffer + index, n);
 80831dc:	6801      	ldr	r1, [r0, #0]
 80831de:	4622      	mov	r2, r4
 80831e0:	4419      	add	r1, r3
 80831e2:	4630      	mov	r0, r6
 80831e4:	f001 fe8a 	bl	8084efc <strncpy>
	buf[n] = 0;
 80831e8:	2300      	movs	r3, #0
 80831ea:	5533      	strb	r3, [r6, r4]
 80831ec:	bd70      	pop	{r4, r5, r6, pc}

080831ee <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 80831ee:	4601      	mov	r1, r0
 80831f0:	2200      	movs	r2, #0
 80831f2:	208c      	movs	r0, #140	; 0x8c
 80831f4:	f7fe bc26 	b.w	8081a44 <HAL_Core_System_Reset_Ex>

080831f8 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 80831f8:	2000      	movs	r0, #0
 80831fa:	f7ff bff8 	b.w	80831ee <_ZN11SystemClass5resetEm>
	...

08083200 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 8083200:	b510      	push	{r4, lr}
 8083202:	4604      	mov	r4, r0
 8083204:	4608      	mov	r0, r1
 8083206:	4611      	mov	r1, r2
 8083208:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
 808320a:	2300      	movs	r3, #0
 808320c:	f7fe fda2 	bl	8081d54 <system_sleep>
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
 8083210:	4b06      	ldr	r3, [pc, #24]	; (808322c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x2c>)
 8083212:	2200      	movs	r2, #0
 8083214:	701a      	strb	r2, [r3, #0]
 8083216:	f64f 72ff 	movw	r2, #65535	; 0xffff
 808321a:	8058      	strh	r0, [r3, #2]
 808321c:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
 808321e:	681a      	ldr	r2, [r3, #0]
 8083220:	889b      	ldrh	r3, [r3, #4]
 8083222:	6022      	str	r2, [r4, #0]
 8083224:	80a3      	strh	r3, [r4, #4]
}
 8083226:	4620      	mov	r0, r4
 8083228:	bd10      	pop	{r4, pc}
 808322a:	bf00      	nop
 808322c:	2000071c 	.word	0x2000071c

08083230 <_ZN11SleepResultC1EiPKtj>:
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 8083230:	b510      	push	{r4, lr}
 8083232:	2400      	movs	r4, #0
 8083234:	7004      	strb	r4, [r0, #0]
 8083236:	8044      	strh	r4, [r0, #2]
 8083238:	f64f 74ff 	movw	r4, #65535	; 0xffff
    if (ret > 0) {
 808323c:	2900      	cmp	r1, #0
bool SystemClass::enableFeature(const WiFiTesterFeature feature) {
    WiFiTester::init();
    return true;
}

SleepResult::SleepResult(int ret, const pin_t* pins, size_t pinsSize) {
 808323e:	8084      	strh	r4, [r0, #4]
    if (ret > 0) {
 8083240:	dd07      	ble.n	8083252 <_ZN11SleepResultC1EiPKtj+0x22>
        // pin
        --ret;
        if ((size_t)ret < pinsSize) {
 8083242:	3901      	subs	r1, #1
 8083244:	4299      	cmp	r1, r3
 8083246:	d209      	bcs.n	808325c <_ZN11SleepResultC1EiPKtj+0x2c>
            pin_ = pins[ret];
 8083248:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 808324c:	8083      	strh	r3, [r0, #4]
            reason_ = WAKEUP_REASON_PIN;
 808324e:	2301      	movs	r3, #1
 8083250:	e001      	b.n	8083256 <_ZN11SleepResultC1EiPKtj+0x26>
            err_ = SYSTEM_ERROR_NONE;
        }
    } else if (ret == 0) {
 8083252:	d102      	bne.n	808325a <_ZN11SleepResultC1EiPKtj+0x2a>
        reason_ = WAKEUP_REASON_RTC;
 8083254:	2302      	movs	r3, #2
 8083256:	7003      	strb	r3, [r0, #0]
 8083258:	bd10      	pop	{r4, pc}
        err_ = SYSTEM_ERROR_NONE;
    } else {
        err_ = static_cast<system_error_t>(ret);
 808325a:	8041      	strh	r1, [r0, #2]
    }
}
 808325c:	bd10      	pop	{r4, pc}
	...

08083260 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE>:
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 8083260:	b570      	push	{r4, r5, r6, lr}
 8083262:	460d      	mov	r5, r1
 8083264:	4616      	mov	r6, r2
 8083266:	b086      	sub	sp, #24
 8083268:	461a      	mov	r2, r3
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 808326a:	2300      	movs	r3, #0
 808326c:	9302      	str	r3, [sp, #8]
 808326e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
 8083270:	4604      	mov	r4, r0
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
 8083272:	9301      	str	r3, [sp, #4]
 8083274:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8083276:	4631      	mov	r1, r6
 8083278:	9300      	str	r3, [sp, #0]
 808327a:	4628      	mov	r0, r5
 808327c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808327e:	f7fe fda5 	bl	8081dcc <system_sleep_pins>
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
 8083282:	4633      	mov	r3, r6
 8083284:	462a      	mov	r2, r5
 8083286:	4601      	mov	r1, r0
 8083288:	a804      	add	r0, sp, #16
 808328a:	f7ff ffd1 	bl	8083230 <_ZN11SleepResultC1EiPKtj>
 808328e:	4b06      	ldr	r3, [pc, #24]	; (80832a8 <_ZN11SystemClass12sleepPinImplEPKtjPK13InterruptModejlN8particle5FlagsI19SleepOptionFlagTypemEE+0x48>)
 8083290:	9804      	ldr	r0, [sp, #16]
 8083292:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8083296:	6018      	str	r0, [r3, #0]
    return System.sleepResult_;
}
 8083298:	4620      	mov	r0, r4
    return System.sleepResult_;
}

SleepResult SystemClass::sleepPinImpl(const uint16_t* pins, size_t pins_count, const InterruptMode* modes, size_t modes_count, long seconds, SleepOptionFlags flags) {
    int ret = system_sleep_pins(pins, pins_count, modes, modes_count, seconds, flags.value(), nullptr);
    System.sleepResult_ = SleepResult(ret, pins, pins_count);
 808329a:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
 808329c:	681a      	ldr	r2, [r3, #0]
 808329e:	889b      	ldrh	r3, [r3, #4]
 80832a0:	6022      	str	r2, [r4, #0]
 80832a2:	80a3      	strh	r3, [r4, #4]
}
 80832a4:	b006      	add	sp, #24
 80832a6:	bd70      	pop	{r4, r5, r6, pc}
 80832a8:	2000071c 	.word	0x2000071c

080832ac <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80832ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80832b0:	4b03      	ldr	r3, [pc, #12]	; (80832c0 <_GLOBAL__sub_I_System+0x14>)
 80832b2:	2000      	movs	r0, #0
 80832b4:	7018      	strb	r0, [r3, #0]
 80832b6:	8058      	strh	r0, [r3, #2]
 80832b8:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80832ba:	f7fe bd3b 	b.w	8081d34 <set_system_mode>
 80832be:	bf00      	nop
 80832c0:	2000071c 	.word	0x2000071c

080832c4 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80832c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 80832c6:	4b14      	ldr	r3, [pc, #80]	; (8083318 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80832c8:	4f14      	ldr	r7, [pc, #80]	; (808331c <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80832ca:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 80832cc:	4b14      	ldr	r3, [pc, #80]	; (8083320 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80832ce:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 80832d0:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 80832d2:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 80832d4:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 80832d6:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80832d8:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80832da:	d01b      	beq.n	8083314 <_ZL22Refresh_UnixTime_Cachel+0x50>
 80832dc:	a80a      	add	r0, sp, #40	; 0x28
 80832de:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 80832e2:	f001 fc73 	bl	8084bcc <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80832e6:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80832e8:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 80832ea:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80832ec:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80832f0:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 80832f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80832f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80832f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80832f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80832fa:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80832fe:	4c09      	ldr	r4, [pc, #36]	; (8083324 <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 8083300:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8083304:	ad01      	add	r5, sp, #4
 8083306:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8083308:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 808330a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 808330c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 808330e:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8083310:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 8083314:	b00b      	add	sp, #44	; 0x2c
 8083316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083318:	20000754 	.word	0x20000754
 808331c:	20000750 	.word	0x20000750
 8083320:	2000074c 	.word	0x2000074c
 8083324:	20000724 	.word	0x20000724

08083328 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 8083328:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 808332a:	2000      	movs	r0, #0
 808332c:	f7fe fda0 	bl	8081e70 <spark_sync_time_pending>
 8083330:	b128      	cbz	r0, 808333e <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8083332:	f7fe fd7d 	bl	8081e30 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 8083336:	f080 0001 	eor.w	r0, r0, #1
 808333a:	b2c0      	uxtb	r0, r0
 808333c:	bd08      	pop	{r3, pc}
 808333e:	2001      	movs	r0, #1
    }
 8083340:	bd08      	pop	{r3, pc}
	...

08083344 <_ZN9TimeClass4hourEl>:
	return hour(now());
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
 8083344:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 8083346:	f7ff ffbd 	bl	80832c4 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_hour;
}
 808334a:	4b01      	ldr	r3, [pc, #4]	; (8083350 <_ZN9TimeClass4hourEl+0xc>)
 808334c:	6898      	ldr	r0, [r3, #8]
 808334e:	bd08      	pop	{r3, pc}
 8083350:	20000724 	.word	0x20000724

08083354 <_ZN9TimeClass3dayEl>:
	return day(now());
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
 8083354:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 8083356:	f7ff ffb5 	bl	80832c4 <_ZL22Refresh_UnixTime_Cachel>
	return calendar_time_cache.tm_mday;
}
 808335a:	4b01      	ldr	r3, [pc, #4]	; (8083360 <_ZN9TimeClass3dayEl+0xc>)
 808335c:	68d8      	ldr	r0, [r3, #12]
 808335e:	bd08      	pop	{r3, pc}
 8083360:	20000724 	.word	0x20000724

08083364 <_ZN9TimeClass4zoneEf>:
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8083364:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8083366:	4909      	ldr	r1, [pc, #36]	; (808338c <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8083368:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 808336a:	f001 fb8d 	bl	8084a88 <__aeabi_fcmplt>
 808336e:	b960      	cbnz	r0, 808338a <_ZN9TimeClass4zoneEf+0x26>
 8083370:	4907      	ldr	r1, [pc, #28]	; (8083390 <_ZN9TimeClass4zoneEf+0x2c>)
 8083372:	4620      	mov	r0, r4
 8083374:	f001 fba6 	bl	8084ac4 <__aeabi_fcmpgt>
 8083378:	b938      	cbnz	r0, 808338a <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 808337a:	4906      	ldr	r1, [pc, #24]	; (8083394 <_ZN9TimeClass4zoneEf+0x30>)
 808337c:	4620      	mov	r0, r4
 808337e:	f001 f9e5 	bl	808474c <__aeabi_fmul>
 8083382:	f001 fba9 	bl	8084ad8 <__aeabi_f2iz>
 8083386:	4b04      	ldr	r3, [pc, #16]	; (8083398 <_ZN9TimeClass4zoneEf+0x34>)
 8083388:	6018      	str	r0, [r3, #0]
 808338a:	bd10      	pop	{r4, pc}
 808338c:	c1400000 	.word	0xc1400000
 8083390:	41600000 	.word	0x41600000
 8083394:	45610000 	.word	0x45610000
 8083398:	20000754 	.word	0x20000754

0808339c <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 808339c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 808339e:	4b0e      	ldr	r3, [pc, #56]	; (80833d8 <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80833a0:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 80833a2:	681b      	ldr	r3, [r3, #0]
 80833a4:	a802      	add	r0, sp, #8
 80833a6:	4419      	add	r1, r3
 80833a8:	4b0c      	ldr	r3, [pc, #48]	; (80833dc <_ZN9TimeClass7timeStrEl+0x40>)
 80833aa:	681b      	ldr	r3, [r3, #0]
 80833ac:	4419      	add	r1, r3
 80833ae:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 80833b2:	f001 fc0b 	bl	8084bcc <localtime>
        char* ascstr = asctime(calendar_time);
 80833b6:	f001 fbb5 	bl	8084b24 <asctime>
 80833ba:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 80833bc:	f001 fd81 	bl	8084ec2 <strlen>
        ascstr[len-1] = 0; // remove final newline
 80833c0:	2300      	movs	r3, #0
 80833c2:	4428      	add	r0, r5
 80833c4:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 80833c8:	4629      	mov	r1, r5
 80833ca:	4620      	mov	r0, r4
 80833cc:	f7ff feb8 	bl	8083140 <_ZN6StringC1EPK19__FlashStringHelper>
}
 80833d0:	4620      	mov	r0, r4
 80833d2:	b003      	add	sp, #12
 80833d4:	bd30      	pop	{r4, r5, pc}
 80833d6:	bf00      	nop
 80833d8:	20000754 	.word	0x20000754
 80833dc:	2000074c 	.word	0x2000074c

080833e0 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80833e0:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80833e2:	2000      	movs	r0, #0
 80833e4:	f7fe fb56 	bl	8081a94 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80833e8:	4604      	mov	r4, r0
 80833ea:	b968      	cbnz	r0, 8083408 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80833ec:	f7fe fc9a 	bl	8081d24 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80833f0:	2801      	cmp	r0, #1
 80833f2:	d10b      	bne.n	808340c <_ZN9TimeClass7isValidEv+0x2c>
 80833f4:	4620      	mov	r0, r4
 80833f6:	f7fe fccd 	bl	8081d94 <system_thread_get_state>
 80833fa:	b938      	cbnz	r0, 808340c <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80833fc:	f7ff ff94 	bl	8083328 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8083400:	b930      	cbnz	r0, 8083410 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 8083402:	f7fe fcfd 	bl	8081e00 <spark_process>
 8083406:	e7f9      	b.n	80833fc <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 8083408:	2001      	movs	r0, #1
 808340a:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 808340c:	2000      	movs	r0, #0
 808340e:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 8083410:	f7ff ff8a 	bl	8083328 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 8083414:	2000      	movs	r0, #0
 8083416:	f7fe fb3d 	bl	8081a94 <HAL_RTC_Time_Is_Valid>
 808341a:	3000      	adds	r0, #0
 808341c:	bf18      	it	ne
 808341e:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 8083420:	bd10      	pop	{r4, pc}

08083422 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 8083422:	b508      	push	{r3, lr}
    (void)isValid();
 8083424:	f7ff ffdc 	bl	80833e0 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 8083428:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 808342c:	f7fe bb2a 	b.w	8081a84 <HAL_RTC_Get_UnixTime>

08083430 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 8083430:	b508      	push	{r3, lr}
	return hour(now());
 8083432:	f7ff fff6 	bl	8083422 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 8083436:	f7ff ff45 	bl	80832c4 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 808343a:	4b01      	ldr	r3, [pc, #4]	; (8083440 <_ZN9TimeClass4hourEv+0x10>)
 808343c:	6898      	ldr	r0, [r3, #8]
 808343e:	bd08      	pop	{r3, pc}
 8083440:	20000724 	.word	0x20000724

08083444 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
 8083444:	b508      	push	{r3, lr}
	return minute(now());
 8083446:	f7ff ffec 	bl	8083422 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
 808344a:	f7ff ff3b 	bl	80832c4 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
 808344e:	4b01      	ldr	r3, [pc, #4]	; (8083454 <_ZN9TimeClass6minuteEv+0x10>)
 8083450:	6858      	ldr	r0, [r3, #4]
 8083452:	bd08      	pop	{r3, pc}
 8083454:	20000724 	.word	0x20000724

08083458 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
 8083458:	b508      	push	{r3, lr}
	return day(now());
 808345a:	f7ff ffe2 	bl	8083422 <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
 808345e:	f7ff ff31 	bl	80832c4 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
 8083462:	4b01      	ldr	r3, [pc, #4]	; (8083468 <_ZN9TimeClass3dayEv+0x10>)
 8083464:	68d8      	ldr	r0, [r3, #12]
 8083466:	bd08      	pop	{r3, pc}
 8083468:	20000724 	.word	0x20000724

0808346c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 808346c:	4b02      	ldr	r3, [pc, #8]	; (8083478 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 808346e:	681a      	ldr	r2, [r3, #0]
 8083470:	4b02      	ldr	r3, [pc, #8]	; (808347c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8083472:	601a      	str	r2, [r3, #0]
 8083474:	4770      	bx	lr
 8083476:	bf00      	nop
 8083478:	20000430 	.word	0x20000430
 808347c:	20000748 	.word	0x20000748

08083480 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8083480:	4770      	bx	lr

08083482 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8083482:	7441      	strb	r1, [r0, #17]
 8083484:	4770      	bx	lr

08083486 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 8083486:	7c00      	ldrb	r0, [r0, #16]
 8083488:	f7fe bc0c 	b.w	8081ca4 <HAL_USART_Available_Data_For_Write>

0808348c <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 808348c:	7c00      	ldrb	r0, [r0, #16]
 808348e:	f7fe bbe1 	b.w	8081c54 <HAL_USART_Available_Data>

08083492 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 8083492:	7c00      	ldrb	r0, [r0, #16]
 8083494:	f7fe bbee 	b.w	8081c74 <HAL_USART_Peek_Data>

08083498 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 8083498:	7c00      	ldrb	r0, [r0, #16]
 808349a:	f7fe bbe3 	b.w	8081c64 <HAL_USART_Read_Data>

0808349e <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 808349e:	7c00      	ldrb	r0, [r0, #16]
 80834a0:	f7fe bbf0 	b.w	8081c84 <HAL_USART_Flush_Data>

080834a4 <_ZN11USARTSerialD0Ev>:
 80834a4:	b510      	push	{r4, lr}
 80834a6:	4604      	mov	r4, r0
 80834a8:	f7fc fdf9 	bl	808009e <_ZdlPv>
 80834ac:	4620      	mov	r0, r4
 80834ae:	bd10      	pop	{r4, pc}

080834b0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80834b0:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80834b2:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80834b4:	4604      	mov	r4, r0
 80834b6:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80834b8:	b925      	cbnz	r5, 80834c4 <_ZN11USARTSerial5writeEh+0x14>
 80834ba:	7c00      	ldrb	r0, [r0, #16]
 80834bc:	f7fe fbf2 	bl	8081ca4 <HAL_USART_Available_Data_For_Write>
 80834c0:	2800      	cmp	r0, #0
 80834c2:	dd05      	ble.n	80834d0 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80834c4:	4631      	mov	r1, r6
 80834c6:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80834c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80834cc:	f7fe bbba 	b.w	8081c44 <HAL_USART_Write_Data>
  }
  return 0;
}
 80834d0:	4628      	mov	r0, r5
 80834d2:	bd70      	pop	{r4, r5, r6, pc}

080834d4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80834d4:	b510      	push	{r4, lr}
 80834d6:	4604      	mov	r4, r0
 80834d8:	4608      	mov	r0, r1
 80834da:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80834dc:	2200      	movs	r2, #0
 80834de:	6062      	str	r2, [r4, #4]
 80834e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80834e4:	60a2      	str	r2, [r4, #8]
 80834e6:	4a05      	ldr	r2, [pc, #20]	; (80834fc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80834e8:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80834ea:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80834ec:	2201      	movs	r2, #1
 80834ee:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80834f0:	461a      	mov	r2, r3
 80834f2:	f7fe fb9f 	bl	8081c34 <HAL_USART_Init>
}
 80834f6:	4620      	mov	r0, r4
 80834f8:	bd10      	pop	{r4, pc}
 80834fa:	bf00      	nop
 80834fc:	08085e1c 	.word	0x08085e1c

08083500 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 8083500:	7c00      	ldrb	r0, [r0, #16]
 8083502:	f7fe bbc7 	b.w	8081c94 <HAL_USART_Is_Enabled>
	...

08083508 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8083508:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 808350a:	4d0c      	ldr	r5, [pc, #48]	; (808353c <_Z22__fetch_global_Serial1v+0x34>)
 808350c:	6829      	ldr	r1, [r5, #0]
 808350e:	f011 0401 	ands.w	r4, r1, #1
 8083512:	d111      	bne.n	8083538 <_Z22__fetch_global_Serial1v+0x30>
 8083514:	4628      	mov	r0, r5
 8083516:	f7fc fdc4 	bl	80800a2 <__cxa_guard_acquire>
 808351a:	b168      	cbz	r0, 8083538 <_Z22__fetch_global_Serial1v+0x30>
 808351c:	4a08      	ldr	r2, [pc, #32]	; (8083540 <_Z22__fetch_global_Serial1v+0x38>)
 808351e:	4621      	mov	r1, r4
 8083520:	4b08      	ldr	r3, [pc, #32]	; (8083544 <_Z22__fetch_global_Serial1v+0x3c>)
 8083522:	4809      	ldr	r0, [pc, #36]	; (8083548 <_Z22__fetch_global_Serial1v+0x40>)
 8083524:	f7ff ffd6 	bl	80834d4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8083528:	4628      	mov	r0, r5
 808352a:	f7fc fdbf 	bl	80800ac <__cxa_guard_release>
 808352e:	4a07      	ldr	r2, [pc, #28]	; (808354c <_Z22__fetch_global_Serial1v+0x44>)
 8083530:	4907      	ldr	r1, [pc, #28]	; (8083550 <_Z22__fetch_global_Serial1v+0x48>)
 8083532:	4805      	ldr	r0, [pc, #20]	; (8083548 <_Z22__fetch_global_Serial1v+0x40>)
 8083534:	f000 fa6a 	bl	8083a0c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8083538:	4803      	ldr	r0, [pc, #12]	; (8083548 <_Z22__fetch_global_Serial1v+0x40>)
 808353a:	bd38      	pop	{r3, r4, r5, pc}
 808353c:	200007f0 	.word	0x200007f0
 8083540:	200007f4 	.word	0x200007f4
 8083544:	2000076c 	.word	0x2000076c
 8083548:	20000758 	.word	0x20000758
 808354c:	200004e8 	.word	0x200004e8
 8083550:	08083481 	.word	0x08083481

08083554 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8083554:	7441      	strb	r1, [r0, #17]
 8083556:	4770      	bx	lr

08083558 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8083558:	4770      	bx	lr

0808355a <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 808355a:	2100      	movs	r1, #0
 808355c:	7c00      	ldrb	r0, [r0, #16]
 808355e:	f7fe bbc1 	b.w	8081ce4 <HAL_USB_USART_Receive_Data>

08083562 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 8083562:	2101      	movs	r1, #1
 8083564:	7c00      	ldrb	r0, [r0, #16]
 8083566:	f7fe bbbd 	b.w	8081ce4 <HAL_USB_USART_Receive_Data>

0808356a <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 808356a:	7c00      	ldrb	r0, [r0, #16]
 808356c:	f7fe bbb2 	b.w	8081cd4 <HAL_USB_USART_Available_Data_For_Write>

08083570 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 8083570:	7c00      	ldrb	r0, [r0, #16]
 8083572:	f7fe bba7 	b.w	8081cc4 <HAL_USB_USART_Available_Data>

08083576 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 8083576:	b538      	push	{r3, r4, r5, lr}
 8083578:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808357a:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 808357c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808357e:	f7fe fba9 	bl	8081cd4 <HAL_USB_USART_Available_Data_For_Write>
 8083582:	2800      	cmp	r0, #0
 8083584:	dc01      	bgt.n	808358a <_ZN9USBSerial5writeEh+0x14>
 8083586:	7c60      	ldrb	r0, [r4, #17]
 8083588:	b120      	cbz	r0, 8083594 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 808358a:	4629      	mov	r1, r5
 808358c:	7c20      	ldrb	r0, [r4, #16]
 808358e:	f7fe fbb1 	bl	8081cf4 <HAL_USB_USART_Send_Data>
    return 1;
 8083592:	2001      	movs	r0, #1
  }
  return 0;
}
 8083594:	bd38      	pop	{r3, r4, r5, pc}

08083596 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 8083596:	7c00      	ldrb	r0, [r0, #16]
 8083598:	f7fe bbb4 	b.w	8081d04 <HAL_USB_USART_Flush_Data>

0808359c <_ZN9USBSerialD0Ev>:
 808359c:	b510      	push	{r4, lr}
 808359e:	4604      	mov	r4, r0
 80835a0:	f7fc fd7d 	bl	808009e <_ZdlPv>
 80835a4:	4620      	mov	r0, r4
 80835a6:	bd10      	pop	{r4, pc}

080835a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80835a8:	b510      	push	{r4, lr}
 80835aa:	4604      	mov	r4, r0
 80835ac:	2300      	movs	r3, #0
 80835ae:	6063      	str	r3, [r4, #4]
 80835b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80835b4:	60a3      	str	r3, [r4, #8]
 80835b6:	4b05      	ldr	r3, [pc, #20]	; (80835cc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80835b8:	4608      	mov	r0, r1
 80835ba:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80835bc:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80835be:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80835c0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80835c2:	4611      	mov	r1, r2
 80835c4:	f7fe fb76 	bl	8081cb4 <HAL_USB_USART_Init>
}
 80835c8:	4620      	mov	r0, r4
 80835ca:	bd10      	pop	{r4, pc}
 80835cc:	08085e4c 	.word	0x08085e4c

080835d0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80835d0:	b510      	push	{r4, lr}
 80835d2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80835d4:	2214      	movs	r2, #20
 80835d6:	2100      	movs	r1, #0
 80835d8:	f001 fc16 	bl	8084e08 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80835dc:	4b05      	ldr	r3, [pc, #20]	; (80835f4 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80835de:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80835e0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80835e2:	4b05      	ldr	r3, [pc, #20]	; (80835f8 <_Z19acquireSerialBufferv+0x28>)
 80835e4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80835e6:	f240 1301 	movw	r3, #257	; 0x101
 80835ea:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80835ec:	2381      	movs	r3, #129	; 0x81
 80835ee:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80835f0:	bd10      	pop	{r4, pc}
 80835f2:	bf00      	nop
 80835f4:	200008fd 	.word	0x200008fd
 80835f8:	2000087c 	.word	0x2000087c

080835fc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80835fc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80835fe:	4d0e      	ldr	r5, [pc, #56]	; (8083638 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 8083600:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8083602:	a801      	add	r0, sp, #4
 8083604:	f7ff ffe4 	bl	80835d0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8083608:	6829      	ldr	r1, [r5, #0]
 808360a:	f011 0401 	ands.w	r4, r1, #1
 808360e:	d110      	bne.n	8083632 <_Z16_fetch_usbserialv+0x36>
 8083610:	4628      	mov	r0, r5
 8083612:	f7fc fd46 	bl	80800a2 <__cxa_guard_acquire>
 8083616:	b160      	cbz	r0, 8083632 <_Z16_fetch_usbserialv+0x36>
 8083618:	aa01      	add	r2, sp, #4
 808361a:	4621      	mov	r1, r4
 808361c:	4807      	ldr	r0, [pc, #28]	; (808363c <_Z16_fetch_usbserialv+0x40>)
 808361e:	f7ff ffc3 	bl	80835a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8083622:	4628      	mov	r0, r5
 8083624:	f7fc fd42 	bl	80800ac <__cxa_guard_release>
 8083628:	4a05      	ldr	r2, [pc, #20]	; (8083640 <_Z16_fetch_usbserialv+0x44>)
 808362a:	4906      	ldr	r1, [pc, #24]	; (8083644 <_Z16_fetch_usbserialv+0x48>)
 808362c:	4803      	ldr	r0, [pc, #12]	; (808363c <_Z16_fetch_usbserialv+0x40>)
 808362e:	f000 f9ed 	bl	8083a0c <__aeabi_atexit>
	return _usbserial;
}
 8083632:	4802      	ldr	r0, [pc, #8]	; (808363c <_Z16_fetch_usbserialv+0x40>)
 8083634:	b007      	add	sp, #28
 8083636:	bd30      	pop	{r4, r5, pc}
 8083638:	20000878 	.word	0x20000878
 808363c:	20000a00 	.word	0x20000a00
 8083640:	200004e8 	.word	0x200004e8
 8083644:	08083559 	.word	0x08083559

08083648 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8083648:	b510      	push	{r4, lr}
 808364a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 808364c:	2214      	movs	r2, #20
 808364e:	2100      	movs	r1, #0
 8083650:	f001 fbda 	bl	8084e08 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8083654:	4b05      	ldr	r3, [pc, #20]	; (808366c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8083656:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8083658:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 808365a:	4b05      	ldr	r3, [pc, #20]	; (8083670 <_Z23acquireUSBSerial1Bufferv+0x28>)
 808365c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808365e:	f240 1301 	movw	r3, #257	; 0x101
 8083662:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8083664:	2381      	movs	r3, #129	; 0x81
 8083666:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8083668:	bd10      	pop	{r4, pc}
 808366a:	bf00      	nop
 808366c:	20000ab0 	.word	0x20000ab0
 8083670:	20000a18 	.word	0x20000a18

08083674 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8083674:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8083676:	4c0e      	ldr	r4, [pc, #56]	; (80836b0 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8083678:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 808367a:	a801      	add	r0, sp, #4
 808367c:	f7ff ffe4 	bl	8083648 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8083680:	6823      	ldr	r3, [r4, #0]
 8083682:	07db      	lsls	r3, r3, #31
 8083684:	d410      	bmi.n	80836a8 <_Z17_fetch_usbserial1v+0x34>
 8083686:	4620      	mov	r0, r4
 8083688:	f7fc fd0b 	bl	80800a2 <__cxa_guard_acquire>
 808368c:	b160      	cbz	r0, 80836a8 <_Z17_fetch_usbserial1v+0x34>
 808368e:	aa01      	add	r2, sp, #4
 8083690:	2101      	movs	r1, #1
 8083692:	4808      	ldr	r0, [pc, #32]	; (80836b4 <_Z17_fetch_usbserial1v+0x40>)
 8083694:	f7ff ff88 	bl	80835a8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8083698:	4620      	mov	r0, r4
 808369a:	f7fc fd07 	bl	80800ac <__cxa_guard_release>
 808369e:	4a06      	ldr	r2, [pc, #24]	; (80836b8 <_Z17_fetch_usbserial1v+0x44>)
 80836a0:	4906      	ldr	r1, [pc, #24]	; (80836bc <_Z17_fetch_usbserial1v+0x48>)
 80836a2:	4804      	ldr	r0, [pc, #16]	; (80836b4 <_Z17_fetch_usbserial1v+0x40>)
 80836a4:	f000 f9b2 	bl	8083a0c <__aeabi_atexit>
  return _usbserial1;
}
 80836a8:	4802      	ldr	r0, [pc, #8]	; (80836b4 <_Z17_fetch_usbserial1v+0x40>)
 80836aa:	b006      	add	sp, #24
 80836ac:	bd10      	pop	{r4, pc}
 80836ae:	bf00      	nop
 80836b0:	20000a14 	.word	0x20000a14
 80836b4:	20000a9c 	.word	0x20000a9c
 80836b8:	200004e8 	.word	0x200004e8
 80836bc:	08083559 	.word	0x08083559

080836c0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80836c0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80836c2:	4b18      	ldr	r3, [pc, #96]	; (8083724 <serialEventRun+0x64>)
 80836c4:	b133      	cbz	r3, 80836d4 <serialEventRun+0x14>
 80836c6:	f7ff ff99 	bl	80835fc <_Z16_fetch_usbserialv>
 80836ca:	6803      	ldr	r3, [r0, #0]
 80836cc:	691b      	ldr	r3, [r3, #16]
 80836ce:	4798      	blx	r3
 80836d0:	2800      	cmp	r0, #0
 80836d2:	dc1e      	bgt.n	8083712 <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80836d4:	4b14      	ldr	r3, [pc, #80]	; (8083728 <serialEventRun+0x68>)
 80836d6:	b133      	cbz	r3, 80836e6 <serialEventRun+0x26>
 80836d8:	f7ff ff16 	bl	8083508 <_Z22__fetch_global_Serial1v>
 80836dc:	6803      	ldr	r3, [r0, #0]
 80836de:	691b      	ldr	r3, [r3, #16]
 80836e0:	4798      	blx	r3
 80836e2:	2800      	cmp	r0, #0
 80836e4:	dc18      	bgt.n	8083718 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80836e6:	4b11      	ldr	r3, [pc, #68]	; (808372c <serialEventRun+0x6c>)
 80836e8:	b10b      	cbz	r3, 80836ee <serialEventRun+0x2e>
 80836ea:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 80836ee:	4b10      	ldr	r3, [pc, #64]	; (8083730 <serialEventRun+0x70>)
 80836f0:	b10b      	cbz	r3, 80836f6 <serialEventRun+0x36>
 80836f2:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 80836f6:	4b0f      	ldr	r3, [pc, #60]	; (8083734 <serialEventRun+0x74>)
 80836f8:	b10b      	cbz	r3, 80836fe <serialEventRun+0x3e>
 80836fa:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80836fe:	4b0e      	ldr	r3, [pc, #56]	; (8083738 <serialEventRun+0x78>)
 8083700:	b17b      	cbz	r3, 8083722 <serialEventRun+0x62>
 8083702:	f7ff ffb7 	bl	8083674 <_Z17_fetch_usbserial1v>
 8083706:	6803      	ldr	r3, [r0, #0]
 8083708:	691b      	ldr	r3, [r3, #16]
 808370a:	4798      	blx	r3
 808370c:	2800      	cmp	r0, #0
 808370e:	dc06      	bgt.n	808371e <serialEventRun+0x5e>
 8083710:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8083712:	f3af 8000 	nop.w
 8083716:	e7dd      	b.n	80836d4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 8083718:	f3af 8000 	nop.w
 808371c:	e7e3      	b.n	80836e6 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 808371e:	f3af 8000 	nop.w
 8083722:	bd08      	pop	{r3, pc}
	...

0808373c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 808373c:	b508      	push	{r3, lr}
	serialEventRun();
 808373e:	f7ff ffbf 	bl	80836c0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8083742:	f7fe f997 	bl	8081a74 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8083746:	4b01      	ldr	r3, [pc, #4]	; (808374c <_post_loop+0x10>)
 8083748:	6018      	str	r0, [r3, #0]
 808374a:	bd08      	pop	{r3, pc}
 808374c:	20000bbc 	.word	0x20000bbc

08083750 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8083750:	4802      	ldr	r0, [pc, #8]	; (808375c <_Z33system_initialize_user_backup_ramv+0xc>)
 8083752:	4a03      	ldr	r2, [pc, #12]	; (8083760 <_Z33system_initialize_user_backup_ramv+0x10>)
 8083754:	4903      	ldr	r1, [pc, #12]	; (8083764 <_Z33system_initialize_user_backup_ramv+0x14>)
 8083756:	1a12      	subs	r2, r2, r0
 8083758:	f001 bb30 	b.w	8084dbc <memcpy>
 808375c:	40024000 	.word	0x40024000
 8083760:	4002420c 	.word	0x4002420c
 8083764:	08086120 	.word	0x08086120

08083768 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8083768:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 808376a:	2300      	movs	r3, #0
 808376c:	9300      	str	r3, [sp, #0]
 808376e:	461a      	mov	r2, r3
 8083770:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8083774:	f7fe fb20 	bl	8081db8 <system_ctrl_set_result>
}
 8083778:	b003      	add	sp, #12
 808377a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08083780 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 8083780:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8083782:	8843      	ldrh	r3, [r0, #2]
 8083784:	2b0a      	cmp	r3, #10
 8083786:	d008      	beq.n	808379a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8083788:	2b50      	cmp	r3, #80	; 0x50
 808378a:	d109      	bne.n	80837a0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 808378c:	4b09      	ldr	r3, [pc, #36]	; (80837b4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 808378e:	681b      	ldr	r3, [r3, #0]
 8083790:	b13b      	cbz	r3, 80837a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 8083792:	b003      	add	sp, #12
 8083794:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 8083798:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 808379a:	f7ff ffe5 	bl	8083768 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 808379e:	e006      	b.n	80837ae <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80837a0:	2300      	movs	r3, #0
 80837a2:	9300      	str	r3, [sp, #0]
 80837a4:	461a      	mov	r2, r3
 80837a6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80837aa:	f7fe fb05 	bl	8081db8 <system_ctrl_set_result>
        break;
    }
}
 80837ae:	b003      	add	sp, #12
 80837b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80837b4:	20000bb4 	.word	0x20000bb4

080837b8 <module_user_init_hook>:

void module_user_init_hook()
{
 80837b8:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80837ba:	4c10      	ldr	r4, [pc, #64]	; (80837fc <module_user_init_hook+0x44>)
 80837bc:	4d10      	ldr	r5, [pc, #64]	; (8083800 <module_user_init_hook+0x48>)
 80837be:	6823      	ldr	r3, [r4, #0]
 80837c0:	42ab      	cmp	r3, r5
 80837c2:	4b10      	ldr	r3, [pc, #64]	; (8083804 <module_user_init_hook+0x4c>)
 80837c4:	bf0c      	ite	eq
 80837c6:	2201      	moveq	r2, #1
 80837c8:	2200      	movne	r2, #0
 80837ca:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80837cc:	d002      	beq.n	80837d4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80837ce:	f7ff ffbf 	bl	8083750 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80837d2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80837d4:	f7fe f946 	bl	8081a64 <HAL_RNG_GetRandomNumber>
 80837d8:	4604      	mov	r4, r0
    srand(seed);
 80837da:	f001 fb1d 	bl	8084e18 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80837de:	4b0a      	ldr	r3, [pc, #40]	; (8083808 <module_user_init_hook+0x50>)
 80837e0:	b113      	cbz	r3, 80837e8 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80837e2:	4620      	mov	r0, r4
 80837e4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80837e8:	2100      	movs	r1, #0
 80837ea:	4807      	ldr	r0, [pc, #28]	; (8083808 <module_user_init_hook+0x50>)
 80837ec:	f7fe fb48 	bl	8081e80 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80837f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80837f4:	2100      	movs	r1, #0
 80837f6:	4805      	ldr	r0, [pc, #20]	; (808380c <module_user_init_hook+0x54>)
 80837f8:	f7fe bad4 	b.w	8081da4 <system_ctrl_set_app_request_handler>
 80837fc:	40024208 	.word	0x40024208
 8083800:	9a271c1e 	.word	0x9a271c1e
 8083804:	20000bb8 	.word	0x20000bb8
 8083808:	00000000 	.word	0x00000000
 808380c:	08083781 	.word	0x08083781

08083810 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 8083810:	b510      	push	{r4, lr}
 8083812:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 8083814:	480f      	ldr	r0, [pc, #60]	; (8083854 <pinAvailable+0x44>)
 8083816:	f7ff fc49 	bl	80830ac <_ZN8SPIClass9isEnabledEv>
 808381a:	b128      	cbz	r0, 8083828 <pinAvailable+0x18>
 808381c:	f1a4 030d 	sub.w	r3, r4, #13
 8083820:	2b02      	cmp	r3, #2
 8083822:	d801      	bhi.n	8083828 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 8083824:	2000      	movs	r0, #0
 8083826:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 8083828:	f000 f86a 	bl	8083900 <_Z19__fetch_global_Wirev>
 808382c:	f7ff f8a3 	bl	8082976 <_ZN7TwoWire9isEnabledEv>
 8083830:	b108      	cbz	r0, 8083836 <pinAvailable+0x26>
 8083832:	2c01      	cmp	r4, #1
 8083834:	d9f6      	bls.n	8083824 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 8083836:	f7ff fe67 	bl	8083508 <_Z22__fetch_global_Serial1v>
 808383a:	f7ff fe61 	bl	8083500 <_ZN11USARTSerial9isEnabledEv>
 808383e:	b118      	cbz	r0, 8083848 <pinAvailable+0x38>
 8083840:	f1a4 0312 	sub.w	r3, r4, #18
 8083844:	2b01      	cmp	r3, #1
 8083846:	d9ed      	bls.n	8083824 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 8083848:	2c2e      	cmp	r4, #46	; 0x2e
 808384a:	bf8c      	ite	hi
 808384c:	2000      	movhi	r0, #0
 808384e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 8083850:	bd10      	pop	{r4, pc}
 8083852:	bf00      	nop
 8083854:	20000bf8 	.word	0x20000bf8

08083858 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8083858:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 808385a:	b538      	push	{r3, r4, r5, lr}
 808385c:	4604      	mov	r4, r0
 808385e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8083860:	d80a      	bhi.n	8083878 <pinMode+0x20>
 8083862:	29ff      	cmp	r1, #255	; 0xff
 8083864:	d008      	beq.n	8083878 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 8083866:	f7ff ffd3 	bl	8083810 <pinAvailable>
 808386a:	b128      	cbz	r0, 8083878 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 808386c:	4629      	mov	r1, r5
 808386e:	4620      	mov	r0, r4
}
 8083870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8083874:	f7fe b92e 	b.w	8081ad4 <HAL_Pin_Mode>
 8083878:	bd38      	pop	{r3, r4, r5, pc}

0808387a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 808387a:	b538      	push	{r3, r4, r5, lr}
 808387c:	4604      	mov	r4, r0
 808387e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8083880:	f7fe f930 	bl	8081ae4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8083884:	28ff      	cmp	r0, #255	; 0xff
 8083886:	d010      	beq.n	80838aa <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 8083888:	2806      	cmp	r0, #6
 808388a:	d804      	bhi.n	8083896 <digitalWrite+0x1c>
 808388c:	234d      	movs	r3, #77	; 0x4d
 808388e:	fa23 f000 	lsr.w	r0, r3, r0
 8083892:	07c3      	lsls	r3, r0, #31
 8083894:	d409      	bmi.n	80838aa <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 8083896:	4620      	mov	r0, r4
 8083898:	f7ff ffba 	bl	8083810 <pinAvailable>
 808389c:	b128      	cbz	r0, 80838aa <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 808389e:	4629      	mov	r1, r5
 80838a0:	4620      	mov	r0, r4
}
 80838a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80838a6:	f7fe b925 	b.w	8081af4 <HAL_GPIO_Write>
 80838aa:	bd38      	pop	{r3, r4, r5, pc}

080838ac <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80838ac:	b510      	push	{r4, lr}
 80838ae:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80838b0:	f7fe f918 	bl	8081ae4 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80838b4:	3804      	subs	r0, #4
 80838b6:	b2c0      	uxtb	r0, r0
 80838b8:	2801      	cmp	r0, #1
 80838ba:	d908      	bls.n	80838ce <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80838bc:	4620      	mov	r0, r4
 80838be:	f7ff ffa7 	bl	8083810 <pinAvailable>
 80838c2:	b120      	cbz	r0, 80838ce <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80838c4:	4620      	mov	r0, r4
}
 80838c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80838ca:	f7fe b91b 	b.w	8081b04 <HAL_GPIO_Read>
}
 80838ce:	2000      	movs	r0, #0
 80838d0:	bd10      	pop	{r4, pc}

080838d2 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80838d2:	b510      	push	{r4, lr}
 80838d4:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80838d6:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80838d8:	bf9c      	itt	ls
 80838da:	340a      	addls	r4, #10
 80838dc:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80838de:	4620      	mov	r0, r4
 80838e0:	f7ff ff96 	bl	8083810 <pinAvailable>
 80838e4:	b150      	cbz	r0, 80838fc <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80838e6:	2103      	movs	r1, #3
 80838e8:	4620      	mov	r0, r4
 80838ea:	f7fe f8eb 	bl	8081ac4 <HAL_Validate_Pin_Function>
 80838ee:	2803      	cmp	r0, #3
 80838f0:	d104      	bne.n	80838fc <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80838f2:	4620      	mov	r0, r4
}
 80838f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80838f8:	f7fe b91c 	b.w	8081b34 <HAL_ADC_Read>
}
 80838fc:	2000      	movs	r0, #0
 80838fe:	bd10      	pop	{r4, pc}

08083900 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 8083900:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 8083902:	4d0b      	ldr	r5, [pc, #44]	; (8083930 <_Z19__fetch_global_Wirev+0x30>)
 8083904:	6829      	ldr	r1, [r5, #0]
 8083906:	f011 0401 	ands.w	r4, r1, #1
 808390a:	d10f      	bne.n	808392c <_Z19__fetch_global_Wirev+0x2c>
 808390c:	4628      	mov	r0, r5
 808390e:	f7fc fbc8 	bl	80800a2 <__cxa_guard_acquire>
 8083912:	b158      	cbz	r0, 808392c <_Z19__fetch_global_Wirev+0x2c>
 8083914:	4621      	mov	r1, r4
 8083916:	4807      	ldr	r0, [pc, #28]	; (8083934 <_Z19__fetch_global_Wirev+0x34>)
 8083918:	f7fe fff6 	bl	8082908 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 808391c:	4628      	mov	r0, r5
 808391e:	f7fc fbc5 	bl	80800ac <__cxa_guard_release>
 8083922:	4a05      	ldr	r2, [pc, #20]	; (8083938 <_Z19__fetch_global_Wirev+0x38>)
 8083924:	4905      	ldr	r1, [pc, #20]	; (808393c <_Z19__fetch_global_Wirev+0x3c>)
 8083926:	4803      	ldr	r0, [pc, #12]	; (8083934 <_Z19__fetch_global_Wirev+0x34>)
 8083928:	f000 f870 	bl	8083a0c <__aeabi_atexit>
	return wire;
}
 808392c:	4801      	ldr	r0, [pc, #4]	; (8083934 <_Z19__fetch_global_Wirev+0x34>)
 808392e:	bd38      	pop	{r3, r4, r5, pc}
 8083930:	20000bc0 	.word	0x20000bc0
 8083934:	20000bd8 	.word	0x20000bd8
 8083938:	200004e8 	.word	0x200004e8
 808393c:	080828b1 	.word	0x080828b1

08083940 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 8083940:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3);
 8083942:	4c0b      	ldr	r4, [pc, #44]	; (8083970 <_Z20__fetch_global_Wire3v+0x30>)
 8083944:	6823      	ldr	r3, [r4, #0]
 8083946:	07db      	lsls	r3, r3, #31
 8083948:	d40f      	bmi.n	808396a <_Z20__fetch_global_Wire3v+0x2a>
 808394a:	4620      	mov	r0, r4
 808394c:	f7fc fba9 	bl	80800a2 <__cxa_guard_acquire>
 8083950:	b158      	cbz	r0, 808396a <_Z20__fetch_global_Wire3v+0x2a>
 8083952:	2102      	movs	r1, #2
 8083954:	4807      	ldr	r0, [pc, #28]	; (8083974 <_Z20__fetch_global_Wire3v+0x34>)
 8083956:	f7fe ffd7 	bl	8082908 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 808395a:	4620      	mov	r0, r4
 808395c:	f7fc fba6 	bl	80800ac <__cxa_guard_release>
 8083960:	4a05      	ldr	r2, [pc, #20]	; (8083978 <_Z20__fetch_global_Wire3v+0x38>)
 8083962:	4906      	ldr	r1, [pc, #24]	; (808397c <_Z20__fetch_global_Wire3v+0x3c>)
 8083964:	4803      	ldr	r0, [pc, #12]	; (8083974 <_Z20__fetch_global_Wire3v+0x34>)
 8083966:	f000 f851 	bl	8083a0c <__aeabi_atexit>
	return wire;
}
 808396a:	4802      	ldr	r0, [pc, #8]	; (8083974 <_Z20__fetch_global_Wire3v+0x34>)
 808396c:	bd10      	pop	{r4, pc}
 808396e:	bf00      	nop
 8083970:	20000bec 	.word	0x20000bec
 8083974:	20000bc4 	.word	0x20000bc4
 8083978:	200004e8 	.word	0x200004e8
 808397c:	080828b1 	.word	0x080828b1

08083980 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8083980:	b513      	push	{r0, r1, r4, lr}
 8083982:	4c08      	ldr	r4, [pc, #32]	; (80839a4 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8083984:	2300      	movs	r3, #0
 8083986:	461a      	mov	r2, r3
 8083988:	4619      	mov	r1, r3
 808398a:	9300      	str	r3, [sp, #0]
 808398c:	4620      	mov	r0, r4
 808398e:	f7ff f88d 	bl	8082aac <_ZN9IPAddressC1Ehhhh>
 8083992:	4620      	mov	r0, r4
 8083994:	4a04      	ldr	r2, [pc, #16]	; (80839a8 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 8083996:	4905      	ldr	r1, [pc, #20]	; (80839ac <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8083998:	b002      	add	sp, #8
 808399a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808399e:	f000 b835 	b.w	8083a0c <__aeabi_atexit>
 80839a2:	bf00      	nop
 80839a4:	20000bf0 	.word	0x20000bf0
 80839a8:	200004e8 	.word	0x200004e8
 80839ac:	08082a29 	.word	0x08082a29

080839b0 <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80839b0:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80839b2:	4e11      	ldr	r6, [pc, #68]	; (80839f8 <_GLOBAL__sub_I_SPI+0x48>)
 80839b4:	4d11      	ldr	r5, [pc, #68]	; (80839fc <_GLOBAL__sub_I_SPI+0x4c>)
 80839b6:	4c12      	ldr	r4, [pc, #72]	; (8083a00 <_GLOBAL__sub_I_SPI+0x50>)
 80839b8:	2100      	movs	r1, #0
 80839ba:	4630      	mov	r0, r6
 80839bc:	f7ff fb62 	bl	8083084 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80839c0:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80839c2:	4e10      	ldr	r6, [pc, #64]	; (8083a04 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80839c4:	462a      	mov	r2, r5
 80839c6:	4621      	mov	r1, r4
 80839c8:	f000 f820 	bl	8083a0c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80839cc:	2101      	movs	r1, #1
 80839ce:	4630      	mov	r0, r6
 80839d0:	f7ff fb58 	bl	8083084 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80839d4:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80839d6:	4e0c      	ldr	r6, [pc, #48]	; (8083a08 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80839d8:	462a      	mov	r2, r5
 80839da:	4621      	mov	r1, r4
 80839dc:	f000 f816 	bl	8083a0c <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80839e0:	2102      	movs	r1, #2
 80839e2:	4630      	mov	r0, r6
 80839e4:	f7ff fb4e 	bl	8083084 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80839e8:	462a      	mov	r2, r5
 80839ea:	4621      	mov	r1, r4
 80839ec:	4630      	mov	r0, r6
 80839ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80839f2:	f000 b80b 	b.w	8083a0c <__aeabi_atexit>
 80839f6:	bf00      	nop
 80839f8:	20000bf8 	.word	0x20000bf8
 80839fc:	200004e8 	.word	0x200004e8
 8083a00:	08083075 	.word	0x08083075
 8083a04:	20000c08 	.word	0x20000c08
 8083a08:	20000c18 	.word	0x20000c18

08083a0c <__aeabi_atexit>:
 8083a0c:	460b      	mov	r3, r1
 8083a0e:	4601      	mov	r1, r0
 8083a10:	4618      	mov	r0, r3
 8083a12:	f001 b8c7 	b.w	8084ba4 <__cxa_atexit>

08083a16 <_ZSt25__throw_bad_function_callv>:
 8083a16:	b508      	push	{r3, lr}
 8083a18:	f7fe faba 	bl	8081f90 <abort>

08083a1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8083a1c:	4b24      	ldr	r3, [pc, #144]	; (8083ab0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 8083a1e:	681a      	ldr	r2, [r3, #0]
 8083a20:	07d0      	lsls	r0, r2, #31
 8083a22:	bf5c      	itt	pl
 8083a24:	2201      	movpl	r2, #1
 8083a26:	601a      	strpl	r2, [r3, #0]
 8083a28:	4b22      	ldr	r3, [pc, #136]	; (8083ab4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8083a2a:	681a      	ldr	r2, [r3, #0]
 8083a2c:	07d1      	lsls	r1, r2, #31
 8083a2e:	bf5c      	itt	pl
 8083a30:	2201      	movpl	r2, #1
 8083a32:	601a      	strpl	r2, [r3, #0]
 8083a34:	4b20      	ldr	r3, [pc, #128]	; (8083ab8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8083a36:	681a      	ldr	r2, [r3, #0]
 8083a38:	07d2      	lsls	r2, r2, #31
 8083a3a:	bf5c      	itt	pl
 8083a3c:	2201      	movpl	r2, #1
 8083a3e:	601a      	strpl	r2, [r3, #0]
 8083a40:	4b1e      	ldr	r3, [pc, #120]	; (8083abc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8083a42:	681a      	ldr	r2, [r3, #0]
 8083a44:	07d0      	lsls	r0, r2, #31
 8083a46:	bf5c      	itt	pl
 8083a48:	2201      	movpl	r2, #1
 8083a4a:	601a      	strpl	r2, [r3, #0]
 8083a4c:	4b1c      	ldr	r3, [pc, #112]	; (8083ac0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 8083a4e:	681a      	ldr	r2, [r3, #0]
 8083a50:	07d1      	lsls	r1, r2, #31
 8083a52:	bf5c      	itt	pl
 8083a54:	2201      	movpl	r2, #1
 8083a56:	601a      	strpl	r2, [r3, #0]
 8083a58:	4b1a      	ldr	r3, [pc, #104]	; (8083ac4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8083a5a:	681a      	ldr	r2, [r3, #0]
 8083a5c:	07d2      	lsls	r2, r2, #31
 8083a5e:	bf5c      	itt	pl
 8083a60:	2201      	movpl	r2, #1
 8083a62:	601a      	strpl	r2, [r3, #0]
 8083a64:	4b18      	ldr	r3, [pc, #96]	; (8083ac8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8083a66:	681a      	ldr	r2, [r3, #0]
 8083a68:	07d0      	lsls	r0, r2, #31
 8083a6a:	bf5c      	itt	pl
 8083a6c:	2201      	movpl	r2, #1
 8083a6e:	601a      	strpl	r2, [r3, #0]
 8083a70:	4b16      	ldr	r3, [pc, #88]	; (8083acc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8083a72:	681a      	ldr	r2, [r3, #0]
 8083a74:	07d1      	lsls	r1, r2, #31
 8083a76:	bf5c      	itt	pl
 8083a78:	2201      	movpl	r2, #1
 8083a7a:	601a      	strpl	r2, [r3, #0]
 8083a7c:	4b14      	ldr	r3, [pc, #80]	; (8083ad0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8083a7e:	681a      	ldr	r2, [r3, #0]
 8083a80:	07d2      	lsls	r2, r2, #31
 8083a82:	bf5c      	itt	pl
 8083a84:	2201      	movpl	r2, #1
 8083a86:	601a      	strpl	r2, [r3, #0]
 8083a88:	4b12      	ldr	r3, [pc, #72]	; (8083ad4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8083a8a:	681a      	ldr	r2, [r3, #0]
 8083a8c:	07d0      	lsls	r0, r2, #31
 8083a8e:	bf5c      	itt	pl
 8083a90:	2201      	movpl	r2, #1
 8083a92:	601a      	strpl	r2, [r3, #0]
 8083a94:	4b10      	ldr	r3, [pc, #64]	; (8083ad8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8083a96:	681a      	ldr	r2, [r3, #0]
 8083a98:	07d1      	lsls	r1, r2, #31
 8083a9a:	bf5c      	itt	pl
 8083a9c:	2201      	movpl	r2, #1
 8083a9e:	601a      	strpl	r2, [r3, #0]
 8083aa0:	4b0e      	ldr	r3, [pc, #56]	; (8083adc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8083aa2:	681a      	ldr	r2, [r3, #0]
 8083aa4:	07d2      	lsls	r2, r2, #31
 8083aa6:	bf5c      	itt	pl
 8083aa8:	2201      	movpl	r2, #1
 8083aaa:	601a      	strpl	r2, [r3, #0]
 8083aac:	4770      	bx	lr
 8083aae:	bf00      	nop
 8083ab0:	20000c54 	.word	0x20000c54
 8083ab4:	20000c50 	.word	0x20000c50
 8083ab8:	20000c4c 	.word	0x20000c4c
 8083abc:	20000c48 	.word	0x20000c48
 8083ac0:	20000c44 	.word	0x20000c44
 8083ac4:	20000c40 	.word	0x20000c40
 8083ac8:	20000c3c 	.word	0x20000c3c
 8083acc:	20000c38 	.word	0x20000c38
 8083ad0:	20000c34 	.word	0x20000c34
 8083ad4:	20000c30 	.word	0x20000c30
 8083ad8:	20000c2c 	.word	0x20000c2c
 8083adc:	20000c28 	.word	0x20000c28

08083ae0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8083ae0:	4b18      	ldr	r3, [pc, #96]	; (8083b44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8083ae2:	681a      	ldr	r2, [r3, #0]
 8083ae4:	07d1      	lsls	r1, r2, #31
 8083ae6:	bf5c      	itt	pl
 8083ae8:	2201      	movpl	r2, #1
 8083aea:	601a      	strpl	r2, [r3, #0]
 8083aec:	4b16      	ldr	r3, [pc, #88]	; (8083b48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8083aee:	681a      	ldr	r2, [r3, #0]
 8083af0:	07d2      	lsls	r2, r2, #31
 8083af2:	bf5c      	itt	pl
 8083af4:	2201      	movpl	r2, #1
 8083af6:	601a      	strpl	r2, [r3, #0]
 8083af8:	4b14      	ldr	r3, [pc, #80]	; (8083b4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8083afa:	681a      	ldr	r2, [r3, #0]
 8083afc:	07d0      	lsls	r0, r2, #31
 8083afe:	bf5c      	itt	pl
 8083b00:	2201      	movpl	r2, #1
 8083b02:	601a      	strpl	r2, [r3, #0]
 8083b04:	4b12      	ldr	r3, [pc, #72]	; (8083b50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8083b06:	681a      	ldr	r2, [r3, #0]
 8083b08:	07d1      	lsls	r1, r2, #31
 8083b0a:	bf5c      	itt	pl
 8083b0c:	2201      	movpl	r2, #1
 8083b0e:	601a      	strpl	r2, [r3, #0]
 8083b10:	4b10      	ldr	r3, [pc, #64]	; (8083b54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8083b12:	681a      	ldr	r2, [r3, #0]
 8083b14:	07d2      	lsls	r2, r2, #31
 8083b16:	bf5c      	itt	pl
 8083b18:	2201      	movpl	r2, #1
 8083b1a:	601a      	strpl	r2, [r3, #0]
 8083b1c:	4b0e      	ldr	r3, [pc, #56]	; (8083b58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8083b1e:	681a      	ldr	r2, [r3, #0]
 8083b20:	07d0      	lsls	r0, r2, #31
 8083b22:	bf5c      	itt	pl
 8083b24:	2201      	movpl	r2, #1
 8083b26:	601a      	strpl	r2, [r3, #0]
 8083b28:	4b0c      	ldr	r3, [pc, #48]	; (8083b5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8083b2a:	681a      	ldr	r2, [r3, #0]
 8083b2c:	07d1      	lsls	r1, r2, #31
 8083b2e:	bf5c      	itt	pl
 8083b30:	2201      	movpl	r2, #1
 8083b32:	601a      	strpl	r2, [r3, #0]
 8083b34:	4b0a      	ldr	r3, [pc, #40]	; (8083b60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8083b36:	681a      	ldr	r2, [r3, #0]
 8083b38:	07d2      	lsls	r2, r2, #31
 8083b3a:	bf5c      	itt	pl
 8083b3c:	2201      	movpl	r2, #1
 8083b3e:	601a      	strpl	r2, [r3, #0]
 8083b40:	4770      	bx	lr
 8083b42:	bf00      	nop
 8083b44:	20000c74 	.word	0x20000c74
 8083b48:	20000c70 	.word	0x20000c70
 8083b4c:	20000c6c 	.word	0x20000c6c
 8083b50:	20000c68 	.word	0x20000c68
 8083b54:	20000c64 	.word	0x20000c64
 8083b58:	20000c60 	.word	0x20000c60
 8083b5c:	20000c5c 	.word	0x20000c5c
 8083b60:	20000c58 	.word	0x20000c58

08083b64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8083b64:	4b18      	ldr	r3, [pc, #96]	; (8083bc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8083b66:	681a      	ldr	r2, [r3, #0]
 8083b68:	07d1      	lsls	r1, r2, #31
 8083b6a:	bf5c      	itt	pl
 8083b6c:	2201      	movpl	r2, #1
 8083b6e:	601a      	strpl	r2, [r3, #0]
 8083b70:	4b16      	ldr	r3, [pc, #88]	; (8083bcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8083b72:	681a      	ldr	r2, [r3, #0]
 8083b74:	07d2      	lsls	r2, r2, #31
 8083b76:	bf5c      	itt	pl
 8083b78:	2201      	movpl	r2, #1
 8083b7a:	601a      	strpl	r2, [r3, #0]
 8083b7c:	4b14      	ldr	r3, [pc, #80]	; (8083bd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8083b7e:	681a      	ldr	r2, [r3, #0]
 8083b80:	07d0      	lsls	r0, r2, #31
 8083b82:	bf5c      	itt	pl
 8083b84:	2201      	movpl	r2, #1
 8083b86:	601a      	strpl	r2, [r3, #0]
 8083b88:	4b12      	ldr	r3, [pc, #72]	; (8083bd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8083b8a:	681a      	ldr	r2, [r3, #0]
 8083b8c:	07d1      	lsls	r1, r2, #31
 8083b8e:	bf5c      	itt	pl
 8083b90:	2201      	movpl	r2, #1
 8083b92:	601a      	strpl	r2, [r3, #0]
 8083b94:	4b10      	ldr	r3, [pc, #64]	; (8083bd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8083b96:	681a      	ldr	r2, [r3, #0]
 8083b98:	07d2      	lsls	r2, r2, #31
 8083b9a:	bf5c      	itt	pl
 8083b9c:	2201      	movpl	r2, #1
 8083b9e:	601a      	strpl	r2, [r3, #0]
 8083ba0:	4b0e      	ldr	r3, [pc, #56]	; (8083bdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8083ba2:	681a      	ldr	r2, [r3, #0]
 8083ba4:	07d0      	lsls	r0, r2, #31
 8083ba6:	bf5c      	itt	pl
 8083ba8:	2201      	movpl	r2, #1
 8083baa:	601a      	strpl	r2, [r3, #0]
 8083bac:	4b0c      	ldr	r3, [pc, #48]	; (8083be0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8083bae:	681a      	ldr	r2, [r3, #0]
 8083bb0:	07d1      	lsls	r1, r2, #31
 8083bb2:	bf5c      	itt	pl
 8083bb4:	2201      	movpl	r2, #1
 8083bb6:	601a      	strpl	r2, [r3, #0]
 8083bb8:	4b0a      	ldr	r3, [pc, #40]	; (8083be4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8083bba:	681a      	ldr	r2, [r3, #0]
 8083bbc:	07d2      	lsls	r2, r2, #31
 8083bbe:	bf5c      	itt	pl
 8083bc0:	2201      	movpl	r2, #1
 8083bc2:	601a      	strpl	r2, [r3, #0]
 8083bc4:	4770      	bx	lr
 8083bc6:	bf00      	nop
 8083bc8:	20000c94 	.word	0x20000c94
 8083bcc:	20000c90 	.word	0x20000c90
 8083bd0:	20000c8c 	.word	0x20000c8c
 8083bd4:	20000c88 	.word	0x20000c88
 8083bd8:	20000c84 	.word	0x20000c84
 8083bdc:	20000c80 	.word	0x20000c80
 8083be0:	20000c7c 	.word	0x20000c7c
 8083be4:	20000c78 	.word	0x20000c78

08083be8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8083be8:	4b24      	ldr	r3, [pc, #144]	; (8083c7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8083bea:	681a      	ldr	r2, [r3, #0]
 8083bec:	07d0      	lsls	r0, r2, #31
 8083bee:	bf5c      	itt	pl
 8083bf0:	2201      	movpl	r2, #1
 8083bf2:	601a      	strpl	r2, [r3, #0]
 8083bf4:	4b22      	ldr	r3, [pc, #136]	; (8083c80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 8083bf6:	681a      	ldr	r2, [r3, #0]
 8083bf8:	07d1      	lsls	r1, r2, #31
 8083bfa:	bf5c      	itt	pl
 8083bfc:	2201      	movpl	r2, #1
 8083bfe:	601a      	strpl	r2, [r3, #0]
 8083c00:	4b20      	ldr	r3, [pc, #128]	; (8083c84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 8083c02:	681a      	ldr	r2, [r3, #0]
 8083c04:	07d2      	lsls	r2, r2, #31
 8083c06:	bf5c      	itt	pl
 8083c08:	2201      	movpl	r2, #1
 8083c0a:	601a      	strpl	r2, [r3, #0]
 8083c0c:	4b1e      	ldr	r3, [pc, #120]	; (8083c88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8083c0e:	681a      	ldr	r2, [r3, #0]
 8083c10:	07d0      	lsls	r0, r2, #31
 8083c12:	bf5c      	itt	pl
 8083c14:	2201      	movpl	r2, #1
 8083c16:	601a      	strpl	r2, [r3, #0]
 8083c18:	4b1c      	ldr	r3, [pc, #112]	; (8083c8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8083c1a:	681a      	ldr	r2, [r3, #0]
 8083c1c:	07d1      	lsls	r1, r2, #31
 8083c1e:	bf5c      	itt	pl
 8083c20:	2201      	movpl	r2, #1
 8083c22:	601a      	strpl	r2, [r3, #0]
 8083c24:	4b1a      	ldr	r3, [pc, #104]	; (8083c90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8083c26:	681a      	ldr	r2, [r3, #0]
 8083c28:	07d2      	lsls	r2, r2, #31
 8083c2a:	bf5c      	itt	pl
 8083c2c:	2201      	movpl	r2, #1
 8083c2e:	601a      	strpl	r2, [r3, #0]
 8083c30:	4b18      	ldr	r3, [pc, #96]	; (8083c94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 8083c32:	681a      	ldr	r2, [r3, #0]
 8083c34:	07d0      	lsls	r0, r2, #31
 8083c36:	bf5c      	itt	pl
 8083c38:	2201      	movpl	r2, #1
 8083c3a:	601a      	strpl	r2, [r3, #0]
 8083c3c:	4b16      	ldr	r3, [pc, #88]	; (8083c98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8083c3e:	681a      	ldr	r2, [r3, #0]
 8083c40:	07d1      	lsls	r1, r2, #31
 8083c42:	bf5c      	itt	pl
 8083c44:	2201      	movpl	r2, #1
 8083c46:	601a      	strpl	r2, [r3, #0]
 8083c48:	4b14      	ldr	r3, [pc, #80]	; (8083c9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8083c4a:	681a      	ldr	r2, [r3, #0]
 8083c4c:	07d2      	lsls	r2, r2, #31
 8083c4e:	bf5c      	itt	pl
 8083c50:	2201      	movpl	r2, #1
 8083c52:	601a      	strpl	r2, [r3, #0]
 8083c54:	4b12      	ldr	r3, [pc, #72]	; (8083ca0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8083c56:	681a      	ldr	r2, [r3, #0]
 8083c58:	07d0      	lsls	r0, r2, #31
 8083c5a:	bf5c      	itt	pl
 8083c5c:	2201      	movpl	r2, #1
 8083c5e:	601a      	strpl	r2, [r3, #0]
 8083c60:	4b10      	ldr	r3, [pc, #64]	; (8083ca4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 8083c62:	681a      	ldr	r2, [r3, #0]
 8083c64:	07d1      	lsls	r1, r2, #31
 8083c66:	bf5c      	itt	pl
 8083c68:	2201      	movpl	r2, #1
 8083c6a:	601a      	strpl	r2, [r3, #0]
 8083c6c:	4b0e      	ldr	r3, [pc, #56]	; (8083ca8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8083c6e:	681a      	ldr	r2, [r3, #0]
 8083c70:	07d2      	lsls	r2, r2, #31
 8083c72:	bf5c      	itt	pl
 8083c74:	2201      	movpl	r2, #1
 8083c76:	601a      	strpl	r2, [r3, #0]
 8083c78:	4770      	bx	lr
 8083c7a:	bf00      	nop
 8083c7c:	20000cc4 	.word	0x20000cc4
 8083c80:	20000cc0 	.word	0x20000cc0
 8083c84:	20000cbc 	.word	0x20000cbc
 8083c88:	20000cb8 	.word	0x20000cb8
 8083c8c:	20000cb4 	.word	0x20000cb4
 8083c90:	20000cb0 	.word	0x20000cb0
 8083c94:	20000cac 	.word	0x20000cac
 8083c98:	20000ca8 	.word	0x20000ca8
 8083c9c:	20000ca4 	.word	0x20000ca4
 8083ca0:	20000ca0 	.word	0x20000ca0
 8083ca4:	20000c9c 	.word	0x20000c9c
 8083ca8:	20000c98 	.word	0x20000c98

08083cac <__aeabi_drsub>:
 8083cac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8083cb0:	e002      	b.n	8083cb8 <__adddf3>
 8083cb2:	bf00      	nop

08083cb4 <__aeabi_dsub>:
 8083cb4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08083cb8 <__adddf3>:
 8083cb8:	b530      	push	{r4, r5, lr}
 8083cba:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8083cbe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8083cc2:	ea94 0f05 	teq	r4, r5
 8083cc6:	bf08      	it	eq
 8083cc8:	ea90 0f02 	teqeq	r0, r2
 8083ccc:	bf1f      	itttt	ne
 8083cce:	ea54 0c00 	orrsne.w	ip, r4, r0
 8083cd2:	ea55 0c02 	orrsne.w	ip, r5, r2
 8083cd6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8083cda:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8083cde:	f000 80e2 	beq.w	8083ea6 <__adddf3+0x1ee>
 8083ce2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8083ce6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8083cea:	bfb8      	it	lt
 8083cec:	426d      	neglt	r5, r5
 8083cee:	dd0c      	ble.n	8083d0a <__adddf3+0x52>
 8083cf0:	442c      	add	r4, r5
 8083cf2:	ea80 0202 	eor.w	r2, r0, r2
 8083cf6:	ea81 0303 	eor.w	r3, r1, r3
 8083cfa:	ea82 0000 	eor.w	r0, r2, r0
 8083cfe:	ea83 0101 	eor.w	r1, r3, r1
 8083d02:	ea80 0202 	eor.w	r2, r0, r2
 8083d06:	ea81 0303 	eor.w	r3, r1, r3
 8083d0a:	2d36      	cmp	r5, #54	; 0x36
 8083d0c:	bf88      	it	hi
 8083d0e:	bd30      	pophi	{r4, r5, pc}
 8083d10:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8083d14:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8083d18:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8083d1c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8083d20:	d002      	beq.n	8083d28 <__adddf3+0x70>
 8083d22:	4240      	negs	r0, r0
 8083d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8083d28:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8083d2c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8083d30:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8083d34:	d002      	beq.n	8083d3c <__adddf3+0x84>
 8083d36:	4252      	negs	r2, r2
 8083d38:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8083d3c:	ea94 0f05 	teq	r4, r5
 8083d40:	f000 80a7 	beq.w	8083e92 <__adddf3+0x1da>
 8083d44:	f1a4 0401 	sub.w	r4, r4, #1
 8083d48:	f1d5 0e20 	rsbs	lr, r5, #32
 8083d4c:	db0d      	blt.n	8083d6a <__adddf3+0xb2>
 8083d4e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8083d52:	fa22 f205 	lsr.w	r2, r2, r5
 8083d56:	1880      	adds	r0, r0, r2
 8083d58:	f141 0100 	adc.w	r1, r1, #0
 8083d5c:	fa03 f20e 	lsl.w	r2, r3, lr
 8083d60:	1880      	adds	r0, r0, r2
 8083d62:	fa43 f305 	asr.w	r3, r3, r5
 8083d66:	4159      	adcs	r1, r3
 8083d68:	e00e      	b.n	8083d88 <__adddf3+0xd0>
 8083d6a:	f1a5 0520 	sub.w	r5, r5, #32
 8083d6e:	f10e 0e20 	add.w	lr, lr, #32
 8083d72:	2a01      	cmp	r2, #1
 8083d74:	fa03 fc0e 	lsl.w	ip, r3, lr
 8083d78:	bf28      	it	cs
 8083d7a:	f04c 0c02 	orrcs.w	ip, ip, #2
 8083d7e:	fa43 f305 	asr.w	r3, r3, r5
 8083d82:	18c0      	adds	r0, r0, r3
 8083d84:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8083d88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083d8c:	d507      	bpl.n	8083d9e <__adddf3+0xe6>
 8083d8e:	f04f 0e00 	mov.w	lr, #0
 8083d92:	f1dc 0c00 	rsbs	ip, ip, #0
 8083d96:	eb7e 0000 	sbcs.w	r0, lr, r0
 8083d9a:	eb6e 0101 	sbc.w	r1, lr, r1
 8083d9e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8083da2:	d31b      	bcc.n	8083ddc <__adddf3+0x124>
 8083da4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8083da8:	d30c      	bcc.n	8083dc4 <__adddf3+0x10c>
 8083daa:	0849      	lsrs	r1, r1, #1
 8083dac:	ea5f 0030 	movs.w	r0, r0, rrx
 8083db0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8083db4:	f104 0401 	add.w	r4, r4, #1
 8083db8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8083dbc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8083dc0:	f080 809a 	bcs.w	8083ef8 <__adddf3+0x240>
 8083dc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8083dc8:	bf08      	it	eq
 8083dca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8083dce:	f150 0000 	adcs.w	r0, r0, #0
 8083dd2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8083dd6:	ea41 0105 	orr.w	r1, r1, r5
 8083dda:	bd30      	pop	{r4, r5, pc}
 8083ddc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8083de0:	4140      	adcs	r0, r0
 8083de2:	eb41 0101 	adc.w	r1, r1, r1
 8083de6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083dea:	f1a4 0401 	sub.w	r4, r4, #1
 8083dee:	d1e9      	bne.n	8083dc4 <__adddf3+0x10c>
 8083df0:	f091 0f00 	teq	r1, #0
 8083df4:	bf04      	itt	eq
 8083df6:	4601      	moveq	r1, r0
 8083df8:	2000      	moveq	r0, #0
 8083dfa:	fab1 f381 	clz	r3, r1
 8083dfe:	bf08      	it	eq
 8083e00:	3320      	addeq	r3, #32
 8083e02:	f1a3 030b 	sub.w	r3, r3, #11
 8083e06:	f1b3 0220 	subs.w	r2, r3, #32
 8083e0a:	da0c      	bge.n	8083e26 <__adddf3+0x16e>
 8083e0c:	320c      	adds	r2, #12
 8083e0e:	dd08      	ble.n	8083e22 <__adddf3+0x16a>
 8083e10:	f102 0c14 	add.w	ip, r2, #20
 8083e14:	f1c2 020c 	rsb	r2, r2, #12
 8083e18:	fa01 f00c 	lsl.w	r0, r1, ip
 8083e1c:	fa21 f102 	lsr.w	r1, r1, r2
 8083e20:	e00c      	b.n	8083e3c <__adddf3+0x184>
 8083e22:	f102 0214 	add.w	r2, r2, #20
 8083e26:	bfd8      	it	le
 8083e28:	f1c2 0c20 	rsble	ip, r2, #32
 8083e2c:	fa01 f102 	lsl.w	r1, r1, r2
 8083e30:	fa20 fc0c 	lsr.w	ip, r0, ip
 8083e34:	bfdc      	itt	le
 8083e36:	ea41 010c 	orrle.w	r1, r1, ip
 8083e3a:	4090      	lslle	r0, r2
 8083e3c:	1ae4      	subs	r4, r4, r3
 8083e3e:	bfa2      	ittt	ge
 8083e40:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8083e44:	4329      	orrge	r1, r5
 8083e46:	bd30      	popge	{r4, r5, pc}
 8083e48:	ea6f 0404 	mvn.w	r4, r4
 8083e4c:	3c1f      	subs	r4, #31
 8083e4e:	da1c      	bge.n	8083e8a <__adddf3+0x1d2>
 8083e50:	340c      	adds	r4, #12
 8083e52:	dc0e      	bgt.n	8083e72 <__adddf3+0x1ba>
 8083e54:	f104 0414 	add.w	r4, r4, #20
 8083e58:	f1c4 0220 	rsb	r2, r4, #32
 8083e5c:	fa20 f004 	lsr.w	r0, r0, r4
 8083e60:	fa01 f302 	lsl.w	r3, r1, r2
 8083e64:	ea40 0003 	orr.w	r0, r0, r3
 8083e68:	fa21 f304 	lsr.w	r3, r1, r4
 8083e6c:	ea45 0103 	orr.w	r1, r5, r3
 8083e70:	bd30      	pop	{r4, r5, pc}
 8083e72:	f1c4 040c 	rsb	r4, r4, #12
 8083e76:	f1c4 0220 	rsb	r2, r4, #32
 8083e7a:	fa20 f002 	lsr.w	r0, r0, r2
 8083e7e:	fa01 f304 	lsl.w	r3, r1, r4
 8083e82:	ea40 0003 	orr.w	r0, r0, r3
 8083e86:	4629      	mov	r1, r5
 8083e88:	bd30      	pop	{r4, r5, pc}
 8083e8a:	fa21 f004 	lsr.w	r0, r1, r4
 8083e8e:	4629      	mov	r1, r5
 8083e90:	bd30      	pop	{r4, r5, pc}
 8083e92:	f094 0f00 	teq	r4, #0
 8083e96:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8083e9a:	bf06      	itte	eq
 8083e9c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8083ea0:	3401      	addeq	r4, #1
 8083ea2:	3d01      	subne	r5, #1
 8083ea4:	e74e      	b.n	8083d44 <__adddf3+0x8c>
 8083ea6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8083eaa:	bf18      	it	ne
 8083eac:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8083eb0:	d029      	beq.n	8083f06 <__adddf3+0x24e>
 8083eb2:	ea94 0f05 	teq	r4, r5
 8083eb6:	bf08      	it	eq
 8083eb8:	ea90 0f02 	teqeq	r0, r2
 8083ebc:	d005      	beq.n	8083eca <__adddf3+0x212>
 8083ebe:	ea54 0c00 	orrs.w	ip, r4, r0
 8083ec2:	bf04      	itt	eq
 8083ec4:	4619      	moveq	r1, r3
 8083ec6:	4610      	moveq	r0, r2
 8083ec8:	bd30      	pop	{r4, r5, pc}
 8083eca:	ea91 0f03 	teq	r1, r3
 8083ece:	bf1e      	ittt	ne
 8083ed0:	2100      	movne	r1, #0
 8083ed2:	2000      	movne	r0, #0
 8083ed4:	bd30      	popne	{r4, r5, pc}
 8083ed6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8083eda:	d105      	bne.n	8083ee8 <__adddf3+0x230>
 8083edc:	0040      	lsls	r0, r0, #1
 8083ede:	4149      	adcs	r1, r1
 8083ee0:	bf28      	it	cs
 8083ee2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8083ee6:	bd30      	pop	{r4, r5, pc}
 8083ee8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8083eec:	bf3c      	itt	cc
 8083eee:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8083ef2:	bd30      	popcc	{r4, r5, pc}
 8083ef4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083ef8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8083efc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8083f00:	f04f 0000 	mov.w	r0, #0
 8083f04:	bd30      	pop	{r4, r5, pc}
 8083f06:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8083f0a:	bf1a      	itte	ne
 8083f0c:	4619      	movne	r1, r3
 8083f0e:	4610      	movne	r0, r2
 8083f10:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8083f14:	bf1c      	itt	ne
 8083f16:	460b      	movne	r3, r1
 8083f18:	4602      	movne	r2, r0
 8083f1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8083f1e:	bf06      	itte	eq
 8083f20:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8083f24:	ea91 0f03 	teqeq	r1, r3
 8083f28:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8083f2c:	bd30      	pop	{r4, r5, pc}
 8083f2e:	bf00      	nop

08083f30 <__aeabi_ui2d>:
 8083f30:	f090 0f00 	teq	r0, #0
 8083f34:	bf04      	itt	eq
 8083f36:	2100      	moveq	r1, #0
 8083f38:	4770      	bxeq	lr
 8083f3a:	b530      	push	{r4, r5, lr}
 8083f3c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083f40:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083f44:	f04f 0500 	mov.w	r5, #0
 8083f48:	f04f 0100 	mov.w	r1, #0
 8083f4c:	e750      	b.n	8083df0 <__adddf3+0x138>
 8083f4e:	bf00      	nop

08083f50 <__aeabi_i2d>:
 8083f50:	f090 0f00 	teq	r0, #0
 8083f54:	bf04      	itt	eq
 8083f56:	2100      	moveq	r1, #0
 8083f58:	4770      	bxeq	lr
 8083f5a:	b530      	push	{r4, r5, lr}
 8083f5c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083f60:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083f64:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8083f68:	bf48      	it	mi
 8083f6a:	4240      	negmi	r0, r0
 8083f6c:	f04f 0100 	mov.w	r1, #0
 8083f70:	e73e      	b.n	8083df0 <__adddf3+0x138>
 8083f72:	bf00      	nop

08083f74 <__aeabi_f2d>:
 8083f74:	0042      	lsls	r2, r0, #1
 8083f76:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8083f7a:	ea4f 0131 	mov.w	r1, r1, rrx
 8083f7e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8083f82:	bf1f      	itttt	ne
 8083f84:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8083f88:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8083f8c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8083f90:	4770      	bxne	lr
 8083f92:	f092 0f00 	teq	r2, #0
 8083f96:	bf14      	ite	ne
 8083f98:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8083f9c:	4770      	bxeq	lr
 8083f9e:	b530      	push	{r4, r5, lr}
 8083fa0:	f44f 7460 	mov.w	r4, #896	; 0x380
 8083fa4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083fa8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8083fac:	e720      	b.n	8083df0 <__adddf3+0x138>
 8083fae:	bf00      	nop

08083fb0 <__aeabi_ul2d>:
 8083fb0:	ea50 0201 	orrs.w	r2, r0, r1
 8083fb4:	bf08      	it	eq
 8083fb6:	4770      	bxeq	lr
 8083fb8:	b530      	push	{r4, r5, lr}
 8083fba:	f04f 0500 	mov.w	r5, #0
 8083fbe:	e00a      	b.n	8083fd6 <__aeabi_l2d+0x16>

08083fc0 <__aeabi_l2d>:
 8083fc0:	ea50 0201 	orrs.w	r2, r0, r1
 8083fc4:	bf08      	it	eq
 8083fc6:	4770      	bxeq	lr
 8083fc8:	b530      	push	{r4, r5, lr}
 8083fca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8083fce:	d502      	bpl.n	8083fd6 <__aeabi_l2d+0x16>
 8083fd0:	4240      	negs	r0, r0
 8083fd2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8083fd6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083fda:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083fde:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8083fe2:	f43f aedc 	beq.w	8083d9e <__adddf3+0xe6>
 8083fe6:	f04f 0203 	mov.w	r2, #3
 8083fea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8083fee:	bf18      	it	ne
 8083ff0:	3203      	addne	r2, #3
 8083ff2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8083ff6:	bf18      	it	ne
 8083ff8:	3203      	addne	r2, #3
 8083ffa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8083ffe:	f1c2 0320 	rsb	r3, r2, #32
 8084002:	fa00 fc03 	lsl.w	ip, r0, r3
 8084006:	fa20 f002 	lsr.w	r0, r0, r2
 808400a:	fa01 fe03 	lsl.w	lr, r1, r3
 808400e:	ea40 000e 	orr.w	r0, r0, lr
 8084012:	fa21 f102 	lsr.w	r1, r1, r2
 8084016:	4414      	add	r4, r2
 8084018:	e6c1      	b.n	8083d9e <__adddf3+0xe6>
 808401a:	bf00      	nop

0808401c <__aeabi_dmul>:
 808401c:	b570      	push	{r4, r5, r6, lr}
 808401e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8084022:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8084026:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808402a:	bf1d      	ittte	ne
 808402c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8084030:	ea94 0f0c 	teqne	r4, ip
 8084034:	ea95 0f0c 	teqne	r5, ip
 8084038:	f000 f8de 	bleq	80841f8 <__aeabi_dmul+0x1dc>
 808403c:	442c      	add	r4, r5
 808403e:	ea81 0603 	eor.w	r6, r1, r3
 8084042:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8084046:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 808404a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 808404e:	bf18      	it	ne
 8084050:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8084054:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8084058:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 808405c:	d038      	beq.n	80840d0 <__aeabi_dmul+0xb4>
 808405e:	fba0 ce02 	umull	ip, lr, r0, r2
 8084062:	f04f 0500 	mov.w	r5, #0
 8084066:	fbe1 e502 	umlal	lr, r5, r1, r2
 808406a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 808406e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8084072:	f04f 0600 	mov.w	r6, #0
 8084076:	fbe1 5603 	umlal	r5, r6, r1, r3
 808407a:	f09c 0f00 	teq	ip, #0
 808407e:	bf18      	it	ne
 8084080:	f04e 0e01 	orrne.w	lr, lr, #1
 8084084:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8084088:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 808408c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8084090:	d204      	bcs.n	808409c <__aeabi_dmul+0x80>
 8084092:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8084096:	416d      	adcs	r5, r5
 8084098:	eb46 0606 	adc.w	r6, r6, r6
 808409c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80840a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80840a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80840a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80840ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80840b0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80840b4:	bf88      	it	hi
 80840b6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80840ba:	d81e      	bhi.n	80840fa <__aeabi_dmul+0xde>
 80840bc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80840c0:	bf08      	it	eq
 80840c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80840c6:	f150 0000 	adcs.w	r0, r0, #0
 80840ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80840ce:	bd70      	pop	{r4, r5, r6, pc}
 80840d0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80840d4:	ea46 0101 	orr.w	r1, r6, r1
 80840d8:	ea40 0002 	orr.w	r0, r0, r2
 80840dc:	ea81 0103 	eor.w	r1, r1, r3
 80840e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80840e4:	bfc2      	ittt	gt
 80840e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80840ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80840ee:	bd70      	popgt	{r4, r5, r6, pc}
 80840f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80840f4:	f04f 0e00 	mov.w	lr, #0
 80840f8:	3c01      	subs	r4, #1
 80840fa:	f300 80ab 	bgt.w	8084254 <__aeabi_dmul+0x238>
 80840fe:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8084102:	bfde      	ittt	le
 8084104:	2000      	movle	r0, #0
 8084106:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 808410a:	bd70      	pople	{r4, r5, r6, pc}
 808410c:	f1c4 0400 	rsb	r4, r4, #0
 8084110:	3c20      	subs	r4, #32
 8084112:	da35      	bge.n	8084180 <__aeabi_dmul+0x164>
 8084114:	340c      	adds	r4, #12
 8084116:	dc1b      	bgt.n	8084150 <__aeabi_dmul+0x134>
 8084118:	f104 0414 	add.w	r4, r4, #20
 808411c:	f1c4 0520 	rsb	r5, r4, #32
 8084120:	fa00 f305 	lsl.w	r3, r0, r5
 8084124:	fa20 f004 	lsr.w	r0, r0, r4
 8084128:	fa01 f205 	lsl.w	r2, r1, r5
 808412c:	ea40 0002 	orr.w	r0, r0, r2
 8084130:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8084134:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8084138:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808413c:	fa21 f604 	lsr.w	r6, r1, r4
 8084140:	eb42 0106 	adc.w	r1, r2, r6
 8084144:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8084148:	bf08      	it	eq
 808414a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808414e:	bd70      	pop	{r4, r5, r6, pc}
 8084150:	f1c4 040c 	rsb	r4, r4, #12
 8084154:	f1c4 0520 	rsb	r5, r4, #32
 8084158:	fa00 f304 	lsl.w	r3, r0, r4
 808415c:	fa20 f005 	lsr.w	r0, r0, r5
 8084160:	fa01 f204 	lsl.w	r2, r1, r4
 8084164:	ea40 0002 	orr.w	r0, r0, r2
 8084168:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808416c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8084170:	f141 0100 	adc.w	r1, r1, #0
 8084174:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8084178:	bf08      	it	eq
 808417a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808417e:	bd70      	pop	{r4, r5, r6, pc}
 8084180:	f1c4 0520 	rsb	r5, r4, #32
 8084184:	fa00 f205 	lsl.w	r2, r0, r5
 8084188:	ea4e 0e02 	orr.w	lr, lr, r2
 808418c:	fa20 f304 	lsr.w	r3, r0, r4
 8084190:	fa01 f205 	lsl.w	r2, r1, r5
 8084194:	ea43 0302 	orr.w	r3, r3, r2
 8084198:	fa21 f004 	lsr.w	r0, r1, r4
 808419c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80841a0:	fa21 f204 	lsr.w	r2, r1, r4
 80841a4:	ea20 0002 	bic.w	r0, r0, r2
 80841a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80841ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80841b0:	bf08      	it	eq
 80841b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80841b6:	bd70      	pop	{r4, r5, r6, pc}
 80841b8:	f094 0f00 	teq	r4, #0
 80841bc:	d10f      	bne.n	80841de <__aeabi_dmul+0x1c2>
 80841be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80841c2:	0040      	lsls	r0, r0, #1
 80841c4:	eb41 0101 	adc.w	r1, r1, r1
 80841c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80841cc:	bf08      	it	eq
 80841ce:	3c01      	subeq	r4, #1
 80841d0:	d0f7      	beq.n	80841c2 <__aeabi_dmul+0x1a6>
 80841d2:	ea41 0106 	orr.w	r1, r1, r6
 80841d6:	f095 0f00 	teq	r5, #0
 80841da:	bf18      	it	ne
 80841dc:	4770      	bxne	lr
 80841de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80841e2:	0052      	lsls	r2, r2, #1
 80841e4:	eb43 0303 	adc.w	r3, r3, r3
 80841e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80841ec:	bf08      	it	eq
 80841ee:	3d01      	subeq	r5, #1
 80841f0:	d0f7      	beq.n	80841e2 <__aeabi_dmul+0x1c6>
 80841f2:	ea43 0306 	orr.w	r3, r3, r6
 80841f6:	4770      	bx	lr
 80841f8:	ea94 0f0c 	teq	r4, ip
 80841fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8084200:	bf18      	it	ne
 8084202:	ea95 0f0c 	teqne	r5, ip
 8084206:	d00c      	beq.n	8084222 <__aeabi_dmul+0x206>
 8084208:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808420c:	bf18      	it	ne
 808420e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8084212:	d1d1      	bne.n	80841b8 <__aeabi_dmul+0x19c>
 8084214:	ea81 0103 	eor.w	r1, r1, r3
 8084218:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808421c:	f04f 0000 	mov.w	r0, #0
 8084220:	bd70      	pop	{r4, r5, r6, pc}
 8084222:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8084226:	bf06      	itte	eq
 8084228:	4610      	moveq	r0, r2
 808422a:	4619      	moveq	r1, r3
 808422c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8084230:	d019      	beq.n	8084266 <__aeabi_dmul+0x24a>
 8084232:	ea94 0f0c 	teq	r4, ip
 8084236:	d102      	bne.n	808423e <__aeabi_dmul+0x222>
 8084238:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 808423c:	d113      	bne.n	8084266 <__aeabi_dmul+0x24a>
 808423e:	ea95 0f0c 	teq	r5, ip
 8084242:	d105      	bne.n	8084250 <__aeabi_dmul+0x234>
 8084244:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8084248:	bf1c      	itt	ne
 808424a:	4610      	movne	r0, r2
 808424c:	4619      	movne	r1, r3
 808424e:	d10a      	bne.n	8084266 <__aeabi_dmul+0x24a>
 8084250:	ea81 0103 	eor.w	r1, r1, r3
 8084254:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8084258:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808425c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8084260:	f04f 0000 	mov.w	r0, #0
 8084264:	bd70      	pop	{r4, r5, r6, pc}
 8084266:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808426a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 808426e:	bd70      	pop	{r4, r5, r6, pc}

08084270 <__aeabi_ddiv>:
 8084270:	b570      	push	{r4, r5, r6, lr}
 8084272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8084276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808427a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808427e:	bf1d      	ittte	ne
 8084280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8084284:	ea94 0f0c 	teqne	r4, ip
 8084288:	ea95 0f0c 	teqne	r5, ip
 808428c:	f000 f8a7 	bleq	80843de <__aeabi_ddiv+0x16e>
 8084290:	eba4 0405 	sub.w	r4, r4, r5
 8084294:	ea81 0e03 	eor.w	lr, r1, r3
 8084298:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808429c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80842a0:	f000 8088 	beq.w	80843b4 <__aeabi_ddiv+0x144>
 80842a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80842a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80842ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80842b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80842b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80842b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80842bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80842c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80842c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80842c8:	429d      	cmp	r5, r3
 80842ca:	bf08      	it	eq
 80842cc:	4296      	cmpeq	r6, r2
 80842ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80842d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80842d6:	d202      	bcs.n	80842de <__aeabi_ddiv+0x6e>
 80842d8:	085b      	lsrs	r3, r3, #1
 80842da:	ea4f 0232 	mov.w	r2, r2, rrx
 80842de:	1ab6      	subs	r6, r6, r2
 80842e0:	eb65 0503 	sbc.w	r5, r5, r3
 80842e4:	085b      	lsrs	r3, r3, #1
 80842e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80842ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80842ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80842f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80842f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80842fa:	bf22      	ittt	cs
 80842fc:	1ab6      	subcs	r6, r6, r2
 80842fe:	4675      	movcs	r5, lr
 8084300:	ea40 000c 	orrcs.w	r0, r0, ip
 8084304:	085b      	lsrs	r3, r3, #1
 8084306:	ea4f 0232 	mov.w	r2, r2, rrx
 808430a:	ebb6 0e02 	subs.w	lr, r6, r2
 808430e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8084312:	bf22      	ittt	cs
 8084314:	1ab6      	subcs	r6, r6, r2
 8084316:	4675      	movcs	r5, lr
 8084318:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808431c:	085b      	lsrs	r3, r3, #1
 808431e:	ea4f 0232 	mov.w	r2, r2, rrx
 8084322:	ebb6 0e02 	subs.w	lr, r6, r2
 8084326:	eb75 0e03 	sbcs.w	lr, r5, r3
 808432a:	bf22      	ittt	cs
 808432c:	1ab6      	subcs	r6, r6, r2
 808432e:	4675      	movcs	r5, lr
 8084330:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8084334:	085b      	lsrs	r3, r3, #1
 8084336:	ea4f 0232 	mov.w	r2, r2, rrx
 808433a:	ebb6 0e02 	subs.w	lr, r6, r2
 808433e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8084342:	bf22      	ittt	cs
 8084344:	1ab6      	subcs	r6, r6, r2
 8084346:	4675      	movcs	r5, lr
 8084348:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808434c:	ea55 0e06 	orrs.w	lr, r5, r6
 8084350:	d018      	beq.n	8084384 <__aeabi_ddiv+0x114>
 8084352:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8084356:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 808435a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 808435e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8084362:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8084366:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 808436a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 808436e:	d1c0      	bne.n	80842f2 <__aeabi_ddiv+0x82>
 8084370:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8084374:	d10b      	bne.n	808438e <__aeabi_ddiv+0x11e>
 8084376:	ea41 0100 	orr.w	r1, r1, r0
 808437a:	f04f 0000 	mov.w	r0, #0
 808437e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8084382:	e7b6      	b.n	80842f2 <__aeabi_ddiv+0x82>
 8084384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8084388:	bf04      	itt	eq
 808438a:	4301      	orreq	r1, r0
 808438c:	2000      	moveq	r0, #0
 808438e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8084392:	bf88      	it	hi
 8084394:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8084398:	f63f aeaf 	bhi.w	80840fa <__aeabi_dmul+0xde>
 808439c:	ebb5 0c03 	subs.w	ip, r5, r3
 80843a0:	bf04      	itt	eq
 80843a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80843a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80843aa:	f150 0000 	adcs.w	r0, r0, #0
 80843ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80843b2:	bd70      	pop	{r4, r5, r6, pc}
 80843b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80843b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80843bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80843c0:	bfc2      	ittt	gt
 80843c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80843c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80843ca:	bd70      	popgt	{r4, r5, r6, pc}
 80843cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80843d0:	f04f 0e00 	mov.w	lr, #0
 80843d4:	3c01      	subs	r4, #1
 80843d6:	e690      	b.n	80840fa <__aeabi_dmul+0xde>
 80843d8:	ea45 0e06 	orr.w	lr, r5, r6
 80843dc:	e68d      	b.n	80840fa <__aeabi_dmul+0xde>
 80843de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80843e2:	ea94 0f0c 	teq	r4, ip
 80843e6:	bf08      	it	eq
 80843e8:	ea95 0f0c 	teqeq	r5, ip
 80843ec:	f43f af3b 	beq.w	8084266 <__aeabi_dmul+0x24a>
 80843f0:	ea94 0f0c 	teq	r4, ip
 80843f4:	d10a      	bne.n	808440c <__aeabi_ddiv+0x19c>
 80843f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80843fa:	f47f af34 	bne.w	8084266 <__aeabi_dmul+0x24a>
 80843fe:	ea95 0f0c 	teq	r5, ip
 8084402:	f47f af25 	bne.w	8084250 <__aeabi_dmul+0x234>
 8084406:	4610      	mov	r0, r2
 8084408:	4619      	mov	r1, r3
 808440a:	e72c      	b.n	8084266 <__aeabi_dmul+0x24a>
 808440c:	ea95 0f0c 	teq	r5, ip
 8084410:	d106      	bne.n	8084420 <__aeabi_ddiv+0x1b0>
 8084412:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8084416:	f43f aefd 	beq.w	8084214 <__aeabi_dmul+0x1f8>
 808441a:	4610      	mov	r0, r2
 808441c:	4619      	mov	r1, r3
 808441e:	e722      	b.n	8084266 <__aeabi_dmul+0x24a>
 8084420:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8084424:	bf18      	it	ne
 8084426:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808442a:	f47f aec5 	bne.w	80841b8 <__aeabi_dmul+0x19c>
 808442e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8084432:	f47f af0d 	bne.w	8084250 <__aeabi_dmul+0x234>
 8084436:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 808443a:	f47f aeeb 	bne.w	8084214 <__aeabi_dmul+0x1f8>
 808443e:	e712      	b.n	8084266 <__aeabi_dmul+0x24a>

08084440 <__aeabi_d2iz>:
 8084440:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8084444:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8084448:	d215      	bcs.n	8084476 <__aeabi_d2iz+0x36>
 808444a:	d511      	bpl.n	8084470 <__aeabi_d2iz+0x30>
 808444c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8084450:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8084454:	d912      	bls.n	808447c <__aeabi_d2iz+0x3c>
 8084456:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808445a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808445e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8084462:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8084466:	fa23 f002 	lsr.w	r0, r3, r2
 808446a:	bf18      	it	ne
 808446c:	4240      	negne	r0, r0
 808446e:	4770      	bx	lr
 8084470:	f04f 0000 	mov.w	r0, #0
 8084474:	4770      	bx	lr
 8084476:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808447a:	d105      	bne.n	8084488 <__aeabi_d2iz+0x48>
 808447c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8084480:	bf08      	it	eq
 8084482:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8084486:	4770      	bx	lr
 8084488:	f04f 0000 	mov.w	r0, #0
 808448c:	4770      	bx	lr
 808448e:	bf00      	nop

08084490 <__aeabi_d2f>:
 8084490:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8084494:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8084498:	bf24      	itt	cs
 808449a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 808449e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80844a2:	d90d      	bls.n	80844c0 <__aeabi_d2f+0x30>
 80844a4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80844a8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80844ac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80844b0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80844b4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80844b8:	bf08      	it	eq
 80844ba:	f020 0001 	biceq.w	r0, r0, #1
 80844be:	4770      	bx	lr
 80844c0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80844c4:	d121      	bne.n	808450a <__aeabi_d2f+0x7a>
 80844c6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80844ca:	bfbc      	itt	lt
 80844cc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80844d0:	4770      	bxlt	lr
 80844d2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80844d6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80844da:	f1c2 0218 	rsb	r2, r2, #24
 80844de:	f1c2 0c20 	rsb	ip, r2, #32
 80844e2:	fa10 f30c 	lsls.w	r3, r0, ip
 80844e6:	fa20 f002 	lsr.w	r0, r0, r2
 80844ea:	bf18      	it	ne
 80844ec:	f040 0001 	orrne.w	r0, r0, #1
 80844f0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80844f4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80844f8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80844fc:	ea40 000c 	orr.w	r0, r0, ip
 8084500:	fa23 f302 	lsr.w	r3, r3, r2
 8084504:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8084508:	e7cc      	b.n	80844a4 <__aeabi_d2f+0x14>
 808450a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 808450e:	d107      	bne.n	8084520 <__aeabi_d2f+0x90>
 8084510:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8084514:	bf1e      	ittt	ne
 8084516:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 808451a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 808451e:	4770      	bxne	lr
 8084520:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8084524:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8084528:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808452c:	4770      	bx	lr
 808452e:	bf00      	nop

08084530 <__aeabi_frsub>:
 8084530:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8084534:	e002      	b.n	808453c <__addsf3>
 8084536:	bf00      	nop

08084538 <__aeabi_fsub>:
 8084538:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0808453c <__addsf3>:
 808453c:	0042      	lsls	r2, r0, #1
 808453e:	bf1f      	itttt	ne
 8084540:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8084544:	ea92 0f03 	teqne	r2, r3
 8084548:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 808454c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8084550:	d06a      	beq.n	8084628 <__addsf3+0xec>
 8084552:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8084556:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 808455a:	bfc1      	itttt	gt
 808455c:	18d2      	addgt	r2, r2, r3
 808455e:	4041      	eorgt	r1, r0
 8084560:	4048      	eorgt	r0, r1
 8084562:	4041      	eorgt	r1, r0
 8084564:	bfb8      	it	lt
 8084566:	425b      	neglt	r3, r3
 8084568:	2b19      	cmp	r3, #25
 808456a:	bf88      	it	hi
 808456c:	4770      	bxhi	lr
 808456e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8084572:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084576:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 808457a:	bf18      	it	ne
 808457c:	4240      	negne	r0, r0
 808457e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8084582:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8084586:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 808458a:	bf18      	it	ne
 808458c:	4249      	negne	r1, r1
 808458e:	ea92 0f03 	teq	r2, r3
 8084592:	d03f      	beq.n	8084614 <__addsf3+0xd8>
 8084594:	f1a2 0201 	sub.w	r2, r2, #1
 8084598:	fa41 fc03 	asr.w	ip, r1, r3
 808459c:	eb10 000c 	adds.w	r0, r0, ip
 80845a0:	f1c3 0320 	rsb	r3, r3, #32
 80845a4:	fa01 f103 	lsl.w	r1, r1, r3
 80845a8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80845ac:	d502      	bpl.n	80845b4 <__addsf3+0x78>
 80845ae:	4249      	negs	r1, r1
 80845b0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80845b4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80845b8:	d313      	bcc.n	80845e2 <__addsf3+0xa6>
 80845ba:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80845be:	d306      	bcc.n	80845ce <__addsf3+0x92>
 80845c0:	0840      	lsrs	r0, r0, #1
 80845c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80845c6:	f102 0201 	add.w	r2, r2, #1
 80845ca:	2afe      	cmp	r2, #254	; 0xfe
 80845cc:	d251      	bcs.n	8084672 <__addsf3+0x136>
 80845ce:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80845d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80845d6:	bf08      	it	eq
 80845d8:	f020 0001 	biceq.w	r0, r0, #1
 80845dc:	ea40 0003 	orr.w	r0, r0, r3
 80845e0:	4770      	bx	lr
 80845e2:	0049      	lsls	r1, r1, #1
 80845e4:	eb40 0000 	adc.w	r0, r0, r0
 80845e8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80845ec:	f1a2 0201 	sub.w	r2, r2, #1
 80845f0:	d1ed      	bne.n	80845ce <__addsf3+0x92>
 80845f2:	fab0 fc80 	clz	ip, r0
 80845f6:	f1ac 0c08 	sub.w	ip, ip, #8
 80845fa:	ebb2 020c 	subs.w	r2, r2, ip
 80845fe:	fa00 f00c 	lsl.w	r0, r0, ip
 8084602:	bfaa      	itet	ge
 8084604:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8084608:	4252      	neglt	r2, r2
 808460a:	4318      	orrge	r0, r3
 808460c:	bfbc      	itt	lt
 808460e:	40d0      	lsrlt	r0, r2
 8084610:	4318      	orrlt	r0, r3
 8084612:	4770      	bx	lr
 8084614:	f092 0f00 	teq	r2, #0
 8084618:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 808461c:	bf06      	itte	eq
 808461e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8084622:	3201      	addeq	r2, #1
 8084624:	3b01      	subne	r3, #1
 8084626:	e7b5      	b.n	8084594 <__addsf3+0x58>
 8084628:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808462c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8084630:	bf18      	it	ne
 8084632:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8084636:	d021      	beq.n	808467c <__addsf3+0x140>
 8084638:	ea92 0f03 	teq	r2, r3
 808463c:	d004      	beq.n	8084648 <__addsf3+0x10c>
 808463e:	f092 0f00 	teq	r2, #0
 8084642:	bf08      	it	eq
 8084644:	4608      	moveq	r0, r1
 8084646:	4770      	bx	lr
 8084648:	ea90 0f01 	teq	r0, r1
 808464c:	bf1c      	itt	ne
 808464e:	2000      	movne	r0, #0
 8084650:	4770      	bxne	lr
 8084652:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8084656:	d104      	bne.n	8084662 <__addsf3+0x126>
 8084658:	0040      	lsls	r0, r0, #1
 808465a:	bf28      	it	cs
 808465c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8084660:	4770      	bx	lr
 8084662:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8084666:	bf3c      	itt	cc
 8084668:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 808466c:	4770      	bxcc	lr
 808466e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8084672:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8084676:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808467a:	4770      	bx	lr
 808467c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8084680:	bf16      	itet	ne
 8084682:	4608      	movne	r0, r1
 8084684:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8084688:	4601      	movne	r1, r0
 808468a:	0242      	lsls	r2, r0, #9
 808468c:	bf06      	itte	eq
 808468e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8084692:	ea90 0f01 	teqeq	r0, r1
 8084696:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 808469a:	4770      	bx	lr

0808469c <__aeabi_ui2f>:
 808469c:	f04f 0300 	mov.w	r3, #0
 80846a0:	e004      	b.n	80846ac <__aeabi_i2f+0x8>
 80846a2:	bf00      	nop

080846a4 <__aeabi_i2f>:
 80846a4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80846a8:	bf48      	it	mi
 80846aa:	4240      	negmi	r0, r0
 80846ac:	ea5f 0c00 	movs.w	ip, r0
 80846b0:	bf08      	it	eq
 80846b2:	4770      	bxeq	lr
 80846b4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80846b8:	4601      	mov	r1, r0
 80846ba:	f04f 0000 	mov.w	r0, #0
 80846be:	e01c      	b.n	80846fa <__aeabi_l2f+0x2a>

080846c0 <__aeabi_ul2f>:
 80846c0:	ea50 0201 	orrs.w	r2, r0, r1
 80846c4:	bf08      	it	eq
 80846c6:	4770      	bxeq	lr
 80846c8:	f04f 0300 	mov.w	r3, #0
 80846cc:	e00a      	b.n	80846e4 <__aeabi_l2f+0x14>
 80846ce:	bf00      	nop

080846d0 <__aeabi_l2f>:
 80846d0:	ea50 0201 	orrs.w	r2, r0, r1
 80846d4:	bf08      	it	eq
 80846d6:	4770      	bxeq	lr
 80846d8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80846dc:	d502      	bpl.n	80846e4 <__aeabi_l2f+0x14>
 80846de:	4240      	negs	r0, r0
 80846e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80846e4:	ea5f 0c01 	movs.w	ip, r1
 80846e8:	bf02      	ittt	eq
 80846ea:	4684      	moveq	ip, r0
 80846ec:	4601      	moveq	r1, r0
 80846ee:	2000      	moveq	r0, #0
 80846f0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80846f4:	bf08      	it	eq
 80846f6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80846fa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80846fe:	fabc f28c 	clz	r2, ip
 8084702:	3a08      	subs	r2, #8
 8084704:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8084708:	db10      	blt.n	808472c <__aeabi_l2f+0x5c>
 808470a:	fa01 fc02 	lsl.w	ip, r1, r2
 808470e:	4463      	add	r3, ip
 8084710:	fa00 fc02 	lsl.w	ip, r0, r2
 8084714:	f1c2 0220 	rsb	r2, r2, #32
 8084718:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808471c:	fa20 f202 	lsr.w	r2, r0, r2
 8084720:	eb43 0002 	adc.w	r0, r3, r2
 8084724:	bf08      	it	eq
 8084726:	f020 0001 	biceq.w	r0, r0, #1
 808472a:	4770      	bx	lr
 808472c:	f102 0220 	add.w	r2, r2, #32
 8084730:	fa01 fc02 	lsl.w	ip, r1, r2
 8084734:	f1c2 0220 	rsb	r2, r2, #32
 8084738:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 808473c:	fa21 f202 	lsr.w	r2, r1, r2
 8084740:	eb43 0002 	adc.w	r0, r3, r2
 8084744:	bf08      	it	eq
 8084746:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808474a:	4770      	bx	lr

0808474c <__aeabi_fmul>:
 808474c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8084750:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8084754:	bf1e      	ittt	ne
 8084756:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808475a:	ea92 0f0c 	teqne	r2, ip
 808475e:	ea93 0f0c 	teqne	r3, ip
 8084762:	d06f      	beq.n	8084844 <__aeabi_fmul+0xf8>
 8084764:	441a      	add	r2, r3
 8084766:	ea80 0c01 	eor.w	ip, r0, r1
 808476a:	0240      	lsls	r0, r0, #9
 808476c:	bf18      	it	ne
 808476e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8084772:	d01e      	beq.n	80847b2 <__aeabi_fmul+0x66>
 8084774:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8084778:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 808477c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8084780:	fba0 3101 	umull	r3, r1, r0, r1
 8084784:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8084788:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 808478c:	bf3e      	ittt	cc
 808478e:	0049      	lslcc	r1, r1, #1
 8084790:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8084794:	005b      	lslcc	r3, r3, #1
 8084796:	ea40 0001 	orr.w	r0, r0, r1
 808479a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 808479e:	2afd      	cmp	r2, #253	; 0xfd
 80847a0:	d81d      	bhi.n	80847de <__aeabi_fmul+0x92>
 80847a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80847a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80847aa:	bf08      	it	eq
 80847ac:	f020 0001 	biceq.w	r0, r0, #1
 80847b0:	4770      	bx	lr
 80847b2:	f090 0f00 	teq	r0, #0
 80847b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80847ba:	bf08      	it	eq
 80847bc:	0249      	lsleq	r1, r1, #9
 80847be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80847c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80847c6:	3a7f      	subs	r2, #127	; 0x7f
 80847c8:	bfc2      	ittt	gt
 80847ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80847ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80847d2:	4770      	bxgt	lr
 80847d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80847d8:	f04f 0300 	mov.w	r3, #0
 80847dc:	3a01      	subs	r2, #1
 80847de:	dc5d      	bgt.n	808489c <__aeabi_fmul+0x150>
 80847e0:	f112 0f19 	cmn.w	r2, #25
 80847e4:	bfdc      	itt	le
 80847e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80847ea:	4770      	bxle	lr
 80847ec:	f1c2 0200 	rsb	r2, r2, #0
 80847f0:	0041      	lsls	r1, r0, #1
 80847f2:	fa21 f102 	lsr.w	r1, r1, r2
 80847f6:	f1c2 0220 	rsb	r2, r2, #32
 80847fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80847fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8084802:	f140 0000 	adc.w	r0, r0, #0
 8084806:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 808480a:	bf08      	it	eq
 808480c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8084810:	4770      	bx	lr
 8084812:	f092 0f00 	teq	r2, #0
 8084816:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808481a:	bf02      	ittt	eq
 808481c:	0040      	lsleq	r0, r0, #1
 808481e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8084822:	3a01      	subeq	r2, #1
 8084824:	d0f9      	beq.n	808481a <__aeabi_fmul+0xce>
 8084826:	ea40 000c 	orr.w	r0, r0, ip
 808482a:	f093 0f00 	teq	r3, #0
 808482e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8084832:	bf02      	ittt	eq
 8084834:	0049      	lsleq	r1, r1, #1
 8084836:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808483a:	3b01      	subeq	r3, #1
 808483c:	d0f9      	beq.n	8084832 <__aeabi_fmul+0xe6>
 808483e:	ea41 010c 	orr.w	r1, r1, ip
 8084842:	e78f      	b.n	8084764 <__aeabi_fmul+0x18>
 8084844:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8084848:	ea92 0f0c 	teq	r2, ip
 808484c:	bf18      	it	ne
 808484e:	ea93 0f0c 	teqne	r3, ip
 8084852:	d00a      	beq.n	808486a <__aeabi_fmul+0x11e>
 8084854:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8084858:	bf18      	it	ne
 808485a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808485e:	d1d8      	bne.n	8084812 <__aeabi_fmul+0xc6>
 8084860:	ea80 0001 	eor.w	r0, r0, r1
 8084864:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8084868:	4770      	bx	lr
 808486a:	f090 0f00 	teq	r0, #0
 808486e:	bf17      	itett	ne
 8084870:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8084874:	4608      	moveq	r0, r1
 8084876:	f091 0f00 	teqne	r1, #0
 808487a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 808487e:	d014      	beq.n	80848aa <__aeabi_fmul+0x15e>
 8084880:	ea92 0f0c 	teq	r2, ip
 8084884:	d101      	bne.n	808488a <__aeabi_fmul+0x13e>
 8084886:	0242      	lsls	r2, r0, #9
 8084888:	d10f      	bne.n	80848aa <__aeabi_fmul+0x15e>
 808488a:	ea93 0f0c 	teq	r3, ip
 808488e:	d103      	bne.n	8084898 <__aeabi_fmul+0x14c>
 8084890:	024b      	lsls	r3, r1, #9
 8084892:	bf18      	it	ne
 8084894:	4608      	movne	r0, r1
 8084896:	d108      	bne.n	80848aa <__aeabi_fmul+0x15e>
 8084898:	ea80 0001 	eor.w	r0, r0, r1
 808489c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80848a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80848a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80848a8:	4770      	bx	lr
 80848aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80848ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80848b2:	4770      	bx	lr

080848b4 <__aeabi_fdiv>:
 80848b4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80848b8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80848bc:	bf1e      	ittt	ne
 80848be:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80848c2:	ea92 0f0c 	teqne	r2, ip
 80848c6:	ea93 0f0c 	teqne	r3, ip
 80848ca:	d069      	beq.n	80849a0 <__aeabi_fdiv+0xec>
 80848cc:	eba2 0203 	sub.w	r2, r2, r3
 80848d0:	ea80 0c01 	eor.w	ip, r0, r1
 80848d4:	0249      	lsls	r1, r1, #9
 80848d6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80848da:	d037      	beq.n	808494c <__aeabi_fdiv+0x98>
 80848dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80848e0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80848e4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80848e8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80848ec:	428b      	cmp	r3, r1
 80848ee:	bf38      	it	cc
 80848f0:	005b      	lslcc	r3, r3, #1
 80848f2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80848f6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80848fa:	428b      	cmp	r3, r1
 80848fc:	bf24      	itt	cs
 80848fe:	1a5b      	subcs	r3, r3, r1
 8084900:	ea40 000c 	orrcs.w	r0, r0, ip
 8084904:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8084908:	bf24      	itt	cs
 808490a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 808490e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8084912:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8084916:	bf24      	itt	cs
 8084918:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 808491c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8084920:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8084924:	bf24      	itt	cs
 8084926:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 808492a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808492e:	011b      	lsls	r3, r3, #4
 8084930:	bf18      	it	ne
 8084932:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8084936:	d1e0      	bne.n	80848fa <__aeabi_fdiv+0x46>
 8084938:	2afd      	cmp	r2, #253	; 0xfd
 808493a:	f63f af50 	bhi.w	80847de <__aeabi_fmul+0x92>
 808493e:	428b      	cmp	r3, r1
 8084940:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8084944:	bf08      	it	eq
 8084946:	f020 0001 	biceq.w	r0, r0, #1
 808494a:	4770      	bx	lr
 808494c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8084950:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8084954:	327f      	adds	r2, #127	; 0x7f
 8084956:	bfc2      	ittt	gt
 8084958:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808495c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8084960:	4770      	bxgt	lr
 8084962:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084966:	f04f 0300 	mov.w	r3, #0
 808496a:	3a01      	subs	r2, #1
 808496c:	e737      	b.n	80847de <__aeabi_fmul+0x92>
 808496e:	f092 0f00 	teq	r2, #0
 8084972:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8084976:	bf02      	ittt	eq
 8084978:	0040      	lsleq	r0, r0, #1
 808497a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808497e:	3a01      	subeq	r2, #1
 8084980:	d0f9      	beq.n	8084976 <__aeabi_fdiv+0xc2>
 8084982:	ea40 000c 	orr.w	r0, r0, ip
 8084986:	f093 0f00 	teq	r3, #0
 808498a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808498e:	bf02      	ittt	eq
 8084990:	0049      	lsleq	r1, r1, #1
 8084992:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8084996:	3b01      	subeq	r3, #1
 8084998:	d0f9      	beq.n	808498e <__aeabi_fdiv+0xda>
 808499a:	ea41 010c 	orr.w	r1, r1, ip
 808499e:	e795      	b.n	80848cc <__aeabi_fdiv+0x18>
 80849a0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80849a4:	ea92 0f0c 	teq	r2, ip
 80849a8:	d108      	bne.n	80849bc <__aeabi_fdiv+0x108>
 80849aa:	0242      	lsls	r2, r0, #9
 80849ac:	f47f af7d 	bne.w	80848aa <__aeabi_fmul+0x15e>
 80849b0:	ea93 0f0c 	teq	r3, ip
 80849b4:	f47f af70 	bne.w	8084898 <__aeabi_fmul+0x14c>
 80849b8:	4608      	mov	r0, r1
 80849ba:	e776      	b.n	80848aa <__aeabi_fmul+0x15e>
 80849bc:	ea93 0f0c 	teq	r3, ip
 80849c0:	d104      	bne.n	80849cc <__aeabi_fdiv+0x118>
 80849c2:	024b      	lsls	r3, r1, #9
 80849c4:	f43f af4c 	beq.w	8084860 <__aeabi_fmul+0x114>
 80849c8:	4608      	mov	r0, r1
 80849ca:	e76e      	b.n	80848aa <__aeabi_fmul+0x15e>
 80849cc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80849d0:	bf18      	it	ne
 80849d2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80849d6:	d1ca      	bne.n	808496e <__aeabi_fdiv+0xba>
 80849d8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80849dc:	f47f af5c 	bne.w	8084898 <__aeabi_fmul+0x14c>
 80849e0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80849e4:	f47f af3c 	bne.w	8084860 <__aeabi_fmul+0x114>
 80849e8:	e75f      	b.n	80848aa <__aeabi_fmul+0x15e>
 80849ea:	bf00      	nop

080849ec <__gesf2>:
 80849ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80849f0:	e006      	b.n	8084a00 <__cmpsf2+0x4>
 80849f2:	bf00      	nop

080849f4 <__lesf2>:
 80849f4:	f04f 0c01 	mov.w	ip, #1
 80849f8:	e002      	b.n	8084a00 <__cmpsf2+0x4>
 80849fa:	bf00      	nop

080849fc <__cmpsf2>:
 80849fc:	f04f 0c01 	mov.w	ip, #1
 8084a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8084a04:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8084a08:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8084a0c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8084a10:	bf18      	it	ne
 8084a12:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8084a16:	d011      	beq.n	8084a3c <__cmpsf2+0x40>
 8084a18:	b001      	add	sp, #4
 8084a1a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8084a1e:	bf18      	it	ne
 8084a20:	ea90 0f01 	teqne	r0, r1
 8084a24:	bf58      	it	pl
 8084a26:	ebb2 0003 	subspl.w	r0, r2, r3
 8084a2a:	bf88      	it	hi
 8084a2c:	17c8      	asrhi	r0, r1, #31
 8084a2e:	bf38      	it	cc
 8084a30:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8084a34:	bf18      	it	ne
 8084a36:	f040 0001 	orrne.w	r0, r0, #1
 8084a3a:	4770      	bx	lr
 8084a3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8084a40:	d102      	bne.n	8084a48 <__cmpsf2+0x4c>
 8084a42:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8084a46:	d105      	bne.n	8084a54 <__cmpsf2+0x58>
 8084a48:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8084a4c:	d1e4      	bne.n	8084a18 <__cmpsf2+0x1c>
 8084a4e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8084a52:	d0e1      	beq.n	8084a18 <__cmpsf2+0x1c>
 8084a54:	f85d 0b04 	ldr.w	r0, [sp], #4
 8084a58:	4770      	bx	lr
 8084a5a:	bf00      	nop

08084a5c <__aeabi_cfrcmple>:
 8084a5c:	4684      	mov	ip, r0
 8084a5e:	4608      	mov	r0, r1
 8084a60:	4661      	mov	r1, ip
 8084a62:	e7ff      	b.n	8084a64 <__aeabi_cfcmpeq>

08084a64 <__aeabi_cfcmpeq>:
 8084a64:	b50f      	push	{r0, r1, r2, r3, lr}
 8084a66:	f7ff ffc9 	bl	80849fc <__cmpsf2>
 8084a6a:	2800      	cmp	r0, #0
 8084a6c:	bf48      	it	mi
 8084a6e:	f110 0f00 	cmnmi.w	r0, #0
 8084a72:	bd0f      	pop	{r0, r1, r2, r3, pc}

08084a74 <__aeabi_fcmpeq>:
 8084a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084a78:	f7ff fff4 	bl	8084a64 <__aeabi_cfcmpeq>
 8084a7c:	bf0c      	ite	eq
 8084a7e:	2001      	moveq	r0, #1
 8084a80:	2000      	movne	r0, #0
 8084a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8084a86:	bf00      	nop

08084a88 <__aeabi_fcmplt>:
 8084a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084a8c:	f7ff ffea 	bl	8084a64 <__aeabi_cfcmpeq>
 8084a90:	bf34      	ite	cc
 8084a92:	2001      	movcc	r0, #1
 8084a94:	2000      	movcs	r0, #0
 8084a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8084a9a:	bf00      	nop

08084a9c <__aeabi_fcmple>:
 8084a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084aa0:	f7ff ffe0 	bl	8084a64 <__aeabi_cfcmpeq>
 8084aa4:	bf94      	ite	ls
 8084aa6:	2001      	movls	r0, #1
 8084aa8:	2000      	movhi	r0, #0
 8084aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8084aae:	bf00      	nop

08084ab0 <__aeabi_fcmpge>:
 8084ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084ab4:	f7ff ffd2 	bl	8084a5c <__aeabi_cfrcmple>
 8084ab8:	bf94      	ite	ls
 8084aba:	2001      	movls	r0, #1
 8084abc:	2000      	movhi	r0, #0
 8084abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8084ac2:	bf00      	nop

08084ac4 <__aeabi_fcmpgt>:
 8084ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084ac8:	f7ff ffc8 	bl	8084a5c <__aeabi_cfrcmple>
 8084acc:	bf34      	ite	cc
 8084ace:	2001      	movcc	r0, #1
 8084ad0:	2000      	movcs	r0, #0
 8084ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8084ad6:	bf00      	nop

08084ad8 <__aeabi_f2iz>:
 8084ad8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8084adc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8084ae0:	d30f      	bcc.n	8084b02 <__aeabi_f2iz+0x2a>
 8084ae2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8084ae6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8084aea:	d90d      	bls.n	8084b08 <__aeabi_f2iz+0x30>
 8084aec:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8084af0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8084af4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8084af8:	fa23 f002 	lsr.w	r0, r3, r2
 8084afc:	bf18      	it	ne
 8084afe:	4240      	negne	r0, r0
 8084b00:	4770      	bx	lr
 8084b02:	f04f 0000 	mov.w	r0, #0
 8084b06:	4770      	bx	lr
 8084b08:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8084b0c:	d101      	bne.n	8084b12 <__aeabi_f2iz+0x3a>
 8084b0e:	0242      	lsls	r2, r0, #9
 8084b10:	d105      	bne.n	8084b1e <__aeabi_f2iz+0x46>
 8084b12:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8084b16:	bf08      	it	eq
 8084b18:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8084b1c:	4770      	bx	lr
 8084b1e:	f04f 0000 	mov.w	r0, #0
 8084b22:	4770      	bx	lr

08084b24 <asctime>:
 8084b24:	4b09      	ldr	r3, [pc, #36]	; (8084b4c <asctime+0x28>)
 8084b26:	b570      	push	{r4, r5, r6, lr}
 8084b28:	681c      	ldr	r4, [r3, #0]
 8084b2a:	4606      	mov	r6, r0
 8084b2c:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8084b2e:	b93d      	cbnz	r5, 8084b40 <asctime+0x1c>
 8084b30:	201a      	movs	r0, #26
 8084b32:	f7fd f9fd 	bl	8081f30 <malloc>
 8084b36:	221a      	movs	r2, #26
 8084b38:	6420      	str	r0, [r4, #64]	; 0x40
 8084b3a:	4629      	mov	r1, r5
 8084b3c:	f000 f964 	bl	8084e08 <memset>
 8084b40:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8084b42:	4630      	mov	r0, r6
 8084b44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8084b48:	f000 b802 	b.w	8084b50 <asctime_r>
 8084b4c:	20000498 	.word	0x20000498

08084b50 <asctime_r>:
 8084b50:	b510      	push	{r4, lr}
 8084b52:	460c      	mov	r4, r1
 8084b54:	6941      	ldr	r1, [r0, #20]
 8084b56:	b086      	sub	sp, #24
 8084b58:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8084b5c:	6903      	ldr	r3, [r0, #16]
 8084b5e:	6982      	ldr	r2, [r0, #24]
 8084b60:	9104      	str	r1, [sp, #16]
 8084b62:	6801      	ldr	r1, [r0, #0]
 8084b64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8084b68:	9103      	str	r1, [sp, #12]
 8084b6a:	6841      	ldr	r1, [r0, #4]
 8084b6c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8084b70:	9102      	str	r1, [sp, #8]
 8084b72:	6881      	ldr	r1, [r0, #8]
 8084b74:	9101      	str	r1, [sp, #4]
 8084b76:	68c1      	ldr	r1, [r0, #12]
 8084b78:	4620      	mov	r0, r4
 8084b7a:	9100      	str	r1, [sp, #0]
 8084b7c:	4904      	ldr	r1, [pc, #16]	; (8084b90 <asctime_r+0x40>)
 8084b7e:	440b      	add	r3, r1
 8084b80:	4904      	ldr	r1, [pc, #16]	; (8084b94 <asctime_r+0x44>)
 8084b82:	440a      	add	r2, r1
 8084b84:	4904      	ldr	r1, [pc, #16]	; (8084b98 <asctime_r+0x48>)
 8084b86:	f7fd f9eb 	bl	8081f60 <siprintf>
 8084b8a:	4620      	mov	r0, r4
 8084b8c:	b006      	add	sp, #24
 8084b8e:	bd10      	pop	{r4, pc}
 8084b90:	08085e89 	.word	0x08085e89
 8084b94:	08085e74 	.word	0x08085e74
 8084b98:	08085ead 	.word	0x08085ead

08084b9c <atoi>:
 8084b9c:	220a      	movs	r2, #10
 8084b9e:	2100      	movs	r1, #0
 8084ba0:	f000 ba46 	b.w	8085030 <strtol>

08084ba4 <__cxa_atexit>:
 8084ba4:	b510      	push	{r4, lr}
 8084ba6:	4c05      	ldr	r4, [pc, #20]	; (8084bbc <__cxa_atexit+0x18>)
 8084ba8:	4613      	mov	r3, r2
 8084baa:	b12c      	cbz	r4, 8084bb8 <__cxa_atexit+0x14>
 8084bac:	460a      	mov	r2, r1
 8084bae:	4601      	mov	r1, r0
 8084bb0:	2002      	movs	r0, #2
 8084bb2:	f3af 8000 	nop.w
 8084bb6:	bd10      	pop	{r4, pc}
 8084bb8:	4620      	mov	r0, r4
 8084bba:	bd10      	pop	{r4, pc}
 8084bbc:	00000000 	.word	0x00000000

08084bc0 <difftime>:
 8084bc0:	b508      	push	{r3, lr}
 8084bc2:	1a40      	subs	r0, r0, r1
 8084bc4:	f7ff f9c4 	bl	8083f50 <__aeabi_i2d>
 8084bc8:	bd08      	pop	{r3, pc}
	...

08084bcc <localtime>:
 8084bcc:	b538      	push	{r3, r4, r5, lr}
 8084bce:	4b07      	ldr	r3, [pc, #28]	; (8084bec <localtime+0x20>)
 8084bd0:	4605      	mov	r5, r0
 8084bd2:	681c      	ldr	r4, [r3, #0]
 8084bd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8084bd6:	b91b      	cbnz	r3, 8084be0 <localtime+0x14>
 8084bd8:	2024      	movs	r0, #36	; 0x24
 8084bda:	f7fd f9a9 	bl	8081f30 <malloc>
 8084bde:	63e0      	str	r0, [r4, #60]	; 0x3c
 8084be0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8084be2:	4628      	mov	r0, r5
 8084be4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8084be8:	f000 b802 	b.w	8084bf0 <localtime_r>
 8084bec:	20000498 	.word	0x20000498

08084bf0 <localtime_r>:
 8084bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084bf4:	460c      	mov	r4, r1
 8084bf6:	4680      	mov	r8, r0
 8084bf8:	f000 fd20 	bl	808563c <__gettzinfo>
 8084bfc:	4621      	mov	r1, r4
 8084bfe:	4607      	mov	r7, r0
 8084c00:	4640      	mov	r0, r8
 8084c02:	f000 fd1f 	bl	8085644 <gmtime_r>
 8084c06:	6946      	ldr	r6, [r0, #20]
 8084c08:	4604      	mov	r4, r0
 8084c0a:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8084c0e:	07b3      	lsls	r3, r6, #30
 8084c10:	d105      	bne.n	8084c1e <localtime_r+0x2e>
 8084c12:	2264      	movs	r2, #100	; 0x64
 8084c14:	fb96 f3f2 	sdiv	r3, r6, r2
 8084c18:	fb02 6313 	mls	r3, r2, r3, r6
 8084c1c:	b94b      	cbnz	r3, 8084c32 <localtime_r+0x42>
 8084c1e:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8084c22:	fb96 f3f5 	sdiv	r3, r6, r5
 8084c26:	fb05 6513 	mls	r5, r5, r3, r6
 8084c2a:	fab5 f385 	clz	r3, r5
 8084c2e:	095b      	lsrs	r3, r3, #5
 8084c30:	e000      	b.n	8084c34 <localtime_r+0x44>
 8084c32:	2301      	movs	r3, #1
 8084c34:	4a5f      	ldr	r2, [pc, #380]	; (8084db4 <localtime_r+0x1c4>)
 8084c36:	2530      	movs	r5, #48	; 0x30
 8084c38:	fb05 2503 	mla	r5, r5, r3, r2
 8084c3c:	f000 fb32 	bl	80852a4 <__tz_lock>
 8084c40:	f000 fb32 	bl	80852a8 <_tzset_unlocked>
 8084c44:	4b5c      	ldr	r3, [pc, #368]	; (8084db8 <localtime_r+0x1c8>)
 8084c46:	681b      	ldr	r3, [r3, #0]
 8084c48:	b1f3      	cbz	r3, 8084c88 <localtime_r+0x98>
 8084c4a:	687b      	ldr	r3, [r7, #4]
 8084c4c:	429e      	cmp	r6, r3
 8084c4e:	d105      	bne.n	8084c5c <localtime_r+0x6c>
 8084c50:	6839      	ldr	r1, [r7, #0]
 8084c52:	f8d8 3000 	ldr.w	r3, [r8]
 8084c56:	69fa      	ldr	r2, [r7, #28]
 8084c58:	b941      	cbnz	r1, 8084c6c <localtime_r+0x7c>
 8084c5a:	e00a      	b.n	8084c72 <localtime_r+0x82>
 8084c5c:	4630      	mov	r0, r6
 8084c5e:	f000 fa79 	bl	8085154 <__tzcalc_limits>
 8084c62:	2800      	cmp	r0, #0
 8084c64:	d1f4      	bne.n	8084c50 <localtime_r+0x60>
 8084c66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8084c6a:	e00d      	b.n	8084c88 <localtime_r+0x98>
 8084c6c:	4293      	cmp	r3, r2
 8084c6e:	db08      	blt.n	8084c82 <localtime_r+0x92>
 8084c70:	e001      	b.n	8084c76 <localtime_r+0x86>
 8084c72:	4293      	cmp	r3, r2
 8084c74:	da07      	bge.n	8084c86 <localtime_r+0x96>
 8084c76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8084c78:	4293      	cmp	r3, r2
 8084c7a:	bfac      	ite	ge
 8084c7c:	2300      	movge	r3, #0
 8084c7e:	2301      	movlt	r3, #1
 8084c80:	e002      	b.n	8084c88 <localtime_r+0x98>
 8084c82:	2300      	movs	r3, #0
 8084c84:	e000      	b.n	8084c88 <localtime_r+0x98>
 8084c86:	2301      	movs	r3, #1
 8084c88:	6223      	str	r3, [r4, #32]
 8084c8a:	6a23      	ldr	r3, [r4, #32]
 8084c8c:	203c      	movs	r0, #60	; 0x3c
 8084c8e:	2b01      	cmp	r3, #1
 8084c90:	bf0c      	ite	eq
 8084c92:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 8084c94:	6a39      	ldrne	r1, [r7, #32]
 8084c96:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8084c9a:	fb91 f6f3 	sdiv	r6, r1, r3
 8084c9e:	fb03 1316 	mls	r3, r3, r6, r1
 8084ca2:	fb93 f2f0 	sdiv	r2, r3, r0
 8084ca6:	fb00 3012 	mls	r0, r0, r2, r3
 8084caa:	6861      	ldr	r1, [r4, #4]
 8084cac:	6823      	ldr	r3, [r4, #0]
 8084cae:	1a89      	subs	r1, r1, r2
 8084cb0:	68a2      	ldr	r2, [r4, #8]
 8084cb2:	1a1b      	subs	r3, r3, r0
 8084cb4:	1b92      	subs	r2, r2, r6
 8084cb6:	2b3b      	cmp	r3, #59	; 0x3b
 8084cb8:	6023      	str	r3, [r4, #0]
 8084cba:	6061      	str	r1, [r4, #4]
 8084cbc:	60a2      	str	r2, [r4, #8]
 8084cbe:	dd03      	ble.n	8084cc8 <localtime_r+0xd8>
 8084cc0:	3101      	adds	r1, #1
 8084cc2:	6061      	str	r1, [r4, #4]
 8084cc4:	3b3c      	subs	r3, #60	; 0x3c
 8084cc6:	e004      	b.n	8084cd2 <localtime_r+0xe2>
 8084cc8:	2b00      	cmp	r3, #0
 8084cca:	da03      	bge.n	8084cd4 <localtime_r+0xe4>
 8084ccc:	3901      	subs	r1, #1
 8084cce:	6061      	str	r1, [r4, #4]
 8084cd0:	333c      	adds	r3, #60	; 0x3c
 8084cd2:	6023      	str	r3, [r4, #0]
 8084cd4:	6863      	ldr	r3, [r4, #4]
 8084cd6:	2b3b      	cmp	r3, #59	; 0x3b
 8084cd8:	dd03      	ble.n	8084ce2 <localtime_r+0xf2>
 8084cda:	3201      	adds	r2, #1
 8084cdc:	60a2      	str	r2, [r4, #8]
 8084cde:	3b3c      	subs	r3, #60	; 0x3c
 8084ce0:	e004      	b.n	8084cec <localtime_r+0xfc>
 8084ce2:	2b00      	cmp	r3, #0
 8084ce4:	da03      	bge.n	8084cee <localtime_r+0xfe>
 8084ce6:	3a01      	subs	r2, #1
 8084ce8:	60a2      	str	r2, [r4, #8]
 8084cea:	333c      	adds	r3, #60	; 0x3c
 8084cec:	6063      	str	r3, [r4, #4]
 8084cee:	68a3      	ldr	r3, [r4, #8]
 8084cf0:	2b17      	cmp	r3, #23
 8084cf2:	dd22      	ble.n	8084d3a <localtime_r+0x14a>
 8084cf4:	69e2      	ldr	r2, [r4, #28]
 8084cf6:	3b18      	subs	r3, #24
 8084cf8:	3201      	adds	r2, #1
 8084cfa:	61e2      	str	r2, [r4, #28]
 8084cfc:	69a2      	ldr	r2, [r4, #24]
 8084cfe:	60a3      	str	r3, [r4, #8]
 8084d00:	3201      	adds	r2, #1
 8084d02:	2a06      	cmp	r2, #6
 8084d04:	bfc8      	it	gt
 8084d06:	2200      	movgt	r2, #0
 8084d08:	61a2      	str	r2, [r4, #24]
 8084d0a:	68e2      	ldr	r2, [r4, #12]
 8084d0c:	6923      	ldr	r3, [r4, #16]
 8084d0e:	3201      	adds	r2, #1
 8084d10:	60e2      	str	r2, [r4, #12]
 8084d12:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8084d16:	428a      	cmp	r2, r1
 8084d18:	dd46      	ble.n	8084da8 <localtime_r+0x1b8>
 8084d1a:	3301      	adds	r3, #1
 8084d1c:	2b0c      	cmp	r3, #12
 8084d1e:	bf08      	it	eq
 8084d20:	6963      	ldreq	r3, [r4, #20]
 8084d22:	eba2 0201 	sub.w	r2, r2, r1
 8084d26:	60e2      	str	r2, [r4, #12]
 8084d28:	bf05      	ittet	eq
 8084d2a:	3301      	addeq	r3, #1
 8084d2c:	2200      	moveq	r2, #0
 8084d2e:	6123      	strne	r3, [r4, #16]
 8084d30:	6122      	streq	r2, [r4, #16]
 8084d32:	bf04      	itt	eq
 8084d34:	6163      	streq	r3, [r4, #20]
 8084d36:	61e2      	streq	r2, [r4, #28]
 8084d38:	e036      	b.n	8084da8 <localtime_r+0x1b8>
 8084d3a:	2b00      	cmp	r3, #0
 8084d3c:	da34      	bge.n	8084da8 <localtime_r+0x1b8>
 8084d3e:	69e2      	ldr	r2, [r4, #28]
 8084d40:	3318      	adds	r3, #24
 8084d42:	3a01      	subs	r2, #1
 8084d44:	61e2      	str	r2, [r4, #28]
 8084d46:	69a2      	ldr	r2, [r4, #24]
 8084d48:	60a3      	str	r3, [r4, #8]
 8084d4a:	3a01      	subs	r2, #1
 8084d4c:	bf48      	it	mi
 8084d4e:	2206      	movmi	r2, #6
 8084d50:	61a2      	str	r2, [r4, #24]
 8084d52:	68e2      	ldr	r2, [r4, #12]
 8084d54:	3a01      	subs	r2, #1
 8084d56:	60e2      	str	r2, [r4, #12]
 8084d58:	bb32      	cbnz	r2, 8084da8 <localtime_r+0x1b8>
 8084d5a:	6923      	ldr	r3, [r4, #16]
 8084d5c:	3b01      	subs	r3, #1
 8084d5e:	d401      	bmi.n	8084d64 <localtime_r+0x174>
 8084d60:	6123      	str	r3, [r4, #16]
 8084d62:	e01d      	b.n	8084da0 <localtime_r+0x1b0>
 8084d64:	230b      	movs	r3, #11
 8084d66:	6123      	str	r3, [r4, #16]
 8084d68:	6963      	ldr	r3, [r4, #20]
 8084d6a:	1e5a      	subs	r2, r3, #1
 8084d6c:	f012 0f03 	tst.w	r2, #3
 8084d70:	6162      	str	r2, [r4, #20]
 8084d72:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8084d76:	d105      	bne.n	8084d84 <localtime_r+0x194>
 8084d78:	2164      	movs	r1, #100	; 0x64
 8084d7a:	fb93 f2f1 	sdiv	r2, r3, r1
 8084d7e:	fb01 3212 	mls	r2, r1, r2, r3
 8084d82:	b94a      	cbnz	r2, 8084d98 <localtime_r+0x1a8>
 8084d84:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8084d88:	fb93 f2f1 	sdiv	r2, r3, r1
 8084d8c:	fb01 3312 	mls	r3, r1, r2, r3
 8084d90:	fab3 f383 	clz	r3, r3
 8084d94:	095b      	lsrs	r3, r3, #5
 8084d96:	e000      	b.n	8084d9a <localtime_r+0x1aa>
 8084d98:	2301      	movs	r3, #1
 8084d9a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8084d9e:	61e3      	str	r3, [r4, #28]
 8084da0:	6923      	ldr	r3, [r4, #16]
 8084da2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8084da6:	60e3      	str	r3, [r4, #12]
 8084da8:	f000 fa7d 	bl	80852a6 <__tz_unlock>
 8084dac:	4620      	mov	r0, r4
 8084dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8084db2:	bf00      	nop
 8084db4:	08086034 	.word	0x08086034
 8084db8:	20000ce4 	.word	0x20000ce4

08084dbc <memcpy>:
 8084dbc:	b510      	push	{r4, lr}
 8084dbe:	1e43      	subs	r3, r0, #1
 8084dc0:	440a      	add	r2, r1
 8084dc2:	4291      	cmp	r1, r2
 8084dc4:	d004      	beq.n	8084dd0 <memcpy+0x14>
 8084dc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8084dca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8084dce:	e7f8      	b.n	8084dc2 <memcpy+0x6>
 8084dd0:	bd10      	pop	{r4, pc}

08084dd2 <memmove>:
 8084dd2:	4288      	cmp	r0, r1
 8084dd4:	b510      	push	{r4, lr}
 8084dd6:	eb01 0302 	add.w	r3, r1, r2
 8084dda:	d801      	bhi.n	8084de0 <memmove+0xe>
 8084ddc:	1e42      	subs	r2, r0, #1
 8084dde:	e00b      	b.n	8084df8 <memmove+0x26>
 8084de0:	4298      	cmp	r0, r3
 8084de2:	d2fb      	bcs.n	8084ddc <memmove+0xa>
 8084de4:	1881      	adds	r1, r0, r2
 8084de6:	1ad2      	subs	r2, r2, r3
 8084de8:	42d3      	cmn	r3, r2
 8084dea:	d004      	beq.n	8084df6 <memmove+0x24>
 8084dec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8084df0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8084df4:	e7f8      	b.n	8084de8 <memmove+0x16>
 8084df6:	bd10      	pop	{r4, pc}
 8084df8:	4299      	cmp	r1, r3
 8084dfa:	d004      	beq.n	8084e06 <memmove+0x34>
 8084dfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8084e00:	f802 4f01 	strb.w	r4, [r2, #1]!
 8084e04:	e7f8      	b.n	8084df8 <memmove+0x26>
 8084e06:	bd10      	pop	{r4, pc}

08084e08 <memset>:
 8084e08:	4603      	mov	r3, r0
 8084e0a:	4402      	add	r2, r0
 8084e0c:	4293      	cmp	r3, r2
 8084e0e:	d002      	beq.n	8084e16 <memset+0xe>
 8084e10:	f803 1b01 	strb.w	r1, [r3], #1
 8084e14:	e7fa      	b.n	8084e0c <memset+0x4>
 8084e16:	4770      	bx	lr

08084e18 <srand>:
 8084e18:	b538      	push	{r3, r4, r5, lr}
 8084e1a:	4b12      	ldr	r3, [pc, #72]	; (8084e64 <srand+0x4c>)
 8084e1c:	4605      	mov	r5, r0
 8084e1e:	681c      	ldr	r4, [r3, #0]
 8084e20:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8084e22:	b9d3      	cbnz	r3, 8084e5a <srand+0x42>
 8084e24:	2018      	movs	r0, #24
 8084e26:	f7fd f883 	bl	8081f30 <malloc>
 8084e2a:	f243 330e 	movw	r3, #13070	; 0x330e
 8084e2e:	63a0      	str	r0, [r4, #56]	; 0x38
 8084e30:	8003      	strh	r3, [r0, #0]
 8084e32:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8084e36:	8043      	strh	r3, [r0, #2]
 8084e38:	f241 2334 	movw	r3, #4660	; 0x1234
 8084e3c:	8083      	strh	r3, [r0, #4]
 8084e3e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8084e42:	80c3      	strh	r3, [r0, #6]
 8084e44:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8084e48:	8103      	strh	r3, [r0, #8]
 8084e4a:	2305      	movs	r3, #5
 8084e4c:	8143      	strh	r3, [r0, #10]
 8084e4e:	230b      	movs	r3, #11
 8084e50:	8183      	strh	r3, [r0, #12]
 8084e52:	2201      	movs	r2, #1
 8084e54:	2300      	movs	r3, #0
 8084e56:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8084e5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8084e5c:	2200      	movs	r2, #0
 8084e5e:	611d      	str	r5, [r3, #16]
 8084e60:	615a      	str	r2, [r3, #20]
 8084e62:	bd38      	pop	{r3, r4, r5, pc}
 8084e64:	20000498 	.word	0x20000498

08084e68 <strcmp>:
 8084e68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8084e6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8084e70:	2a01      	cmp	r2, #1
 8084e72:	bf28      	it	cs
 8084e74:	429a      	cmpcs	r2, r3
 8084e76:	d0f7      	beq.n	8084e68 <strcmp>
 8084e78:	1ad0      	subs	r0, r2, r3
 8084e7a:	4770      	bx	lr

08084e7c <strcpy>:
 8084e7c:	4603      	mov	r3, r0
 8084e7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8084e82:	f803 2b01 	strb.w	r2, [r3], #1
 8084e86:	2a00      	cmp	r2, #0
 8084e88:	d1f9      	bne.n	8084e7e <strcpy+0x2>
 8084e8a:	4770      	bx	lr

08084e8c <strdup>:
 8084e8c:	4b02      	ldr	r3, [pc, #8]	; (8084e98 <strdup+0xc>)
 8084e8e:	4601      	mov	r1, r0
 8084e90:	6818      	ldr	r0, [r3, #0]
 8084e92:	f000 b803 	b.w	8084e9c <_strdup_r>
 8084e96:	bf00      	nop
 8084e98:	20000498 	.word	0x20000498

08084e9c <_strdup_r>:
 8084e9c:	b570      	push	{r4, r5, r6, lr}
 8084e9e:	4606      	mov	r6, r0
 8084ea0:	4608      	mov	r0, r1
 8084ea2:	460c      	mov	r4, r1
 8084ea4:	f000 f80d 	bl	8084ec2 <strlen>
 8084ea8:	1c45      	adds	r5, r0, #1
 8084eaa:	4629      	mov	r1, r5
 8084eac:	4630      	mov	r0, r6
 8084eae:	f7fd f877 	bl	8081fa0 <_malloc_r>
 8084eb2:	4606      	mov	r6, r0
 8084eb4:	b118      	cbz	r0, 8084ebe <_strdup_r+0x22>
 8084eb6:	462a      	mov	r2, r5
 8084eb8:	4621      	mov	r1, r4
 8084eba:	f7ff ff7f 	bl	8084dbc <memcpy>
 8084ebe:	4630      	mov	r0, r6
 8084ec0:	bd70      	pop	{r4, r5, r6, pc}

08084ec2 <strlen>:
 8084ec2:	4603      	mov	r3, r0
 8084ec4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8084ec8:	2a00      	cmp	r2, #0
 8084eca:	d1fb      	bne.n	8084ec4 <strlen+0x2>
 8084ecc:	1a18      	subs	r0, r3, r0
 8084ece:	3801      	subs	r0, #1
 8084ed0:	4770      	bx	lr

08084ed2 <strncmp>:
 8084ed2:	b530      	push	{r4, r5, lr}
 8084ed4:	b182      	cbz	r2, 8084ef8 <strncmp+0x26>
 8084ed6:	1e45      	subs	r5, r0, #1
 8084ed8:	3901      	subs	r1, #1
 8084eda:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8084ede:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8084ee2:	42a3      	cmp	r3, r4
 8084ee4:	d106      	bne.n	8084ef4 <strncmp+0x22>
 8084ee6:	43ec      	mvns	r4, r5
 8084ee8:	4414      	add	r4, r2
 8084eea:	42e0      	cmn	r0, r4
 8084eec:	d001      	beq.n	8084ef2 <strncmp+0x20>
 8084eee:	2b00      	cmp	r3, #0
 8084ef0:	d1f3      	bne.n	8084eda <strncmp+0x8>
 8084ef2:	461c      	mov	r4, r3
 8084ef4:	1b18      	subs	r0, r3, r4
 8084ef6:	bd30      	pop	{r4, r5, pc}
 8084ef8:	4610      	mov	r0, r2
 8084efa:	bd30      	pop	{r4, r5, pc}

08084efc <strncpy>:
 8084efc:	4603      	mov	r3, r0
 8084efe:	b510      	push	{r4, lr}
 8084f00:	b142      	cbz	r2, 8084f14 <strncpy+0x18>
 8084f02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8084f06:	3a01      	subs	r2, #1
 8084f08:	f803 4b01 	strb.w	r4, [r3], #1
 8084f0c:	2c00      	cmp	r4, #0
 8084f0e:	d1f7      	bne.n	8084f00 <strncpy+0x4>
 8084f10:	441a      	add	r2, r3
 8084f12:	e000      	b.n	8084f16 <strncpy+0x1a>
 8084f14:	bd10      	pop	{r4, pc}
 8084f16:	4293      	cmp	r3, r2
 8084f18:	d002      	beq.n	8084f20 <strncpy+0x24>
 8084f1a:	f803 4b01 	strb.w	r4, [r3], #1
 8084f1e:	e7fa      	b.n	8084f16 <strncpy+0x1a>
 8084f20:	bd10      	pop	{r4, pc}
	...

08084f24 <_strtol_r>:
 8084f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8084f28:	460f      	mov	r7, r1
 8084f2a:	4680      	mov	r8, r0
 8084f2c:	483f      	ldr	r0, [pc, #252]	; (808502c <_strtol_r+0x108>)
 8084f2e:	f8d0 9000 	ldr.w	r9, [r0]
 8084f32:	463d      	mov	r5, r7
 8084f34:	f815 4b01 	ldrb.w	r4, [r5], #1
 8084f38:	eb09 0004 	add.w	r0, r9, r4
 8084f3c:	7840      	ldrb	r0, [r0, #1]
 8084f3e:	f000 0008 	and.w	r0, r0, #8
 8084f42:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 8084f46:	b108      	cbz	r0, 8084f4c <_strtol_r+0x28>
 8084f48:	462f      	mov	r7, r5
 8084f4a:	e7f2      	b.n	8084f32 <_strtol_r+0xe>
 8084f4c:	2c2d      	cmp	r4, #45	; 0x2d
 8084f4e:	d103      	bne.n	8084f58 <_strtol_r+0x34>
 8084f50:	1cbd      	adds	r5, r7, #2
 8084f52:	787c      	ldrb	r4, [r7, #1]
 8084f54:	2601      	movs	r6, #1
 8084f56:	e003      	b.n	8084f60 <_strtol_r+0x3c>
 8084f58:	2c2b      	cmp	r4, #43	; 0x2b
 8084f5a:	bf04      	itt	eq
 8084f5c:	787c      	ldrbeq	r4, [r7, #1]
 8084f5e:	1cbd      	addeq	r5, r7, #2
 8084f60:	b113      	cbz	r3, 8084f68 <_strtol_r+0x44>
 8084f62:	2b10      	cmp	r3, #16
 8084f64:	d10a      	bne.n	8084f7c <_strtol_r+0x58>
 8084f66:	e05b      	b.n	8085020 <_strtol_r+0xfc>
 8084f68:	2c30      	cmp	r4, #48	; 0x30
 8084f6a:	d157      	bne.n	808501c <_strtol_r+0xf8>
 8084f6c:	7828      	ldrb	r0, [r5, #0]
 8084f6e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8084f72:	2858      	cmp	r0, #88	; 0x58
 8084f74:	d14d      	bne.n	8085012 <_strtol_r+0xee>
 8084f76:	786c      	ldrb	r4, [r5, #1]
 8084f78:	2310      	movs	r3, #16
 8084f7a:	3502      	adds	r5, #2
 8084f7c:	2e00      	cmp	r6, #0
 8084f7e:	bf14      	ite	ne
 8084f80:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 8084f84:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 8084f88:	fbbc faf3 	udiv	sl, ip, r3
 8084f8c:	2700      	movs	r7, #0
 8084f8e:	4638      	mov	r0, r7
 8084f90:	fb03 cc1a 	mls	ip, r3, sl, ip
 8084f94:	eb09 0e04 	add.w	lr, r9, r4
 8084f98:	f89e e001 	ldrb.w	lr, [lr, #1]
 8084f9c:	f01e 0f04 	tst.w	lr, #4
 8084fa0:	d001      	beq.n	8084fa6 <_strtol_r+0x82>
 8084fa2:	3c30      	subs	r4, #48	; 0x30
 8084fa4:	e00b      	b.n	8084fbe <_strtol_r+0x9a>
 8084fa6:	f01e 0e03 	ands.w	lr, lr, #3
 8084faa:	d01b      	beq.n	8084fe4 <_strtol_r+0xc0>
 8084fac:	f1be 0f01 	cmp.w	lr, #1
 8084fb0:	bf0c      	ite	eq
 8084fb2:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8084fb6:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8084fba:	ebce 0404 	rsb	r4, lr, r4
 8084fbe:	42a3      	cmp	r3, r4
 8084fc0:	dd10      	ble.n	8084fe4 <_strtol_r+0xc0>
 8084fc2:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8084fc6:	d00a      	beq.n	8084fde <_strtol_r+0xba>
 8084fc8:	4550      	cmp	r0, sl
 8084fca:	d806      	bhi.n	8084fda <_strtol_r+0xb6>
 8084fcc:	d101      	bne.n	8084fd2 <_strtol_r+0xae>
 8084fce:	4564      	cmp	r4, ip
 8084fd0:	dc03      	bgt.n	8084fda <_strtol_r+0xb6>
 8084fd2:	fb03 4000 	mla	r0, r3, r0, r4
 8084fd6:	2701      	movs	r7, #1
 8084fd8:	e001      	b.n	8084fde <_strtol_r+0xba>
 8084fda:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8084fde:	f815 4b01 	ldrb.w	r4, [r5], #1
 8084fe2:	e7d7      	b.n	8084f94 <_strtol_r+0x70>
 8084fe4:	1c7b      	adds	r3, r7, #1
 8084fe6:	d10c      	bne.n	8085002 <_strtol_r+0xde>
 8084fe8:	2e00      	cmp	r6, #0
 8084fea:	f04f 0322 	mov.w	r3, #34	; 0x22
 8084fee:	bf14      	ite	ne
 8084ff0:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8084ff4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8084ff8:	f8c8 3000 	str.w	r3, [r8]
 8084ffc:	b92a      	cbnz	r2, 808500a <_strtol_r+0xe6>
 8084ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8085002:	b106      	cbz	r6, 8085006 <_strtol_r+0xe2>
 8085004:	4240      	negs	r0, r0
 8085006:	b172      	cbz	r2, 8085026 <_strtol_r+0x102>
 8085008:	b107      	cbz	r7, 808500c <_strtol_r+0xe8>
 808500a:	1e69      	subs	r1, r5, #1
 808500c:	6011      	str	r1, [r2, #0]
 808500e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8085012:	2430      	movs	r4, #48	; 0x30
 8085014:	2b00      	cmp	r3, #0
 8085016:	d1b1      	bne.n	8084f7c <_strtol_r+0x58>
 8085018:	2308      	movs	r3, #8
 808501a:	e7af      	b.n	8084f7c <_strtol_r+0x58>
 808501c:	230a      	movs	r3, #10
 808501e:	e7ad      	b.n	8084f7c <_strtol_r+0x58>
 8085020:	2c30      	cmp	r4, #48	; 0x30
 8085022:	d0a3      	beq.n	8084f6c <_strtol_r+0x48>
 8085024:	e7aa      	b.n	8084f7c <_strtol_r+0x58>
 8085026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808502a:	bf00      	nop
 808502c:	20000434 	.word	0x20000434

08085030 <strtol>:
 8085030:	4613      	mov	r3, r2
 8085032:	460a      	mov	r2, r1
 8085034:	4601      	mov	r1, r0
 8085036:	4802      	ldr	r0, [pc, #8]	; (8085040 <strtol+0x10>)
 8085038:	6800      	ldr	r0, [r0, #0]
 808503a:	f7ff bf73 	b.w	8084f24 <_strtol_r>
 808503e:	bf00      	nop
 8085040:	20000498 	.word	0x20000498

08085044 <_strtoul_r>:
 8085044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8085048:	460e      	mov	r6, r1
 808504a:	4680      	mov	r8, r0
 808504c:	483b      	ldr	r0, [pc, #236]	; (808513c <_strtoul_r+0xf8>)
 808504e:	f8d0 9000 	ldr.w	r9, [r0]
 8085052:	4635      	mov	r5, r6
 8085054:	f815 4b01 	ldrb.w	r4, [r5], #1
 8085058:	eb09 0004 	add.w	r0, r9, r4
 808505c:	7840      	ldrb	r0, [r0, #1]
 808505e:	f000 0008 	and.w	r0, r0, #8
 8085062:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 8085066:	b108      	cbz	r0, 808506c <_strtoul_r+0x28>
 8085068:	462e      	mov	r6, r5
 808506a:	e7f2      	b.n	8085052 <_strtoul_r+0xe>
 808506c:	2c2d      	cmp	r4, #45	; 0x2d
 808506e:	d103      	bne.n	8085078 <_strtoul_r+0x34>
 8085070:	1cb5      	adds	r5, r6, #2
 8085072:	7874      	ldrb	r4, [r6, #1]
 8085074:	2701      	movs	r7, #1
 8085076:	e003      	b.n	8085080 <_strtoul_r+0x3c>
 8085078:	2c2b      	cmp	r4, #43	; 0x2b
 808507a:	bf04      	itt	eq
 808507c:	7874      	ldrbeq	r4, [r6, #1]
 808507e:	1cb5      	addeq	r5, r6, #2
 8085080:	b113      	cbz	r3, 8085088 <_strtoul_r+0x44>
 8085082:	2b10      	cmp	r3, #16
 8085084:	d10a      	bne.n	808509c <_strtoul_r+0x58>
 8085086:	e053      	b.n	8085130 <_strtoul_r+0xec>
 8085088:	2c30      	cmp	r4, #48	; 0x30
 808508a:	d14f      	bne.n	808512c <_strtoul_r+0xe8>
 808508c:	7828      	ldrb	r0, [r5, #0]
 808508e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8085092:	2858      	cmp	r0, #88	; 0x58
 8085094:	d145      	bne.n	8085122 <_strtoul_r+0xde>
 8085096:	786c      	ldrb	r4, [r5, #1]
 8085098:	2310      	movs	r3, #16
 808509a:	3502      	adds	r5, #2
 808509c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80850a0:	fbbc fcf3 	udiv	ip, ip, r3
 80850a4:	fb03 fa0c 	mul.w	sl, r3, ip
 80850a8:	2600      	movs	r6, #0
 80850aa:	ea6f 0a0a 	mvn.w	sl, sl
 80850ae:	4630      	mov	r0, r6
 80850b0:	eb09 0e04 	add.w	lr, r9, r4
 80850b4:	f89e e001 	ldrb.w	lr, [lr, #1]
 80850b8:	f01e 0f04 	tst.w	lr, #4
 80850bc:	d001      	beq.n	80850c2 <_strtoul_r+0x7e>
 80850be:	3c30      	subs	r4, #48	; 0x30
 80850c0:	e00b      	b.n	80850da <_strtoul_r+0x96>
 80850c2:	f01e 0e03 	ands.w	lr, lr, #3
 80850c6:	d01a      	beq.n	80850fe <_strtoul_r+0xba>
 80850c8:	f1be 0f01 	cmp.w	lr, #1
 80850cc:	bf0c      	ite	eq
 80850ce:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80850d2:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80850d6:	ebce 0404 	rsb	r4, lr, r4
 80850da:	42a3      	cmp	r3, r4
 80850dc:	dd0f      	ble.n	80850fe <_strtoul_r+0xba>
 80850de:	2e00      	cmp	r6, #0
 80850e0:	db08      	blt.n	80850f4 <_strtoul_r+0xb0>
 80850e2:	4560      	cmp	r0, ip
 80850e4:	d806      	bhi.n	80850f4 <_strtoul_r+0xb0>
 80850e6:	d101      	bne.n	80850ec <_strtoul_r+0xa8>
 80850e8:	4554      	cmp	r4, sl
 80850ea:	dc03      	bgt.n	80850f4 <_strtoul_r+0xb0>
 80850ec:	fb03 4000 	mla	r0, r3, r0, r4
 80850f0:	2601      	movs	r6, #1
 80850f2:	e001      	b.n	80850f8 <_strtoul_r+0xb4>
 80850f4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80850f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80850fc:	e7d8      	b.n	80850b0 <_strtoul_r+0x6c>
 80850fe:	2e00      	cmp	r6, #0
 8085100:	da07      	bge.n	8085112 <_strtoul_r+0xce>
 8085102:	2322      	movs	r3, #34	; 0x22
 8085104:	f8c8 3000 	str.w	r3, [r8]
 8085108:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 808510c:	b92a      	cbnz	r2, 808511a <_strtoul_r+0xd6>
 808510e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8085112:	b107      	cbz	r7, 8085116 <_strtoul_r+0xd2>
 8085114:	4240      	negs	r0, r0
 8085116:	b172      	cbz	r2, 8085136 <_strtoul_r+0xf2>
 8085118:	b106      	cbz	r6, 808511c <_strtoul_r+0xd8>
 808511a:	1e69      	subs	r1, r5, #1
 808511c:	6011      	str	r1, [r2, #0]
 808511e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8085122:	2430      	movs	r4, #48	; 0x30
 8085124:	2b00      	cmp	r3, #0
 8085126:	d1b9      	bne.n	808509c <_strtoul_r+0x58>
 8085128:	2308      	movs	r3, #8
 808512a:	e7b7      	b.n	808509c <_strtoul_r+0x58>
 808512c:	230a      	movs	r3, #10
 808512e:	e7b5      	b.n	808509c <_strtoul_r+0x58>
 8085130:	2c30      	cmp	r4, #48	; 0x30
 8085132:	d0ab      	beq.n	808508c <_strtoul_r+0x48>
 8085134:	e7b2      	b.n	808509c <_strtoul_r+0x58>
 8085136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808513a:	bf00      	nop
 808513c:	20000434 	.word	0x20000434

08085140 <strtoul>:
 8085140:	4613      	mov	r3, r2
 8085142:	460a      	mov	r2, r1
 8085144:	4601      	mov	r1, r0
 8085146:	4802      	ldr	r0, [pc, #8]	; (8085150 <strtoul+0x10>)
 8085148:	6800      	ldr	r0, [r0, #0]
 808514a:	f7ff bf7b 	b.w	8085044 <_strtoul_r>
 808514e:	bf00      	nop
 8085150:	20000498 	.word	0x20000498

08085154 <__tzcalc_limits>:
 8085154:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085158:	4604      	mov	r4, r0
 808515a:	f000 fa6f 	bl	808563c <__gettzinfo>
 808515e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8085162:	429c      	cmp	r4, r3
 8085164:	f340 8096 	ble.w	8085294 <__tzcalc_limits+0x140>
 8085168:	f240 156d 	movw	r5, #365	; 0x16d
 808516c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8085170:	18e3      	adds	r3, r4, r3
 8085172:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 8085176:	109b      	asrs	r3, r3, #2
 8085178:	fb05 3502 	mla	r5, r5, r2, r3
 808517c:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 8085180:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8085184:	fb92 f3f3 	sdiv	r3, r2, r3
 8085188:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 808518c:	442b      	add	r3, r5
 808518e:	18a5      	adds	r5, r4, r2
 8085190:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8085194:	fb94 f7f2 	sdiv	r7, r4, r2
 8085198:	fb95 f5f2 	sdiv	r5, r5, r2
 808519c:	fb02 4717 	mls	r7, r2, r7, r4
 80851a0:	441d      	add	r5, r3
 80851a2:	2364      	movs	r3, #100	; 0x64
 80851a4:	fb94 f6f3 	sdiv	r6, r4, r3
 80851a8:	fab7 fe87 	clz	lr, r7
 80851ac:	4601      	mov	r1, r0
 80851ae:	fb03 4616 	mls	r6, r3, r6, r4
 80851b2:	f100 0338 	add.w	r3, r0, #56	; 0x38
 80851b6:	9301      	str	r3, [sp, #4]
 80851b8:	f004 0303 	and.w	r3, r4, #3
 80851bc:	6044      	str	r4, [r0, #4]
 80851be:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80851c2:	9300      	str	r3, [sp, #0]
 80851c4:	f04f 0c07 	mov.w	ip, #7
 80851c8:	7a0b      	ldrb	r3, [r1, #8]
 80851ca:	2b4a      	cmp	r3, #74	; 0x4a
 80851cc:	d10e      	bne.n	80851ec <__tzcalc_limits+0x98>
 80851ce:	694b      	ldr	r3, [r1, #20]
 80851d0:	9a00      	ldr	r2, [sp, #0]
 80851d2:	18ec      	adds	r4, r5, r3
 80851d4:	b902      	cbnz	r2, 80851d8 <__tzcalc_limits+0x84>
 80851d6:	b906      	cbnz	r6, 80851da <__tzcalc_limits+0x86>
 80851d8:	b927      	cbnz	r7, 80851e4 <__tzcalc_limits+0x90>
 80851da:	2b3b      	cmp	r3, #59	; 0x3b
 80851dc:	bfd4      	ite	le
 80851de:	2300      	movle	r3, #0
 80851e0:	2301      	movgt	r3, #1
 80851e2:	e000      	b.n	80851e6 <__tzcalc_limits+0x92>
 80851e4:	2300      	movs	r3, #0
 80851e6:	4423      	add	r3, r4
 80851e8:	3b01      	subs	r3, #1
 80851ea:	e03f      	b.n	808526c <__tzcalc_limits+0x118>
 80851ec:	2b44      	cmp	r3, #68	; 0x44
 80851ee:	d102      	bne.n	80851f6 <__tzcalc_limits+0xa2>
 80851f0:	694b      	ldr	r3, [r1, #20]
 80851f2:	442b      	add	r3, r5
 80851f4:	e03a      	b.n	808526c <__tzcalc_limits+0x118>
 80851f6:	9b00      	ldr	r3, [sp, #0]
 80851f8:	b92b      	cbnz	r3, 8085206 <__tzcalc_limits+0xb2>
 80851fa:	2e00      	cmp	r6, #0
 80851fc:	bf0c      	ite	eq
 80851fe:	46f0      	moveq	r8, lr
 8085200:	f04f 0801 	movne.w	r8, #1
 8085204:	e000      	b.n	8085208 <__tzcalc_limits+0xb4>
 8085206:	46f0      	mov	r8, lr
 8085208:	46a9      	mov	r9, r5
 808520a:	4b24      	ldr	r3, [pc, #144]	; (808529c <__tzcalc_limits+0x148>)
 808520c:	2230      	movs	r2, #48	; 0x30
 808520e:	fb02 3808 	mla	r8, r2, r8, r3
 8085212:	68cc      	ldr	r4, [r1, #12]
 8085214:	f1a8 0a04 	sub.w	sl, r8, #4
 8085218:	2301      	movs	r3, #1
 808521a:	42a3      	cmp	r3, r4
 808521c:	da04      	bge.n	8085228 <__tzcalc_limits+0xd4>
 808521e:	f85a bf04 	ldr.w	fp, [sl, #4]!
 8085222:	3301      	adds	r3, #1
 8085224:	44d9      	add	r9, fp
 8085226:	e7f8      	b.n	808521a <__tzcalc_limits+0xc6>
 8085228:	f109 0304 	add.w	r3, r9, #4
 808522c:	fb93 fbfc 	sdiv	fp, r3, ip
 8085230:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 8085234:	ebca 0a03 	rsb	sl, sl, r3
 8085238:	694b      	ldr	r3, [r1, #20]
 808523a:	2c01      	cmp	r4, #1
 808523c:	bfb8      	it	lt
 808523e:	2401      	movlt	r4, #1
 8085240:	ebb3 0a0a 	subs.w	sl, r3, sl
 8085244:	690b      	ldr	r3, [r1, #16]
 8085246:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 808524a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 808524e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8085252:	bf48      	it	mi
 8085254:	f10a 0a07 	addmi.w	sl, sl, #7
 8085258:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 808525c:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8085260:	4453      	add	r3, sl
 8085262:	42a3      	cmp	r3, r4
 8085264:	db01      	blt.n	808526a <__tzcalc_limits+0x116>
 8085266:	3b07      	subs	r3, #7
 8085268:	e7fb      	b.n	8085262 <__tzcalc_limits+0x10e>
 808526a:	444b      	add	r3, r9
 808526c:	698c      	ldr	r4, [r1, #24]
 808526e:	4a0c      	ldr	r2, [pc, #48]	; (80852a0 <__tzcalc_limits+0x14c>)
 8085270:	fb02 4303 	mla	r3, r2, r3, r4
 8085274:	6a0c      	ldr	r4, [r1, #32]
 8085276:	4423      	add	r3, r4
 8085278:	f841 3f1c 	str.w	r3, [r1, #28]!
 808527c:	9b01      	ldr	r3, [sp, #4]
 808527e:	4299      	cmp	r1, r3
 8085280:	d1a2      	bne.n	80851c8 <__tzcalc_limits+0x74>
 8085282:	69c3      	ldr	r3, [r0, #28]
 8085284:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8085286:	4293      	cmp	r3, r2
 8085288:	bfac      	ite	ge
 808528a:	2300      	movge	r3, #0
 808528c:	2301      	movlt	r3, #1
 808528e:	6003      	str	r3, [r0, #0]
 8085290:	2001      	movs	r0, #1
 8085292:	e000      	b.n	8085296 <__tzcalc_limits+0x142>
 8085294:	2000      	movs	r0, #0
 8085296:	b003      	add	sp, #12
 8085298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808529c:	08086034 	.word	0x08086034
 80852a0:	00015180 	.word	0x00015180

080852a4 <__tz_lock>:
 80852a4:	4770      	bx	lr

080852a6 <__tz_unlock>:
 80852a6:	4770      	bx	lr

080852a8 <_tzset_unlocked>:
 80852a8:	4b01      	ldr	r3, [pc, #4]	; (80852b0 <_tzset_unlocked+0x8>)
 80852aa:	6818      	ldr	r0, [r3, #0]
 80852ac:	f000 b802 	b.w	80852b4 <_tzset_unlocked_r>
 80852b0:	20000498 	.word	0x20000498

080852b4 <_tzset_unlocked_r>:
 80852b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80852b8:	b08d      	sub	sp, #52	; 0x34
 80852ba:	4607      	mov	r7, r0
 80852bc:	f000 f9be 	bl	808563c <__gettzinfo>
 80852c0:	49b0      	ldr	r1, [pc, #704]	; (8085584 <_tzset_unlocked_r+0x2d0>)
 80852c2:	4604      	mov	r4, r0
 80852c4:	4638      	mov	r0, r7
 80852c6:	f000 f9b1 	bl	808562c <_getenv_r>
 80852ca:	4eaf      	ldr	r6, [pc, #700]	; (8085588 <_tzset_unlocked_r+0x2d4>)
 80852cc:	4605      	mov	r5, r0
 80852ce:	b960      	cbnz	r0, 80852ea <_tzset_unlocked_r+0x36>
 80852d0:	4bae      	ldr	r3, [pc, #696]	; (808558c <_tzset_unlocked_r+0x2d8>)
 80852d2:	4aaf      	ldr	r2, [pc, #700]	; (8085590 <_tzset_unlocked_r+0x2dc>)
 80852d4:	6018      	str	r0, [r3, #0]
 80852d6:	4baf      	ldr	r3, [pc, #700]	; (8085594 <_tzset_unlocked_r+0x2e0>)
 80852d8:	6018      	str	r0, [r3, #0]
 80852da:	4baf      	ldr	r3, [pc, #700]	; (8085598 <_tzset_unlocked_r+0x2e4>)
 80852dc:	6830      	ldr	r0, [r6, #0]
 80852de:	601a      	str	r2, [r3, #0]
 80852e0:	605a      	str	r2, [r3, #4]
 80852e2:	f7fc fe2d 	bl	8081f40 <free>
 80852e6:	6035      	str	r5, [r6, #0]
 80852e8:	e148      	b.n	808557c <_tzset_unlocked_r+0x2c8>
 80852ea:	6831      	ldr	r1, [r6, #0]
 80852ec:	b979      	cbnz	r1, 808530e <_tzset_unlocked_r+0x5a>
 80852ee:	6830      	ldr	r0, [r6, #0]
 80852f0:	f7fc fe26 	bl	8081f40 <free>
 80852f4:	4628      	mov	r0, r5
 80852f6:	f7ff fde4 	bl	8084ec2 <strlen>
 80852fa:	1c41      	adds	r1, r0, #1
 80852fc:	4638      	mov	r0, r7
 80852fe:	f7fc fe4f 	bl	8081fa0 <_malloc_r>
 8085302:	6030      	str	r0, [r6, #0]
 8085304:	b148      	cbz	r0, 808531a <_tzset_unlocked_r+0x66>
 8085306:	4629      	mov	r1, r5
 8085308:	f7ff fdb8 	bl	8084e7c <strcpy>
 808530c:	e005      	b.n	808531a <_tzset_unlocked_r+0x66>
 808530e:	f7ff fdab 	bl	8084e68 <strcmp>
 8085312:	2800      	cmp	r0, #0
 8085314:	f000 8132 	beq.w	808557c <_tzset_unlocked_r+0x2c8>
 8085318:	e7e9      	b.n	80852ee <_tzset_unlocked_r+0x3a>
 808531a:	782b      	ldrb	r3, [r5, #0]
 808531c:	ae0a      	add	r6, sp, #40	; 0x28
 808531e:	2b3a      	cmp	r3, #58	; 0x3a
 8085320:	bf08      	it	eq
 8085322:	3501      	addeq	r5, #1
 8085324:	4633      	mov	r3, r6
 8085326:	4a9d      	ldr	r2, [pc, #628]	; (808559c <_tzset_unlocked_r+0x2e8>)
 8085328:	499d      	ldr	r1, [pc, #628]	; (80855a0 <_tzset_unlocked_r+0x2ec>)
 808532a:	4628      	mov	r0, r5
 808532c:	f7fc fe20 	bl	8081f70 <siscanf>
 8085330:	2800      	cmp	r0, #0
 8085332:	f340 8123 	ble.w	808557c <_tzset_unlocked_r+0x2c8>
 8085336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8085338:	18ef      	adds	r7, r5, r3
 808533a:	5ceb      	ldrb	r3, [r5, r3]
 808533c:	2b2d      	cmp	r3, #45	; 0x2d
 808533e:	d103      	bne.n	8085348 <_tzset_unlocked_r+0x94>
 8085340:	3701      	adds	r7, #1
 8085342:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8085346:	e003      	b.n	8085350 <_tzset_unlocked_r+0x9c>
 8085348:	2b2b      	cmp	r3, #43	; 0x2b
 808534a:	bf08      	it	eq
 808534c:	3701      	addeq	r7, #1
 808534e:	2501      	movs	r5, #1
 8085350:	f10d 0a20 	add.w	sl, sp, #32
 8085354:	f10d 0b1e 	add.w	fp, sp, #30
 8085358:	f04f 0800 	mov.w	r8, #0
 808535c:	9603      	str	r6, [sp, #12]
 808535e:	f8cd a008 	str.w	sl, [sp, #8]
 8085362:	9601      	str	r6, [sp, #4]
 8085364:	f8cd b000 	str.w	fp, [sp]
 8085368:	4633      	mov	r3, r6
 808536a:	aa07      	add	r2, sp, #28
 808536c:	498d      	ldr	r1, [pc, #564]	; (80855a4 <_tzset_unlocked_r+0x2f0>)
 808536e:	4638      	mov	r0, r7
 8085370:	f8ad 801e 	strh.w	r8, [sp, #30]
 8085374:	f8ad 8020 	strh.w	r8, [sp, #32]
 8085378:	f7fc fdfa 	bl	8081f70 <siscanf>
 808537c:	4540      	cmp	r0, r8
 808537e:	f340 80fd 	ble.w	808557c <_tzset_unlocked_r+0x2c8>
 8085382:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8085386:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808538a:	213c      	movs	r1, #60	; 0x3c
 808538c:	fb01 3302 	mla	r3, r1, r2, r3
 8085390:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8085394:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8085398:	fb01 3302 	mla	r3, r1, r2, r3
 808539c:	435d      	muls	r5, r3
 808539e:	4b7f      	ldr	r3, [pc, #508]	; (808559c <_tzset_unlocked_r+0x2e8>)
 80853a0:	6225      	str	r5, [r4, #32]
 80853a2:	4d7d      	ldr	r5, [pc, #500]	; (8085598 <_tzset_unlocked_r+0x2e4>)
 80853a4:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80855b0 <_tzset_unlocked_r+0x2fc>
 80853a8:	602b      	str	r3, [r5, #0]
 80853aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80853ac:	464a      	mov	r2, r9
 80853ae:	441f      	add	r7, r3
 80853b0:	497b      	ldr	r1, [pc, #492]	; (80855a0 <_tzset_unlocked_r+0x2ec>)
 80853b2:	4633      	mov	r3, r6
 80853b4:	4638      	mov	r0, r7
 80853b6:	f7fc fddb 	bl	8081f70 <siscanf>
 80853ba:	4540      	cmp	r0, r8
 80853bc:	dc08      	bgt.n	80853d0 <_tzset_unlocked_r+0x11c>
 80853be:	682b      	ldr	r3, [r5, #0]
 80853c0:	6a22      	ldr	r2, [r4, #32]
 80853c2:	606b      	str	r3, [r5, #4]
 80853c4:	4b71      	ldr	r3, [pc, #452]	; (808558c <_tzset_unlocked_r+0x2d8>)
 80853c6:	601a      	str	r2, [r3, #0]
 80853c8:	4b72      	ldr	r3, [pc, #456]	; (8085594 <_tzset_unlocked_r+0x2e0>)
 80853ca:	f8c3 8000 	str.w	r8, [r3]
 80853ce:	e0d5      	b.n	808557c <_tzset_unlocked_r+0x2c8>
 80853d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80853d2:	f8c5 9004 	str.w	r9, [r5, #4]
 80853d6:	18fd      	adds	r5, r7, r3
 80853d8:	5cfb      	ldrb	r3, [r7, r3]
 80853da:	2b2d      	cmp	r3, #45	; 0x2d
 80853dc:	d103      	bne.n	80853e6 <_tzset_unlocked_r+0x132>
 80853de:	3501      	adds	r5, #1
 80853e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80853e4:	e003      	b.n	80853ee <_tzset_unlocked_r+0x13a>
 80853e6:	2b2b      	cmp	r3, #43	; 0x2b
 80853e8:	bf08      	it	eq
 80853ea:	3501      	addeq	r5, #1
 80853ec:	2701      	movs	r7, #1
 80853ee:	2300      	movs	r3, #0
 80853f0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80853f4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80853f8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80853fc:	930a      	str	r3, [sp, #40]	; 0x28
 80853fe:	9603      	str	r6, [sp, #12]
 8085400:	f8cd a008 	str.w	sl, [sp, #8]
 8085404:	9601      	str	r6, [sp, #4]
 8085406:	f8cd b000 	str.w	fp, [sp]
 808540a:	4633      	mov	r3, r6
 808540c:	aa07      	add	r2, sp, #28
 808540e:	4965      	ldr	r1, [pc, #404]	; (80855a4 <_tzset_unlocked_r+0x2f0>)
 8085410:	4628      	mov	r0, r5
 8085412:	f7fc fdad 	bl	8081f70 <siscanf>
 8085416:	2800      	cmp	r0, #0
 8085418:	dc04      	bgt.n	8085424 <_tzset_unlocked_r+0x170>
 808541a:	6a23      	ldr	r3, [r4, #32]
 808541c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8085420:	63e3      	str	r3, [r4, #60]	; 0x3c
 8085422:	e00e      	b.n	8085442 <_tzset_unlocked_r+0x18e>
 8085424:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8085428:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808542c:	213c      	movs	r1, #60	; 0x3c
 808542e:	fb01 3302 	mla	r3, r1, r2, r3
 8085432:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8085436:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808543a:	fb01 3302 	mla	r3, r1, r2, r3
 808543e:	435f      	muls	r7, r3
 8085440:	63e7      	str	r7, [r4, #60]	; 0x3c
 8085442:	4627      	mov	r7, r4
 8085444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8085446:	f04f 0900 	mov.w	r9, #0
 808544a:	441d      	add	r5, r3
 808544c:	782b      	ldrb	r3, [r5, #0]
 808544e:	2b2c      	cmp	r3, #44	; 0x2c
 8085450:	bf08      	it	eq
 8085452:	3501      	addeq	r5, #1
 8085454:	f895 8000 	ldrb.w	r8, [r5]
 8085458:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 808545c:	d126      	bne.n	80854ac <_tzset_unlocked_r+0x1f8>
 808545e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8085462:	9302      	str	r3, [sp, #8]
 8085464:	ab09      	add	r3, sp, #36	; 0x24
 8085466:	9300      	str	r3, [sp, #0]
 8085468:	9603      	str	r6, [sp, #12]
 808546a:	9601      	str	r6, [sp, #4]
 808546c:	4633      	mov	r3, r6
 808546e:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8085472:	494d      	ldr	r1, [pc, #308]	; (80855a8 <_tzset_unlocked_r+0x2f4>)
 8085474:	4628      	mov	r0, r5
 8085476:	f7fc fd7b 	bl	8081f70 <siscanf>
 808547a:	2803      	cmp	r0, #3
 808547c:	d17e      	bne.n	808557c <_tzset_unlocked_r+0x2c8>
 808547e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8085482:	1e4b      	subs	r3, r1, #1
 8085484:	2b0b      	cmp	r3, #11
 8085486:	d879      	bhi.n	808557c <_tzset_unlocked_r+0x2c8>
 8085488:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 808548c:	1e53      	subs	r3, r2, #1
 808548e:	2b04      	cmp	r3, #4
 8085490:	d874      	bhi.n	808557c <_tzset_unlocked_r+0x2c8>
 8085492:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8085496:	2b06      	cmp	r3, #6
 8085498:	d870      	bhi.n	808557c <_tzset_unlocked_r+0x2c8>
 808549a:	f887 8008 	strb.w	r8, [r7, #8]
 808549e:	60f9      	str	r1, [r7, #12]
 80854a0:	613a      	str	r2, [r7, #16]
 80854a2:	617b      	str	r3, [r7, #20]
 80854a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80854a6:	eb05 0803 	add.w	r8, r5, r3
 80854aa:	e02a      	b.n	8085502 <_tzset_unlocked_r+0x24e>
 80854ac:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80854b0:	bf06      	itte	eq
 80854b2:	4643      	moveq	r3, r8
 80854b4:	3501      	addeq	r5, #1
 80854b6:	2344      	movne	r3, #68	; 0x44
 80854b8:	220a      	movs	r2, #10
 80854ba:	a90b      	add	r1, sp, #44	; 0x2c
 80854bc:	4628      	mov	r0, r5
 80854be:	9305      	str	r3, [sp, #20]
 80854c0:	f7ff fe3e 	bl	8085140 <strtoul>
 80854c4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80854c8:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80854cc:	4545      	cmp	r5, r8
 80854ce:	9b05      	ldr	r3, [sp, #20]
 80854d0:	d114      	bne.n	80854fc <_tzset_unlocked_r+0x248>
 80854d2:	234d      	movs	r3, #77	; 0x4d
 80854d4:	f1b9 0f00 	cmp.w	r9, #0
 80854d8:	d107      	bne.n	80854ea <_tzset_unlocked_r+0x236>
 80854da:	7223      	strb	r3, [r4, #8]
 80854dc:	2303      	movs	r3, #3
 80854de:	60e3      	str	r3, [r4, #12]
 80854e0:	2302      	movs	r3, #2
 80854e2:	6123      	str	r3, [r4, #16]
 80854e4:	f8c4 9014 	str.w	r9, [r4, #20]
 80854e8:	e00b      	b.n	8085502 <_tzset_unlocked_r+0x24e>
 80854ea:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80854ee:	230b      	movs	r3, #11
 80854f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80854f2:	2301      	movs	r3, #1
 80854f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80854f6:	2300      	movs	r3, #0
 80854f8:	6323      	str	r3, [r4, #48]	; 0x30
 80854fa:	e002      	b.n	8085502 <_tzset_unlocked_r+0x24e>
 80854fc:	b280      	uxth	r0, r0
 80854fe:	723b      	strb	r3, [r7, #8]
 8085500:	6178      	str	r0, [r7, #20]
 8085502:	2302      	movs	r3, #2
 8085504:	f8ad 301c 	strh.w	r3, [sp, #28]
 8085508:	2300      	movs	r3, #0
 808550a:	f8ad 301e 	strh.w	r3, [sp, #30]
 808550e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8085512:	930a      	str	r3, [sp, #40]	; 0x28
 8085514:	f898 3000 	ldrb.w	r3, [r8]
 8085518:	2b2f      	cmp	r3, #47	; 0x2f
 808551a:	d10b      	bne.n	8085534 <_tzset_unlocked_r+0x280>
 808551c:	9603      	str	r6, [sp, #12]
 808551e:	f8cd a008 	str.w	sl, [sp, #8]
 8085522:	9601      	str	r6, [sp, #4]
 8085524:	f8cd b000 	str.w	fp, [sp]
 8085528:	4633      	mov	r3, r6
 808552a:	aa07      	add	r2, sp, #28
 808552c:	491f      	ldr	r1, [pc, #124]	; (80855ac <_tzset_unlocked_r+0x2f8>)
 808552e:	4640      	mov	r0, r8
 8085530:	f7fc fd1e 	bl	8081f70 <siscanf>
 8085534:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8085538:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808553c:	213c      	movs	r1, #60	; 0x3c
 808553e:	fb01 3302 	mla	r3, r1, r2, r3
 8085542:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8085546:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808554a:	fb01 3302 	mla	r3, r1, r2, r3
 808554e:	61bb      	str	r3, [r7, #24]
 8085550:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8085552:	f109 0901 	add.w	r9, r9, #1
 8085556:	f1b9 0f02 	cmp.w	r9, #2
 808555a:	4445      	add	r5, r8
 808555c:	f107 071c 	add.w	r7, r7, #28
 8085560:	f47f af74 	bne.w	808544c <_tzset_unlocked_r+0x198>
 8085564:	6860      	ldr	r0, [r4, #4]
 8085566:	f7ff fdf5 	bl	8085154 <__tzcalc_limits>
 808556a:	6a22      	ldr	r2, [r4, #32]
 808556c:	4b07      	ldr	r3, [pc, #28]	; (808558c <_tzset_unlocked_r+0x2d8>)
 808556e:	601a      	str	r2, [r3, #0]
 8085570:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8085572:	1a9b      	subs	r3, r3, r2
 8085574:	4a07      	ldr	r2, [pc, #28]	; (8085594 <_tzset_unlocked_r+0x2e0>)
 8085576:	bf18      	it	ne
 8085578:	2301      	movne	r3, #1
 808557a:	6013      	str	r3, [r2, #0]
 808557c:	b00d      	add	sp, #52	; 0x34
 808557e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085582:	bf00      	nop
 8085584:	08086094 	.word	0x08086094
 8085588:	20000ce0 	.word	0x20000ce0
 808558c:	20000ce8 	.word	0x20000ce8
 8085590:	08086097 	.word	0x08086097
 8085594:	20000ce4 	.word	0x20000ce4
 8085598:	2000049c 	.word	0x2000049c
 808559c:	20000cd3 	.word	0x20000cd3
 80855a0:	0808609b 	.word	0x0808609b
 80855a4:	080860be 	.word	0x080860be
 80855a8:	080860aa 	.word	0x080860aa
 80855ac:	080860bd 	.word	0x080860bd
 80855b0:	20000cc8 	.word	0x20000cc8

080855b4 <_findenv_r>:
 80855b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80855b8:	4607      	mov	r7, r0
 80855ba:	468b      	mov	fp, r1
 80855bc:	4690      	mov	r8, r2
 80855be:	f000 f8d7 	bl	8085770 <__env_lock>
 80855c2:	4b19      	ldr	r3, [pc, #100]	; (8085628 <_findenv_r+0x74>)
 80855c4:	681d      	ldr	r5, [r3, #0]
 80855c6:	469a      	mov	sl, r3
 80855c8:	b13d      	cbz	r5, 80855da <_findenv_r+0x26>
 80855ca:	465c      	mov	r4, fp
 80855cc:	4623      	mov	r3, r4
 80855ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80855d2:	b142      	cbz	r2, 80855e6 <_findenv_r+0x32>
 80855d4:	2a3d      	cmp	r2, #61	; 0x3d
 80855d6:	461c      	mov	r4, r3
 80855d8:	d1f8      	bne.n	80855cc <_findenv_r+0x18>
 80855da:	4638      	mov	r0, r7
 80855dc:	f000 f8c9 	bl	8085772 <__env_unlock>
 80855e0:	2000      	movs	r0, #0
 80855e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80855e6:	ebcb 0404 	rsb	r4, fp, r4
 80855ea:	46a9      	mov	r9, r5
 80855ec:	f859 0b04 	ldr.w	r0, [r9], #4
 80855f0:	2800      	cmp	r0, #0
 80855f2:	d0f2      	beq.n	80855da <_findenv_r+0x26>
 80855f4:	4622      	mov	r2, r4
 80855f6:	4659      	mov	r1, fp
 80855f8:	f7ff fc6b 	bl	8084ed2 <strncmp>
 80855fc:	b988      	cbnz	r0, 8085622 <_findenv_r+0x6e>
 80855fe:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8085602:	191e      	adds	r6, r3, r4
 8085604:	5d1b      	ldrb	r3, [r3, r4]
 8085606:	2b3d      	cmp	r3, #61	; 0x3d
 8085608:	d10b      	bne.n	8085622 <_findenv_r+0x6e>
 808560a:	f8da 3000 	ldr.w	r3, [sl]
 808560e:	4638      	mov	r0, r7
 8085610:	1aed      	subs	r5, r5, r3
 8085612:	10ad      	asrs	r5, r5, #2
 8085614:	f8c8 5000 	str.w	r5, [r8]
 8085618:	f000 f8ab 	bl	8085772 <__env_unlock>
 808561c:	1c70      	adds	r0, r6, #1
 808561e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085622:	464d      	mov	r5, r9
 8085624:	e7e1      	b.n	80855ea <_findenv_r+0x36>
 8085626:	bf00      	nop
 8085628:	200004e4 	.word	0x200004e4

0808562c <_getenv_r>:
 808562c:	b507      	push	{r0, r1, r2, lr}
 808562e:	aa01      	add	r2, sp, #4
 8085630:	f7ff ffc0 	bl	80855b4 <_findenv_r>
 8085634:	b003      	add	sp, #12
 8085636:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808563c <__gettzinfo>:
 808563c:	4800      	ldr	r0, [pc, #0]	; (8085640 <__gettzinfo+0x4>)
 808563e:	4770      	bx	lr
 8085640:	200004a4 	.word	0x200004a4

08085644 <gmtime_r>:
 8085644:	6802      	ldr	r2, [r0, #0]
 8085646:	4b46      	ldr	r3, [pc, #280]	; (8085760 <gmtime_r+0x11c>)
 8085648:	b5f0      	push	{r4, r5, r6, r7, lr}
 808564a:	fb92 f4f3 	sdiv	r4, r2, r3
 808564e:	fb03 2214 	mls	r2, r3, r4, r2
 8085652:	2a00      	cmp	r2, #0
 8085654:	bfbc      	itt	lt
 8085656:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 808565a:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 808565e:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8085662:	fb92 f3f0 	sdiv	r3, r2, r0
 8085666:	fb00 2213 	mls	r2, r0, r3, r2
 808566a:	f04f 003c 	mov.w	r0, #60	; 0x3c
 808566e:	608b      	str	r3, [r1, #8]
 8085670:	fb92 f3f0 	sdiv	r3, r2, r0
 8085674:	fb00 2213 	mls	r2, r0, r3, r2
 8085678:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 808567c:	bfac      	ite	ge
 808567e:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 8085682:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 8085686:	604b      	str	r3, [r1, #4]
 8085688:	600a      	str	r2, [r1, #0]
 808568a:	2307      	movs	r3, #7
 808568c:	1ce2      	adds	r2, r4, #3
 808568e:	fb92 f3f3 	sdiv	r3, r2, r3
 8085692:	4d34      	ldr	r5, [pc, #208]	; (8085764 <gmtime_r+0x120>)
 8085694:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8085698:	fb94 f5f5 	sdiv	r5, r4, r5
 808569c:	1ad3      	subs	r3, r2, r3
 808569e:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80856a2:	f240 57b4 	movw	r7, #1460	; 0x5b4
 80856a6:	618b      	str	r3, [r1, #24]
 80856a8:	4b2f      	ldr	r3, [pc, #188]	; (8085768 <gmtime_r+0x124>)
 80856aa:	4830      	ldr	r0, [pc, #192]	; (808576c <gmtime_r+0x128>)
 80856ac:	fb03 4405 	mla	r4, r3, r5, r4
 80856b0:	fbb4 f2f2 	udiv	r2, r4, r2
 80856b4:	fbb4 f3f7 	udiv	r3, r4, r7
 80856b8:	fbb4 f0f0 	udiv	r0, r4, r0
 80856bc:	4422      	add	r2, r4
 80856be:	1ad2      	subs	r2, r2, r3
 80856c0:	f648 6694 	movw	r6, #36500	; 0x8e94
 80856c4:	1a13      	subs	r3, r2, r0
 80856c6:	f240 126d 	movw	r2, #365	; 0x16d
 80856ca:	fbb3 f6f6 	udiv	r6, r3, r6
 80856ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80856d2:	fbb3 f3f7 	udiv	r3, r3, r7
 80856d6:	4434      	add	r4, r6
 80856d8:	1ae3      	subs	r3, r4, r3
 80856da:	fb02 3310 	mls	r3, r2, r0, r3
 80856de:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80856e2:	2499      	movs	r4, #153	; 0x99
 80856e4:	3202      	adds	r2, #2
 80856e6:	fbb2 f2f4 	udiv	r2, r2, r4
 80856ea:	4354      	muls	r4, r2
 80856ec:	1ca6      	adds	r6, r4, #2
 80856ee:	2405      	movs	r4, #5
 80856f0:	fbb6 f4f4 	udiv	r4, r6, r4
 80856f4:	2a0a      	cmp	r2, #10
 80856f6:	bf34      	ite	cc
 80856f8:	2602      	movcc	r6, #2
 80856fa:	f06f 0609 	mvncs.w	r6, #9
 80856fe:	4416      	add	r6, r2
 8085700:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8085704:	fb02 0505 	mla	r5, r2, r5, r0
 8085708:	1c5f      	adds	r7, r3, #1
 808570a:	2e01      	cmp	r6, #1
 808570c:	bf98      	it	ls
 808570e:	3501      	addls	r5, #1
 8085710:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8085714:	eba7 0704 	sub.w	r7, r7, r4
 8085718:	d302      	bcc.n	8085720 <gmtime_r+0xdc>
 808571a:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 808571e:	e014      	b.n	808574a <gmtime_r+0x106>
 8085720:	0782      	lsls	r2, r0, #30
 8085722:	d105      	bne.n	8085730 <gmtime_r+0xec>
 8085724:	2464      	movs	r4, #100	; 0x64
 8085726:	fbb0 f2f4 	udiv	r2, r0, r4
 808572a:	fb04 0212 	mls	r2, r4, r2, r0
 808572e:	b94a      	cbnz	r2, 8085744 <gmtime_r+0x100>
 8085730:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8085734:	fbb0 f4f2 	udiv	r4, r0, r2
 8085738:	fb02 0014 	mls	r0, r2, r4, r0
 808573c:	fab0 f280 	clz	r2, r0
 8085740:	0952      	lsrs	r2, r2, #5
 8085742:	e000      	b.n	8085746 <gmtime_r+0x102>
 8085744:	2201      	movs	r2, #1
 8085746:	333b      	adds	r3, #59	; 0x3b
 8085748:	441a      	add	r2, r3
 808574a:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 808574e:	2300      	movs	r3, #0
 8085750:	61ca      	str	r2, [r1, #28]
 8085752:	614d      	str	r5, [r1, #20]
 8085754:	610e      	str	r6, [r1, #16]
 8085756:	60cf      	str	r7, [r1, #12]
 8085758:	620b      	str	r3, [r1, #32]
 808575a:	4608      	mov	r0, r1
 808575c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808575e:	bf00      	nop
 8085760:	00015180 	.word	0x00015180
 8085764:	00023ab1 	.word	0x00023ab1
 8085768:	fffdc54f 	.word	0xfffdc54f
 808576c:	00023ab0 	.word	0x00023ab0

08085770 <__env_lock>:
 8085770:	4770      	bx	lr

08085772 <__env_unlock>:
 8085772:	4770      	bx	lr

08085774 <dynalib_user>:
 8085774:	001d 0808 005d 0808 0089 0808 008d 0808     ....]...........
 8085784:	0000 0000 7325 5320 253a 2e32 6630 2525     ....%s S:%2.0f%%
 8085794:	202c 3a51 3225 302e 2566 2025 5400 6d69     , Q:%2.0f%% .Tim
 80857a4:	2065 2020 2020 2020 2020 2020 2020 2020     e               
 80857b4:	4320 756f 746e 2020 7544 6172 6974 6e6f      Count  Duration
 80857c4:	2000 2020 2000 6573 0063 6552 6f70 7472     .   . sec.Report
 80857d4:	6320 6d6f 6c70 7465 2065 202d 7270 7365      complete - pres
 80857e4:	2073 6572 6573 2074 7562 7474 6e6f 7420     s reset button t
 80857f4:	206f 6572 7473 7261 0074 5441 432b 5546     o restart.AT+CFU
 8085804:	3d4e 3631 0a0d 5200 7365 7465 6974 676e     N=16...Resetting
 8085814:	6920 206e 7270 676f 6572 7373 3200 2535      in progress.25%
 8085824:	6420 6e6f 0065 3035 2025 6f64 656e 3700      done.50% done.7
 8085834:	2535 6420 6e6f 0065 6f44 656e 4e00 7765     5% done.Done.New
 8085844:	7620 7369 7469 203a 6925 202c 7564 6172      visit: %i, dura
 8085854:	6974 6e6f 6f20 2066 6925 4e00 726f 616d     tion of %i.Norma
 8085864:	206c 704f 7265 7461 6f69 736e 7b00 6822     l Operations.{"h
 8085874:	756f 6c72 2279 253a 2c69 2220 7661 6467     ourly":%i, "avgd
 8085884:	7275 7461 6f69 226e 253a 2c69 2220 6164     uration":%i, "da
 8085894:	6c69 2279 253a 2c69 6222 7461 6574 7972     ily":%i,"battery
 80858a4:	3a22 6925 202c 7422 6d65 2270 253a 2c69     ":%i, "temp":%i,
 80858b4:	2220 6572 6573 7374 3a22 6925 007d 634f      "resets":%i}.Oc
 80858c4:	7563 6170 636e 5f79 6f48 6b6f 4400 7369     cupancy_Hook.Dis
 80858d4:	6f63 6e6e 6365 6974 676e 6620 6f72 206d     connecting from 
 80858e4:	6150 7472 6369 656c 5300 6174 6574 5700     Particle.State.W
 80858f4:	6961 6974 676e 6620 726f 5220 7365 6f70     aiting for Respo
 8085904:	736e 0065 6449 656c 5200 7365 6f70 736e     nse.Idle.Respons
 8085914:	2065 6954 656d 756f 2074 7245 6f72 0072     e Timeout Error.
 8085924:	5245 4f52 5f52 5453 5441 2045 202d 6552     ERROR_STATE - Re
 8085934:	6573 7474 6e69 0067 6f4e 4420 7461 0061     setting.No Data.
 8085944:	6255 6469 746f 2073 6f48 6b6f 5200 7365     Ubidots Hook.Res
 8085954:	6f70 736e 2065 6552 6563 7669 6465 5600     ponse Received.V
 8085964:	6c61 6575 2073 7261 3a65 6b20 6565 5370     alues are: keepS
 8085974:	7365 6973 6e6f 203a 6925 5600 7261 6169     ession: %i.Varia
 8085984:	6c62 7365 5300 7465 5320 6c6f 7261 5020     bles.Set Solar P
 8085994:	776f 7265 6465 4d20 646f 0065 6c43 6165     owered Mode.Clea
 80859a4:	6572 2064 6f53 616c 2072 6f50 6577 6572     red Solar Powere
 80859b4:	2064 6f4d 6564 5300 7465 5620 7265 6f62     d Mode.Set Verbo
 80859c4:	6573 4d20 646f 0065 6c43 6165 6572 2064     se Mode.Cleared 
 80859d4:	6556 6272 736f 2065 6f4d 6564 5400 6d69     Verbose Mode.Tim
 80859e4:	2065 6f7a 656e 6f20 6666 6573 2074 6925     e zone offset %i
 80859f4:	4f00 6570 206e 6974 656d 7320 7465 7420     .Open time set t
 8085a04:	206f 6925 4300 6f6c 6973 676e 7420 6d69     o %i.Closing tim
 8085a14:	2065 6573 2074 6f74 2520 0069 6f4c 2077     e set to %i.Low 
 8085a24:	6f50 6577 0072 6f48 7275 796c 6f43 6e75     Power.HourlyCoun
 8085a34:	0074 6144 6c69 4379 756f 746e 6b00 6565     t.DailyCount.kee
 8085a44:	5370 7365 6973 6e6f 5300 6769 616e 006c     pSession.Signal.
 8085a54:	6552 6573 4374 756f 746e 5200 6c65 6165     ResetCount.Relea
 8085a64:	6573 7300 6174 6574 664f 6843 0067 6f6c     se.stateOfChg.lo
 8085a74:	5077 776f 7265 6f4d 6564 4300 6f6c 6573     wPowerMode.Close
 8085a84:	6954 656d 5200 7365 7465 462d 4152 004d     Time.Reset-FRAM.
 8085a94:	6552 6573 2d74 6f43 6e75 7374 4800 7261     Reset-Counts.Har
 8085aa4:	2d64 6552 6573 0074 654b 7065 6553 7373     d-Reset.KeepSess
 8085ab4:	6f69 006e 6553 646e 4e2d 776f 4c00 776f     ion.Send-Now.Low
 8085ac4:	6f50 6577 4d72 646f 0065 6f53 616c 2d72     PowerMode.Solar-
 8085ad4:	6f4d 6564 5600 7265 6f62 6573 4d2d 646f     Mode.Verbose-Mod
 8085ae4:	0065 6553 5474 6d69 5a65 6e6f 0065 6553     e.SetTimeZone.Se
 8085af4:	4f74 6570 546e 6d69 0065 6553 4374 6f6c     tOpenTime.SetClo
 8085b04:	6573 6300 6e6f 456e 6576 746e 7453 7461     se.connEventStat
 8085b14:	0073 6e55 6e6b 776f 006e 6f4e 656e 5700     s.Unknown.None.W
 8085b24:	4669 0069 5347 004d 4d55 5354 4300 4d44     iFi.GSM.UMTS.CDM
 8085b34:	0041 544c 0045 4549 4545 3038 3132 3435     A.LTE.IEEE802154
 8085b44:	3000 382e 0030 6c25 2c75 6c25 2c75 6425     .0.80.%lu,%lu,%d
 8085b54:	252c 3b64 6300 756f 646c 276e 2074 6573     ,%d;.couldn't se
 8085b64:	646e 6120 6c6c 6520 6576 746e 2c73 7320     nd all events, s
 8085b74:	7661 6e69 2067 6425 6620 726f 6c20 7461     aving %d for lat
 8085b84:	7265 7300 6e65 2074 6425 6520 6576 746e     er.sent %d event
 8085b94:	0073 6964 6373 7261 6964 676e 6f20 646c     s.discarding old
 8085ba4:	6520 6576 746e 6300 6e6f 656e 7463 6f69      event.connectio
 8085bb4:	456e 6576 746e 6520 6576 746e 253d 2064     nEvent event=%d 
 8085bc4:	6164 6174 253d 0064 6e69 7469 6169 696c     data=%d.initiali
 8085bd4:	697a 676e 6320 6e6f 656e 7463 6f69 206e     zing connection 
 8085be4:	7665 6e65 2074 6572 6174 6e69 6465 6d20     event retained m
 8085bf4:	6d65 726f 0079 0000                         emory...

08085bfc <_ZTV16ConnectionEvents>:
	...
 8085c04:	17a5 0808 17a7 0808                         ........

08085c0c <_ZTVN5spark13CellularClassE>:
	...
 8085c14:	207f 0808 2075 0808 206b 0808 1fdd 0808     . ..u ..k ......
 8085c24:	205f 0808 2053 0808 2047 0808 203f 0808     _ ..S ..G ..? ..
 8085c34:	2035 0808 202b 0808 1fe7 0808               5 ..+ ......

08085c40 <_ZTV14CellularSignal>:
	...
 8085c48:	213d 0808 21bf 0808 213f 0808 21fd 0808     =!...!..?!...!..
 8085c58:	2145 0808 21cd 0808 2169 0808 218d 0808     E!...!..i!...!..
 8085c68:	fffc ffff 0000 0000 21b7 0808               .........!..

08085c74 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8085c7c:	2245 0808 224b 0808 2261 0808 2257 0808     E"..K"..a"..W"..
 8085c8c:	2247 0808                                   G"..

08085c90 <_ZTV7TwoWire>:
	...
 8085c98:	28b1 0808 28fb 0808 28d3 0808 28b3 0808     .(...(...(...(..
 8085ca8:	28db 0808 28e3 0808 28eb 0808 28f3 0808     .(...(...(...(..

08085cb8 <_ZTV9IPAddress>:
	...
 8085cc0:	2a37 0808 2a29 0808 2a2b 0808 0066 6e6c     7*..)*..+*..f.ln
 8085cd0:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
 8085ce0:	3025 3031 2075 5d00 0020 202c 2800 3a29     %010u .] ., .():
 8085cf0:	0020 5b20 6300 646f 2065 203d 6400 7465      . [.code = .det
 8085d00:	6961 736c 3d20 0020 6162 6475 5300 7265     ails = .baud.Ser
 8085d10:	6169 006c 5355 5342 7265 6169 316c 7400     ial.USBSerial1.t
 8085d20:	7079 0065 6170 6172 006d 6d63 0064 6469     ype.param.cmd.id
 8085d30:	6800 646e 7300 7274 006d 6966 746c 6c00     .hnd.strm.filt.l
 8085d40:	6c76 6100 6464 6148 646e 656c 0072 6572     vl.addHandler.re
 8085d50:	6f6d 6576 6148 646e 656c 0072 6e65 6d75     moveHandler.enum
 8085d60:	6148 646e 656c 7372 4a00 4f53 534e 7274     Handlers.JSONStr
 8085d70:	6165 4c6d 676f 6148 646e 656c 0072 7061     eamLogHandler.ap
 8085d80:	0070 6f6e 656e 7400 6172 6563 6900 666e     p.none.trace.inf
 8085d90:	006f 6177 6e72 6500 7272 726f 7000 6e61     o.warn.error.pan
 8085da0:	6369 6100 6c6c 0000                         ic.all..

08085da8 <_ZTVN5spark12NetworkClassE>:
	...
 8085db0:	2ad5 0808 2adf 0808 2ae9 0808 2af3 0808     .*...*...*...*..
 8085dc0:	2afd 0808 2b09 0808 2b15 0808 2b21 0808     .*...+...+..!+..
 8085dd0:	2b29 0808 2b33 0808 2b3d 0808               )+..3+..=+..

08085ddc <_ZTV8SPIClass>:
	...
 8085de4:	3075 0808 3077 0808 2b25 3330 3a64 3025     u0..w0..%+03d:%0
 8085df4:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
 8085e04:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

08085e14 <_ZTV11USARTSerial>:
	...
 8085e1c:	3481 0808 34a5 0808 34b1 0808 2f25 0808     .4...4...4..%/..
 8085e2c:	348d 0808 3499 0808 3493 0808 349f 0808     .4...4...4...4..
 8085e3c:	3483 0808 3487 0808                         .4...4..

08085e44 <_ZTV9USBSerial>:
	...
 8085e4c:	3559 0808 359d 0808 3577 0808 2f25 0808     Y5...5..w5..%/..
 8085e5c:	3571 0808 355b 0808 3563 0808 3597 0808     q5..[5..c5...5..
 8085e6c:	356b 0808 3555 0808                         k5..U5..

08085e74 <day_name.4723>:
 8085e74:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 8085e84:	6972 6153 4a74                                   riSat

08085e89 <mon_name.4724>:
 8085e89:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 8085e99:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 8085ea9:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 8085eb9:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 8085ec9:	6425 000a                                   %d..

08085ecd <_ctype_>:
 8085ecd:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 8085edd:	2020 2020 2020 2020 2020 2020 2020 2020                     
 8085eed:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8085efd:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8085f0d:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8085f1d:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8085f2d:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 8085f3d:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8085f4d:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

08085fd0 <__sf_fake_stdin>:
	...

08085ff0 <__sf_fake_stdout>:
	...

08086010 <__sf_fake_stderr>:
	...
 8086030:	0043 0000                                   C...

08086034 <__month_lengths>:
 8086034:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 8086044:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8086054:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8086064:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 8086074:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8086084:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8086094:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 80860a4:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 80860b4:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 80860c4:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

080860d0 <link_const_variable_data_end>:
 80860d0:	08080159 	.word	0x08080159
 80860d4:	0808164d 	.word	0x0808164d
 80860d8:	0808170b 	.word	0x0808170b
 80860dc:	08081711 	.word	0x08081711
 80860e0:	08081795 	.word	0x08081795
 80860e4:	080819b5 	.word	0x080819b5
 80860e8:	080819c5 	.word	0x080819c5
 80860ec:	080819d5 	.word	0x080819d5
 80860f0:	080820fd 	.word	0x080820fd
 80860f4:	08082ac5 	.word	0x08082ac5
 80860f8:	08082b89 	.word	0x08082b89
 80860fc:	08083059 	.word	0x08083059
 8086100:	080832ad 	.word	0x080832ad
 8086104:	0808346d 	.word	0x0808346d
 8086108:	08083981 	.word	0x08083981
 808610c:	080839b1 	.word	0x080839b1
 8086110:	08083a1d 	.word	0x08083a1d
 8086114:	08083ae1 	.word	0x08083ae1
 8086118:	08083b65 	.word	0x08083b65
 808611c:	08083be9 	.word	0x08083be9
